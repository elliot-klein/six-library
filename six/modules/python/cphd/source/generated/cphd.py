# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_cphd')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_cphd')
    _cphd = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cphd', [dirname(__file__)])
        except ImportError:
            import _cphd
            return _cphd
        try:
            _mod = imp.load_module('_cphd', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _cphd = swig_import_helper()
    del swig_import_helper
else:
    import _cphd
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cphd.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        """value(SwigPyIterator self) -> PyObject *"""
        return _cphd.SwigPyIterator_value(self)


    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        """
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        incr(SwigPyIterator self) -> SwigPyIterator
        """
        return _cphd.SwigPyIterator_incr(self, n)


    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        """
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        decr(SwigPyIterator self) -> SwigPyIterator
        """
        return _cphd.SwigPyIterator_decr(self, n)


    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        """distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _cphd.SwigPyIterator_distance(self, x)


    def equal(self, x: 'SwigPyIterator') -> "bool":
        """equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _cphd.SwigPyIterator_equal(self, x)


    def copy(self) -> "swig::SwigPyIterator *":
        """copy(SwigPyIterator self) -> SwigPyIterator"""
        return _cphd.SwigPyIterator_copy(self)


    def next(self) -> "PyObject *":
        """next(SwigPyIterator self) -> PyObject *"""
        return _cphd.SwigPyIterator_next(self)


    def __next__(self) -> "PyObject *":
        """__next__(SwigPyIterator self) -> PyObject *"""
        return _cphd.SwigPyIterator___next__(self)


    def previous(self) -> "PyObject *":
        """previous(SwigPyIterator self) -> PyObject *"""
        return _cphd.SwigPyIterator_previous(self)


    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        """advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _cphd.SwigPyIterator_advance(self, n)


    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        """__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _cphd.SwigPyIterator___eq__(self, x)


    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        """__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _cphd.SwigPyIterator___ne__(self, x)


    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        """__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _cphd.SwigPyIterator___iadd__(self, n)


    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        """__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _cphd.SwigPyIterator___isub__(self, n)


    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        """__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _cphd.SwigPyIterator___add__(self, n)


    def __sub__(self, *args) -> "ptrdiff_t":
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _cphd.SwigPyIterator___sub__(self, *args)

    def __iter__(self):
        return self
SwigPyIterator_swigregister = _cphd.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import coda.coda_sys
import coda.coda_types
import coda.mem
import pysix.six_sicd
import coda.math_poly
import coda.math_linear
import coda.coda_except
import pysix.six_base
import pysix.scene
import coda.coda_io
class SampleType(_object):
    """Proxy of C++ cphd::SampleType class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SampleType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SampleType, name)
    __repr__ = _swig_repr
    RE32F_IM32F = _cphd.SampleType_RE32F_IM32F
    RE16I_IM16I = _cphd.SampleType_RE16I_IM16I
    RE08I_IM08I = _cphd.SampleType_RE08I_IM08I
    NOT_SET = _cphd.SampleType_NOT_SET

    def __init__(self, *args):
        """
        __init__(cphd::SampleType self) -> SampleType
        __init__(cphd::SampleType self, std::string const & s) -> SampleType
        __init__(cphd::SampleType self, int i) -> SampleType
        """
        this = _cphd.new_SampleType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def toString(self) -> "std::string":
        """toString(SampleType self) -> std::string"""
        return _cphd.SampleType_toString(self)


    def __eq__(self, *args) -> "bool":
        """
        __eq__(SampleType self, SampleType o) -> bool
        __eq__(SampleType self, int const & o) -> bool
        """
        return _cphd.SampleType___eq__(self, *args)


    def __ne__(self, *args) -> "bool":
        """
        __ne__(SampleType self, SampleType o) -> bool
        __ne__(SampleType self, int const & o) -> bool
        """
        return _cphd.SampleType___ne__(self, *args)


    def __lt__(self, o: 'SampleType') -> "bool":
        """__lt__(SampleType self, SampleType o) -> bool"""
        return _cphd.SampleType___lt__(self, o)


    def __gt__(self, o: 'SampleType') -> "bool":
        """__gt__(SampleType self, SampleType o) -> bool"""
        return _cphd.SampleType___gt__(self, o)


    def __le__(self, o: 'SampleType') -> "bool":
        """__le__(SampleType self, SampleType o) -> bool"""
        return _cphd.SampleType___le__(self, o)


    def __ge__(self, o: 'SampleType') -> "bool":
        """__ge__(SampleType self, SampleType o) -> bool"""
        return _cphd.SampleType___ge__(self, o)

    __swig_setmethods__["value"] = _cphd.SampleType_value_set
    __swig_getmethods__["value"] = _cphd.SampleType_value_get
    if _newclass:
        value = _swig_property(_cphd.SampleType_value_get, _cphd.SampleType_value_set)
    __swig_destroy__ = _cphd.delete_SampleType
    __del__ = lambda self: None
SampleType_swigregister = _cphd.SampleType_swigregister
SampleType_swigregister(SampleType)
cvar = _cphd.cvar
NOT_SET_VALUE = cvar.NOT_SET_VALUE

class DomainType(_object):
    """Proxy of C++ cphd::DomainType class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DomainType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DomainType, name)
    __repr__ = _swig_repr
    FX = _cphd.DomainType_FX
    TOA = _cphd.DomainType_TOA
    NOT_SET = _cphd.DomainType_NOT_SET

    def __init__(self, *args):
        """
        __init__(cphd::DomainType self) -> DomainType
        __init__(cphd::DomainType self, std::string const & s) -> DomainType
        __init__(cphd::DomainType self, int i) -> DomainType
        """
        this = _cphd.new_DomainType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def toString(self) -> "std::string":
        """toString(DomainType self) -> std::string"""
        return _cphd.DomainType_toString(self)


    def __eq__(self, *args) -> "bool":
        """
        __eq__(DomainType self, DomainType o) -> bool
        __eq__(DomainType self, int const & o) -> bool
        """
        return _cphd.DomainType___eq__(self, *args)


    def __ne__(self, *args) -> "bool":
        """
        __ne__(DomainType self, DomainType o) -> bool
        __ne__(DomainType self, int const & o) -> bool
        """
        return _cphd.DomainType___ne__(self, *args)


    def __lt__(self, o: 'DomainType') -> "bool":
        """__lt__(DomainType self, DomainType o) -> bool"""
        return _cphd.DomainType___lt__(self, o)


    def __gt__(self, o: 'DomainType') -> "bool":
        """__gt__(DomainType self, DomainType o) -> bool"""
        return _cphd.DomainType___gt__(self, o)


    def __le__(self, o: 'DomainType') -> "bool":
        """__le__(DomainType self, DomainType o) -> bool"""
        return _cphd.DomainType___le__(self, o)


    def __ge__(self, o: 'DomainType') -> "bool":
        """__ge__(DomainType self, DomainType o) -> bool"""
        return _cphd.DomainType___ge__(self, o)

    __swig_setmethods__["value"] = _cphd.DomainType_value_set
    __swig_getmethods__["value"] = _cphd.DomainType_value_get
    if _newclass:
        value = _swig_property(_cphd.DomainType_value_get, _cphd.DomainType_value_set)
    __swig_destroy__ = _cphd.delete_DomainType
    __del__ = lambda self: None
DomainType_swigregister = _cphd.DomainType_swigregister
DomainType_swigregister(DomainType)

class PhaseSGN(_object):
    """Proxy of C++ cphd::PhaseSGN class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PhaseSGN, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PhaseSGN, name)
    __repr__ = _swig_repr
    MINUS_1 = _cphd.PhaseSGN_MINUS_1
    PLUS_1 = _cphd.PhaseSGN_PLUS_1
    NOT_SET = _cphd.PhaseSGN_NOT_SET

    def __init__(self, *args):
        """
        __init__(cphd::PhaseSGN self) -> PhaseSGN
        __init__(cphd::PhaseSGN self, std::string const & s) -> PhaseSGN
        __init__(cphd::PhaseSGN self, int i) -> PhaseSGN
        """
        this = _cphd.new_PhaseSGN(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def toString(self) -> "std::string":
        """toString(PhaseSGN self) -> std::string"""
        return _cphd.PhaseSGN_toString(self)


    def __eq__(self, *args) -> "bool":
        """
        __eq__(PhaseSGN self, PhaseSGN o) -> bool
        __eq__(PhaseSGN self, int const & o) -> bool
        """
        return _cphd.PhaseSGN___eq__(self, *args)


    def __ne__(self, *args) -> "bool":
        """
        __ne__(PhaseSGN self, PhaseSGN o) -> bool
        __ne__(PhaseSGN self, int const & o) -> bool
        """
        return _cphd.PhaseSGN___ne__(self, *args)


    def __lt__(self, o: 'PhaseSGN') -> "bool":
        """__lt__(PhaseSGN self, PhaseSGN o) -> bool"""
        return _cphd.PhaseSGN___lt__(self, o)


    def __gt__(self, o: 'PhaseSGN') -> "bool":
        """__gt__(PhaseSGN self, PhaseSGN o) -> bool"""
        return _cphd.PhaseSGN___gt__(self, o)


    def __le__(self, o: 'PhaseSGN') -> "bool":
        """__le__(PhaseSGN self, PhaseSGN o) -> bool"""
        return _cphd.PhaseSGN___le__(self, o)


    def __ge__(self, o: 'PhaseSGN') -> "bool":
        """__ge__(PhaseSGN self, PhaseSGN o) -> bool"""
        return _cphd.PhaseSGN___ge__(self, o)

    __swig_setmethods__["value"] = _cphd.PhaseSGN_value_set
    __swig_getmethods__["value"] = _cphd.PhaseSGN_value_get
    if _newclass:
        value = _swig_property(_cphd.PhaseSGN_value_get, _cphd.PhaseSGN_value_set)
    __swig_destroy__ = _cphd.delete_PhaseSGN
    __del__ = lambda self: None
PhaseSGN_swigregister = _cphd.PhaseSGN_swigregister
PhaseSGN_swigregister(PhaseSGN)

class RefHeight(_object):
    """Proxy of C++ cphd::RefHeight class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefHeight, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RefHeight, name)
    __repr__ = _swig_repr
    IARP = _cphd.RefHeight_IARP
    ZERO = _cphd.RefHeight_ZERO
    NOT_SET = _cphd.RefHeight_NOT_SET

    def __init__(self, *args):
        """
        __init__(cphd::RefHeight self) -> RefHeight
        __init__(cphd::RefHeight self, std::string const & s) -> RefHeight
        __init__(cphd::RefHeight self, int i) -> RefHeight
        """
        this = _cphd.new_RefHeight(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def toString(self) -> "std::string":
        """toString(RefHeight self) -> std::string"""
        return _cphd.RefHeight_toString(self)


    def __eq__(self, *args) -> "bool":
        """
        __eq__(RefHeight self, RefHeight o) -> bool
        __eq__(RefHeight self, int const & o) -> bool
        """
        return _cphd.RefHeight___eq__(self, *args)


    def __ne__(self, *args) -> "bool":
        """
        __ne__(RefHeight self, RefHeight o) -> bool
        __ne__(RefHeight self, int const & o) -> bool
        """
        return _cphd.RefHeight___ne__(self, *args)


    def __lt__(self, o: 'RefHeight') -> "bool":
        """__lt__(RefHeight self, RefHeight o) -> bool"""
        return _cphd.RefHeight___lt__(self, o)


    def __gt__(self, o: 'RefHeight') -> "bool":
        """__gt__(RefHeight self, RefHeight o) -> bool"""
        return _cphd.RefHeight___gt__(self, o)


    def __le__(self, o: 'RefHeight') -> "bool":
        """__le__(RefHeight self, RefHeight o) -> bool"""
        return _cphd.RefHeight___le__(self, o)


    def __ge__(self, o: 'RefHeight') -> "bool":
        """__ge__(RefHeight self, RefHeight o) -> bool"""
        return _cphd.RefHeight___ge__(self, o)

    __swig_setmethods__["value"] = _cphd.RefHeight_value_set
    __swig_getmethods__["value"] = _cphd.RefHeight_value_get
    if _newclass:
        value = _swig_property(_cphd.RefHeight_value_get, _cphd.RefHeight_value_set)
    __swig_destroy__ = _cphd.delete_RefHeight
    __del__ = lambda self: None
RefHeight_swigregister = _cphd.RefHeight_swigregister
RefHeight_swigregister(RefHeight)

class EarthModelType(_object):
    """Proxy of C++ cphd::EarthModelType class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EarthModelType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EarthModelType, name)
    __repr__ = _swig_repr
    WGS_84 = _cphd.EarthModelType_WGS_84
    NOT_SET = _cphd.EarthModelType_NOT_SET

    def __init__(self, *args):
        """
        __init__(cphd::EarthModelType self) -> EarthModelType
        __init__(cphd::EarthModelType self, std::string const & s) -> EarthModelType
        __init__(cphd::EarthModelType self, int i) -> EarthModelType
        """
        this = _cphd.new_EarthModelType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def toString(self) -> "std::string":
        """toString(EarthModelType self) -> std::string"""
        return _cphd.EarthModelType_toString(self)


    def __eq__(self, *args) -> "bool":
        """
        __eq__(EarthModelType self, EarthModelType o) -> bool
        __eq__(EarthModelType self, int const & o) -> bool
        """
        return _cphd.EarthModelType___eq__(self, *args)


    def __ne__(self, *args) -> "bool":
        """
        __ne__(EarthModelType self, EarthModelType o) -> bool
        __ne__(EarthModelType self, int const & o) -> bool
        """
        return _cphd.EarthModelType___ne__(self, *args)


    def __lt__(self, o: 'EarthModelType') -> "bool":
        """__lt__(EarthModelType self, EarthModelType o) -> bool"""
        return _cphd.EarthModelType___lt__(self, o)


    def __gt__(self, o: 'EarthModelType') -> "bool":
        """__gt__(EarthModelType self, EarthModelType o) -> bool"""
        return _cphd.EarthModelType___gt__(self, o)


    def __le__(self, o: 'EarthModelType') -> "bool":
        """__le__(EarthModelType self, EarthModelType o) -> bool"""
        return _cphd.EarthModelType___le__(self, o)


    def __ge__(self, o: 'EarthModelType') -> "bool":
        """__ge__(EarthModelType self, EarthModelType o) -> bool"""
        return _cphd.EarthModelType___ge__(self, o)

    __swig_setmethods__["value"] = _cphd.EarthModelType_value_set
    __swig_getmethods__["value"] = _cphd.EarthModelType_value_get
    if _newclass:
        value = _swig_property(_cphd.EarthModelType_value_get, _cphd.EarthModelType_value_set)
    __swig_destroy__ = _cphd.delete_EarthModelType
    __del__ = lambda self: None
EarthModelType_swigregister = _cphd.EarthModelType_swigregister
EarthModelType_swigregister(EarthModelType)

class SignalArrayFormat(_object):
    """Proxy of C++ cphd::SignalArrayFormat class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SignalArrayFormat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SignalArrayFormat, name)
    __repr__ = _swig_repr
    CI2 = _cphd.SignalArrayFormat_CI2
    CI4 = _cphd.SignalArrayFormat_CI4
    CF8 = _cphd.SignalArrayFormat_CF8
    NOT_SET = _cphd.SignalArrayFormat_NOT_SET

    def __init__(self, *args):
        """
        __init__(cphd::SignalArrayFormat self) -> SignalArrayFormat
        __init__(cphd::SignalArrayFormat self, std::string const & s) -> SignalArrayFormat
        __init__(cphd::SignalArrayFormat self, int i) -> SignalArrayFormat
        """
        this = _cphd.new_SignalArrayFormat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def toString(self) -> "std::string":
        """toString(SignalArrayFormat self) -> std::string"""
        return _cphd.SignalArrayFormat_toString(self)


    def __eq__(self, *args) -> "bool":
        """
        __eq__(SignalArrayFormat self, SignalArrayFormat o) -> bool
        __eq__(SignalArrayFormat self, int const & o) -> bool
        """
        return _cphd.SignalArrayFormat___eq__(self, *args)


    def __ne__(self, *args) -> "bool":
        """
        __ne__(SignalArrayFormat self, SignalArrayFormat o) -> bool
        __ne__(SignalArrayFormat self, int const & o) -> bool
        """
        return _cphd.SignalArrayFormat___ne__(self, *args)


    def __lt__(self, o: 'SignalArrayFormat') -> "bool":
        """__lt__(SignalArrayFormat self, SignalArrayFormat o) -> bool"""
        return _cphd.SignalArrayFormat___lt__(self, o)


    def __gt__(self, o: 'SignalArrayFormat') -> "bool":
        """__gt__(SignalArrayFormat self, SignalArrayFormat o) -> bool"""
        return _cphd.SignalArrayFormat___gt__(self, o)


    def __le__(self, o: 'SignalArrayFormat') -> "bool":
        """__le__(SignalArrayFormat self, SignalArrayFormat o) -> bool"""
        return _cphd.SignalArrayFormat___le__(self, o)


    def __ge__(self, o: 'SignalArrayFormat') -> "bool":
        """__ge__(SignalArrayFormat self, SignalArrayFormat o) -> bool"""
        return _cphd.SignalArrayFormat___ge__(self, o)

    __swig_setmethods__["value"] = _cphd.SignalArrayFormat_value_set
    __swig_getmethods__["value"] = _cphd.SignalArrayFormat_value_get
    if _newclass:
        value = _swig_property(_cphd.SignalArrayFormat_value_get, _cphd.SignalArrayFormat_value_set)
    __swig_destroy__ = _cphd.delete_SignalArrayFormat
    __del__ = lambda self: None
SignalArrayFormat_swigregister = _cphd.SignalArrayFormat_swigregister
SignalArrayFormat_swigregister(SignalArrayFormat)

class SRPType(_object):
    """Proxy of C++ cphd::SRPType class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SRPType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SRPType, name)
    __repr__ = _swig_repr
    FIXEDPT = _cphd.SRPType_FIXEDPT
    PVTPOLY = _cphd.SRPType_PVTPOLY
    PVVPOLY = _cphd.SRPType_PVVPOLY
    STEPPED = _cphd.SRPType_STEPPED
    NOT_SET = _cphd.SRPType_NOT_SET

    def __init__(self, *args):
        """
        __init__(cphd::SRPType self) -> SRPType
        __init__(cphd::SRPType self, std::string const & s) -> SRPType
        __init__(cphd::SRPType self, int i) -> SRPType
        """
        this = _cphd.new_SRPType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def toString(self) -> "std::string":
        """toString(SRPType self) -> std::string"""
        return _cphd.SRPType_toString(self)


    def __eq__(self, *args) -> "bool":
        """
        __eq__(SRPType self, SRPType o) -> bool
        __eq__(SRPType self, int const & o) -> bool
        """
        return _cphd.SRPType___eq__(self, *args)


    def __ne__(self, *args) -> "bool":
        """
        __ne__(SRPType self, SRPType o) -> bool
        __ne__(SRPType self, int const & o) -> bool
        """
        return _cphd.SRPType___ne__(self, *args)


    def __lt__(self, o: 'SRPType') -> "bool":
        """__lt__(SRPType self, SRPType o) -> bool"""
        return _cphd.SRPType___lt__(self, o)


    def __gt__(self, o: 'SRPType') -> "bool":
        """__gt__(SRPType self, SRPType o) -> bool"""
        return _cphd.SRPType___gt__(self, o)


    def __le__(self, o: 'SRPType') -> "bool":
        """__le__(SRPType self, SRPType o) -> bool"""
        return _cphd.SRPType___le__(self, o)


    def __ge__(self, o: 'SRPType') -> "bool":
        """__ge__(SRPType self, SRPType o) -> bool"""
        return _cphd.SRPType___ge__(self, o)

    __swig_setmethods__["value"] = _cphd.SRPType_value_set
    __swig_getmethods__["value"] = _cphd.SRPType_value_get
    if _newclass:
        value = _swig_property(_cphd.SRPType_value_get, _cphd.SRPType_value_set)
    __swig_destroy__ = _cphd.delete_SRPType
    __del__ = lambda self: None
SRPType_swigregister = _cphd.SRPType_swigregister
SRPType_swigregister(SRPType)

class PolarizationType(_object):
    """Proxy of C++ cphd::PolarizationType class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolarizationType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PolarizationType, name)
    __repr__ = _swig_repr
    X = _cphd.PolarizationType_X
    Y = _cphd.PolarizationType_Y
    V = _cphd.PolarizationType_V
    H = _cphd.PolarizationType_H
    RHC = _cphd.PolarizationType_RHC
    LHC = _cphd.PolarizationType_LHC
    UNSPECIFIED = _cphd.PolarizationType_UNSPECIFIED
    NOT_SET = _cphd.PolarizationType_NOT_SET

    def __init__(self, *args):
        """
        __init__(cphd::PolarizationType self) -> PolarizationType
        __init__(cphd::PolarizationType self, std::string const & s) -> PolarizationType
        __init__(cphd::PolarizationType self, int i) -> PolarizationType
        """
        this = _cphd.new_PolarizationType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def toString(self) -> "std::string":
        """toString(PolarizationType self) -> std::string"""
        return _cphd.PolarizationType_toString(self)


    def __eq__(self, *args) -> "bool":
        """
        __eq__(PolarizationType self, PolarizationType o) -> bool
        __eq__(PolarizationType self, int const & o) -> bool
        """
        return _cphd.PolarizationType___eq__(self, *args)


    def __ne__(self, *args) -> "bool":
        """
        __ne__(PolarizationType self, PolarizationType o) -> bool
        __ne__(PolarizationType self, int const & o) -> bool
        """
        return _cphd.PolarizationType___ne__(self, *args)


    def __lt__(self, o: 'PolarizationType') -> "bool":
        """__lt__(PolarizationType self, PolarizationType o) -> bool"""
        return _cphd.PolarizationType___lt__(self, o)


    def __gt__(self, o: 'PolarizationType') -> "bool":
        """__gt__(PolarizationType self, PolarizationType o) -> bool"""
        return _cphd.PolarizationType___gt__(self, o)


    def __le__(self, o: 'PolarizationType') -> "bool":
        """__le__(PolarizationType self, PolarizationType o) -> bool"""
        return _cphd.PolarizationType___le__(self, o)


    def __ge__(self, o: 'PolarizationType') -> "bool":
        """__ge__(PolarizationType self, PolarizationType o) -> bool"""
        return _cphd.PolarizationType___ge__(self, o)

    __swig_setmethods__["value"] = _cphd.PolarizationType_value_set
    __swig_getmethods__["value"] = _cphd.PolarizationType_value_get
    if _newclass:
        value = _swig_property(_cphd.PolarizationType_value_get, _cphd.PolarizationType_value_set)
    __swig_destroy__ = _cphd.delete_PolarizationType
    __del__ = lambda self: None
PolarizationType_swigregister = _cphd.PolarizationType_swigregister
PolarizationType_swigregister(PolarizationType)

class MetadataBase(_object):
    """Proxy of C++ cphd::MetadataBase class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MetadataBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MetadataBase, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cphd.delete_MetadataBase
    __del__ = lambda self: None

    def getNumChannels(self) -> "size_t":
        """getNumChannels(MetadataBase self) -> size_t"""
        return _cphd.MetadataBase_getNumChannels(self)


    def getNumVectors(self, channel: 'size_t') -> "size_t":
        """getNumVectors(MetadataBase self, size_t channel) -> size_t"""
        return _cphd.MetadataBase_getNumVectors(self, channel)


    def getNumSamples(self, channel: 'size_t') -> "size_t":
        """getNumSamples(MetadataBase self, size_t channel) -> size_t"""
        return _cphd.MetadataBase_getNumSamples(self, channel)


    def getNumBytesPerSample(self) -> "size_t":
        """getNumBytesPerSample(MetadataBase self) -> size_t"""
        return _cphd.MetadataBase_getNumBytesPerSample(self)


    def getCompressedSignalSize(self, channel: 'size_t') -> "size_t":
        """getCompressedSignalSize(MetadataBase self, size_t channel) -> size_t"""
        return _cphd.MetadataBase_getCompressedSignalSize(self, channel)


    def isCompressed(self) -> "bool":
        """isCompressed(MetadataBase self) -> bool"""
        return _cphd.MetadataBase_isCompressed(self)


    def getDomainType(self) -> "cphd::DomainType":
        """getDomainType(MetadataBase self) -> DomainType"""
        return _cphd.MetadataBase_getDomainType(self)


    def isFX(self) -> "bool":
        """isFX(MetadataBase self) -> bool"""
        return _cphd.MetadataBase_isFX(self)


    def isTOA(self) -> "bool":
        """isTOA(MetadataBase self) -> bool"""
        return _cphd.MetadataBase_isTOA(self)

MetadataBase_swigregister = _cphd.MetadataBase_swigregister
MetadataBase_swigregister(MetadataBase)

class FileHeader(_object):
    """Proxy of C++ cphd::FileHeader class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FileHeader, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::FileHeader self) -> FileHeader"""
        this = _cphd.new_FileHeader()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cphd.delete_FileHeader
    __del__ = lambda self: None

    def read(self, inStream: 'SeekableInputStream') -> "void":
        """read(FileHeader self, SeekableInputStream inStream)"""
        return _cphd.FileHeader_read(self, inStream)


    def toString(self) -> "std::string":
        """toString(FileHeader self) -> std::string"""
        return _cphd.FileHeader_toString(self)


    def getVersion(self) -> "std::string":
        """getVersion(FileHeader self) -> std::string"""
        return _cphd.FileHeader_getVersion(self)


    def setVersion(self, version: 'std::string const &') -> "void":
        """setVersion(FileHeader self, std::string const & version)"""
        return _cphd.FileHeader_setVersion(self, version)


    def set(self, *args) -> "size_t":
        """
        set(FileHeader self) -> size_t
        set(FileHeader self, sys::Off_T xmlBlockSize, sys::Off_T supportBlockSize, sys::Off_T pvpBlockSize, sys::Off_T signalBlockSize) -> size_t
        """
        return _cphd.FileHeader_set(self, *args)


    def setXMLBlockSize(self, size: 'sys::Off_T') -> "void":
        """setXMLBlockSize(FileHeader self, sys::Off_T size)"""
        return _cphd.FileHeader_setXMLBlockSize(self, size)


    def setPvpBlockSize(self, size: 'sys::Off_T') -> "void":
        """setPvpBlockSize(FileHeader self, sys::Off_T size)"""
        return _cphd.FileHeader_setPvpBlockSize(self, size)


    def setSignalBlockSize(self, size: 'sys::Off_T') -> "void":
        """setSignalBlockSize(FileHeader self, sys::Off_T size)"""
        return _cphd.FileHeader_setSignalBlockSize(self, size)


    def setXMLBlockByteOffset(self, offset: 'sys::Off_T') -> "void":
        """setXMLBlockByteOffset(FileHeader self, sys::Off_T offset)"""
        return _cphd.FileHeader_setXMLBlockByteOffset(self, offset)


    def setPvpBlockByteOffset(self, offset: 'sys::Off_T') -> "void":
        """setPvpBlockByteOffset(FileHeader self, sys::Off_T offset)"""
        return _cphd.FileHeader_setPvpBlockByteOffset(self, offset)


    def setSignalBlockByteOffset(self, offset: 'sys::Off_T') -> "void":
        """setSignalBlockByteOffset(FileHeader self, sys::Off_T offset)"""
        return _cphd.FileHeader_setSignalBlockByteOffset(self, offset)


    def setClassification(self, str: 'std::string const &') -> "void":
        """setClassification(FileHeader self, std::string const & str)"""
        return _cphd.FileHeader_setClassification(self, str)


    def setReleaseInfo(self, str: 'std::string const &') -> "void":
        """setReleaseInfo(FileHeader self, std::string const & str)"""
        return _cphd.FileHeader_setReleaseInfo(self, str)


    def getXMLBlockSize(self) -> "sys::Off_T":
        """getXMLBlockSize(FileHeader self) -> sys::Off_T"""
        return _cphd.FileHeader_getXMLBlockSize(self)


    def getPvpBlockSize(self) -> "sys::Off_T":
        """getPvpBlockSize(FileHeader self) -> sys::Off_T"""
        return _cphd.FileHeader_getPvpBlockSize(self)


    def getSignalBlockSize(self) -> "sys::Off_T":
        """getSignalBlockSize(FileHeader self) -> sys::Off_T"""
        return _cphd.FileHeader_getSignalBlockSize(self)


    def getXMLBlockByteOffset(self) -> "sys::Off_T":
        """getXMLBlockByteOffset(FileHeader self) -> sys::Off_T"""
        return _cphd.FileHeader_getXMLBlockByteOffset(self)


    def getPvpBlockByteOffset(self) -> "sys::Off_T":
        """getPvpBlockByteOffset(FileHeader self) -> sys::Off_T"""
        return _cphd.FileHeader_getPvpBlockByteOffset(self)


    def getSignalBlockByteOffset(self) -> "sys::Off_T":
        """getSignalBlockByteOffset(FileHeader self) -> sys::Off_T"""
        return _cphd.FileHeader_getSignalBlockByteOffset(self)


    def getClassification(self) -> "std::string":
        """getClassification(FileHeader self) -> std::string"""
        return _cphd.FileHeader_getClassification(self)


    def getReleaseInfo(self) -> "std::string":
        """getReleaseInfo(FileHeader self) -> std::string"""
        return _cphd.FileHeader_getReleaseInfo(self)


    def getPvpPadBytes(self) -> "sys::Off_T":
        """getPvpPadBytes(FileHeader self) -> sys::Off_T"""
        return _cphd.FileHeader_getPvpPadBytes(self)


    def setSupportBlockSize(self, size: 'sys::Off_T') -> "void":
        """setSupportBlockSize(FileHeader self, sys::Off_T size)"""
        return _cphd.FileHeader_setSupportBlockSize(self, size)


    def setSupportBlockByteOffset(self, offset: 'sys::Off_T') -> "void":
        """setSupportBlockByteOffset(FileHeader self, sys::Off_T offset)"""
        return _cphd.FileHeader_setSupportBlockByteOffset(self, offset)


    def getSupportBlockSize(self) -> "sys::Off_T":
        """getSupportBlockSize(FileHeader self) -> sys::Off_T"""
        return _cphd.FileHeader_getSupportBlockSize(self)


    def getSupportBlockByteOffset(self) -> "sys::Off_T":
        """getSupportBlockByteOffset(FileHeader self) -> sys::Off_T"""
        return _cphd.FileHeader_getSupportBlockByteOffset(self)


    def __str__(self) -> "std::string":
        """__str__(FileHeader self) -> std::string"""
        return _cphd.FileHeader___str__(self)

FileHeader_swigregister = _cphd.FileHeader_swigregister
FileHeader_swigregister(FileHeader)
FileHeader.DEFAULT_VERSION = _cphd.cvar.FileHeader_DEFAULT_VERSION

class Timeline(_object):
    """Proxy of C++ cphd::Timeline class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Timeline, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Timeline, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::Timeline self) -> Timeline"""
        this = _cphd.new_Timeline()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'Timeline') -> "bool":
        """__eq__(Timeline self, Timeline other) -> bool"""
        return _cphd.Timeline___eq__(self, other)


    def __ne__(self, other: 'Timeline') -> "bool":
        """__ne__(Timeline self, Timeline other) -> bool"""
        return _cphd.Timeline___ne__(self, other)

    __swig_setmethods__["collectionStart"] = _cphd.Timeline_collectionStart_set
    __swig_getmethods__["collectionStart"] = _cphd.Timeline_collectionStart_get
    if _newclass:
        collectionStart = _swig_property(_cphd.Timeline_collectionStart_get, _cphd.Timeline_collectionStart_set)
    __swig_setmethods__["rcvCollectionStart"] = _cphd.Timeline_rcvCollectionStart_set
    __swig_getmethods__["rcvCollectionStart"] = _cphd.Timeline_rcvCollectionStart_get
    if _newclass:
        rcvCollectionStart = _swig_property(_cphd.Timeline_rcvCollectionStart_get, _cphd.Timeline_rcvCollectionStart_set)
    __swig_setmethods__["txTime1"] = _cphd.Timeline_txTime1_set
    __swig_getmethods__["txTime1"] = _cphd.Timeline_txTime1_get
    if _newclass:
        txTime1 = _swig_property(_cphd.Timeline_txTime1_get, _cphd.Timeline_txTime1_set)
    __swig_setmethods__["txTime2"] = _cphd.Timeline_txTime2_set
    __swig_getmethods__["txTime2"] = _cphd.Timeline_txTime2_get
    if _newclass:
        txTime2 = _swig_property(_cphd.Timeline_txTime2_get, _cphd.Timeline_txTime2_set)
    __swig_destroy__ = _cphd.delete_Timeline
    __del__ = lambda self: None
Timeline_swigregister = _cphd.Timeline_swigregister
Timeline_swigregister(Timeline)

class FxBand(_object):
    """Proxy of C++ cphd::FxBand class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FxBand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FxBand, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::FxBand self) -> FxBand"""
        this = _cphd.new_FxBand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'FxBand') -> "bool":
        """__eq__(FxBand self, FxBand other) -> bool"""
        return _cphd.FxBand___eq__(self, other)


    def __ne__(self, other: 'FxBand') -> "bool":
        """__ne__(FxBand self, FxBand other) -> bool"""
        return _cphd.FxBand___ne__(self, other)

    __swig_setmethods__["fxMin"] = _cphd.FxBand_fxMin_set
    __swig_getmethods__["fxMin"] = _cphd.FxBand_fxMin_get
    if _newclass:
        fxMin = _swig_property(_cphd.FxBand_fxMin_get, _cphd.FxBand_fxMin_set)
    __swig_setmethods__["fxMax"] = _cphd.FxBand_fxMax_set
    __swig_getmethods__["fxMax"] = _cphd.FxBand_fxMax_get
    if _newclass:
        fxMax = _swig_property(_cphd.FxBand_fxMax_get, _cphd.FxBand_fxMax_set)
    __swig_destroy__ = _cphd.delete_FxBand
    __del__ = lambda self: None
FxBand_swigregister = _cphd.FxBand_swigregister
FxBand_swigregister(FxBand)

class TOASwath(_object):
    """Proxy of C++ cphd::TOASwath class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TOASwath, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TOASwath, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::TOASwath self) -> TOASwath"""
        this = _cphd.new_TOASwath()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'TOASwath') -> "bool":
        """__eq__(TOASwath self, TOASwath other) -> bool"""
        return _cphd.TOASwath___eq__(self, other)


    def __ne__(self, other: 'TOASwath') -> "bool":
        """__ne__(TOASwath self, TOASwath other) -> bool"""
        return _cphd.TOASwath___ne__(self, other)

    __swig_setmethods__["toaMin"] = _cphd.TOASwath_toaMin_set
    __swig_getmethods__["toaMin"] = _cphd.TOASwath_toaMin_get
    if _newclass:
        toaMin = _swig_property(_cphd.TOASwath_toaMin_get, _cphd.TOASwath_toaMin_set)
    __swig_setmethods__["toaMax"] = _cphd.TOASwath_toaMax_set
    __swig_getmethods__["toaMax"] = _cphd.TOASwath_toaMax_get
    if _newclass:
        toaMax = _swig_property(_cphd.TOASwath_toaMax_get, _cphd.TOASwath_toaMax_set)
    __swig_destroy__ = _cphd.delete_TOASwath
    __del__ = lambda self: None
TOASwath_swigregister = _cphd.TOASwath_swigregister
TOASwath_swigregister(TOASwath)

class TropoParameters(_object):
    """Proxy of C++ cphd::TropoParameters class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TropoParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TropoParameters, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::TropoParameters self) -> TropoParameters"""
        this = _cphd.new_TropoParameters()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'TropoParameters') -> "bool":
        """__eq__(TropoParameters self, TropoParameters other) -> bool"""
        return _cphd.TropoParameters___eq__(self, other)


    def __ne__(self, other: 'TropoParameters') -> "bool":
        """__ne__(TropoParameters self, TropoParameters other) -> bool"""
        return _cphd.TropoParameters___ne__(self, other)

    __swig_setmethods__["n0"] = _cphd.TropoParameters_n0_set
    __swig_getmethods__["n0"] = _cphd.TropoParameters_n0_get
    if _newclass:
        n0 = _swig_property(_cphd.TropoParameters_n0_get, _cphd.TropoParameters_n0_set)
    __swig_setmethods__["refHeight"] = _cphd.TropoParameters_refHeight_set
    __swig_getmethods__["refHeight"] = _cphd.TropoParameters_refHeight_get
    if _newclass:
        refHeight = _swig_property(_cphd.TropoParameters_refHeight_get, _cphd.TropoParameters_refHeight_set)
    __swig_destroy__ = _cphd.delete_TropoParameters
    __del__ = lambda self: None
TropoParameters_swigregister = _cphd.TropoParameters_swigregister
TropoParameters_swigregister(TropoParameters)

class IonoParameters(_object):
    """Proxy of C++ cphd::IonoParameters class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IonoParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IonoParameters, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::IonoParameters self) -> IonoParameters"""
        this = _cphd.new_IonoParameters()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'IonoParameters') -> "bool":
        """__eq__(IonoParameters self, IonoParameters other) -> bool"""
        return _cphd.IonoParameters___eq__(self, other)


    def __ne__(self, other: 'IonoParameters') -> "bool":
        """__ne__(IonoParameters self, IonoParameters other) -> bool"""
        return _cphd.IonoParameters___ne__(self, other)

    __swig_setmethods__["tecv"] = _cphd.IonoParameters_tecv_set
    __swig_getmethods__["tecv"] = _cphd.IonoParameters_tecv_get
    if _newclass:
        tecv = _swig_property(_cphd.IonoParameters_tecv_get, _cphd.IonoParameters_tecv_set)
    __swig_setmethods__["f2Height"] = _cphd.IonoParameters_f2Height_set
    __swig_getmethods__["f2Height"] = _cphd.IonoParameters_f2Height_get
    if _newclass:
        f2Height = _swig_property(_cphd.IonoParameters_f2Height_get, _cphd.IonoParameters_f2Height_set)
    __swig_destroy__ = _cphd.delete_IonoParameters
    __del__ = lambda self: None
IonoParameters_swigregister = _cphd.IonoParameters_swigregister
IonoParameters_swigregister(IonoParameters)

class Global(_object):
    """Proxy of C++ cphd::Global class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Global, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Global, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::Global self) -> Global"""
        this = _cphd.new_Global()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'Global') -> "bool":
        """__eq__(Global self, Global other) -> bool"""
        return _cphd.Global___eq__(self, other)


    def __ne__(self, other: 'Global') -> "bool":
        """__ne__(Global self, Global other) -> bool"""
        return _cphd.Global___ne__(self, other)


    def getDomainType(self) -> "cphd::DomainType":
        """getDomainType(Global self) -> DomainType"""
        return _cphd.Global_getDomainType(self)

    __swig_setmethods__["domainType"] = _cphd.Global_domainType_set
    __swig_getmethods__["domainType"] = _cphd.Global_domainType_get
    if _newclass:
        domainType = _swig_property(_cphd.Global_domainType_get, _cphd.Global_domainType_set)
    __swig_setmethods__["sgn"] = _cphd.Global_sgn_set
    __swig_getmethods__["sgn"] = _cphd.Global_sgn_get
    if _newclass:
        sgn = _swig_property(_cphd.Global_sgn_get, _cphd.Global_sgn_set)
    __swig_setmethods__["timeline"] = _cphd.Global_timeline_set
    __swig_getmethods__["timeline"] = _cphd.Global_timeline_get
    if _newclass:
        timeline = _swig_property(_cphd.Global_timeline_get, _cphd.Global_timeline_set)
    __swig_setmethods__["fxBand"] = _cphd.Global_fxBand_set
    __swig_getmethods__["fxBand"] = _cphd.Global_fxBand_get
    if _newclass:
        fxBand = _swig_property(_cphd.Global_fxBand_get, _cphd.Global_fxBand_set)
    __swig_setmethods__["toaSwath"] = _cphd.Global_toaSwath_set
    __swig_getmethods__["toaSwath"] = _cphd.Global_toaSwath_get
    if _newclass:
        toaSwath = _swig_property(_cphd.Global_toaSwath_get, _cphd.Global_toaSwath_set)
    __swig_setmethods__["tropoParameters"] = _cphd.Global_tropoParameters_set
    __swig_getmethods__["tropoParameters"] = _cphd.Global_tropoParameters_get
    if _newclass:
        tropoParameters = _swig_property(_cphd.Global_tropoParameters_get, _cphd.Global_tropoParameters_set)
    __swig_setmethods__["ionoParameters"] = _cphd.Global_ionoParameters_set
    __swig_getmethods__["ionoParameters"] = _cphd.Global_ionoParameters_get
    if _newclass:
        ionoParameters = _swig_property(_cphd.Global_ionoParameters_get, _cphd.Global_ionoParameters_set)
    __swig_destroy__ = _cphd.delete_Global
    __del__ = lambda self: None
Global_swigregister = _cphd.Global_swigregister
Global_swigregister(Global)

class IARP(_object):
    """Proxy of C++ cphd::IARP class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IARP, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IARP, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::IARP self) -> IARP"""
        this = _cphd.new_IARP()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'IARP') -> "bool":
        """__eq__(IARP self, IARP other) -> bool"""
        return _cphd.IARP___eq__(self, other)


    def __ne__(self, other: 'IARP') -> "bool":
        """__ne__(IARP self, IARP other) -> bool"""
        return _cphd.IARP___ne__(self, other)

    __swig_setmethods__["ecf"] = _cphd.IARP_ecf_set
    __swig_getmethods__["ecf"] = _cphd.IARP_ecf_get
    if _newclass:
        ecf = _swig_property(_cphd.IARP_ecf_get, _cphd.IARP_ecf_set)
    __swig_setmethods__["llh"] = _cphd.IARP_llh_set
    __swig_getmethods__["llh"] = _cphd.IARP_llh_get
    if _newclass:
        llh = _swig_property(_cphd.IARP_llh_get, _cphd.IARP_llh_set)
    __swig_destroy__ = _cphd.delete_IARP
    __del__ = lambda self: None
IARP_swigregister = _cphd.IARP_swigregister
IARP_swigregister(IARP)

class Planar(_object):
    """Proxy of C++ cphd::Planar class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Planar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Planar, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::Planar self) -> Planar"""
        this = _cphd.new_Planar()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'Planar') -> "bool":
        """__eq__(Planar self, Planar other) -> bool"""
        return _cphd.Planar___eq__(self, other)


    def __ne__(self, other: 'Planar') -> "bool":
        """__ne__(Planar self, Planar other) -> bool"""
        return _cphd.Planar___ne__(self, other)

    __swig_setmethods__["uIax"] = _cphd.Planar_uIax_set
    __swig_getmethods__["uIax"] = _cphd.Planar_uIax_get
    if _newclass:
        uIax = _swig_property(_cphd.Planar_uIax_get, _cphd.Planar_uIax_set)
    __swig_setmethods__["uIay"] = _cphd.Planar_uIay_set
    __swig_getmethods__["uIay"] = _cphd.Planar_uIay_get
    if _newclass:
        uIay = _swig_property(_cphd.Planar_uIay_get, _cphd.Planar_uIay_set)
    __swig_destroy__ = _cphd.delete_Planar
    __del__ = lambda self: None
Planar_swigregister = _cphd.Planar_swigregister
Planar_swigregister(Planar)

class HAE(_object):
    """Proxy of C++ cphd::HAE class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HAE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HAE, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::HAE self) -> HAE"""
        this = _cphd.new_HAE()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'HAE') -> "bool":
        """__eq__(HAE self, HAE other) -> bool"""
        return _cphd.HAE___eq__(self, other)


    def __ne__(self, other: 'HAE') -> "bool":
        """__ne__(HAE self, HAE other) -> bool"""
        return _cphd.HAE___ne__(self, other)

    __swig_setmethods__["uIax"] = _cphd.HAE_uIax_set
    __swig_getmethods__["uIax"] = _cphd.HAE_uIax_get
    if _newclass:
        uIax = _swig_property(_cphd.HAE_uIax_get, _cphd.HAE_uIax_set)
    __swig_setmethods__["uIay"] = _cphd.HAE_uIay_set
    __swig_getmethods__["uIay"] = _cphd.HAE_uIay_get
    if _newclass:
        uIay = _swig_property(_cphd.HAE_uIay_get, _cphd.HAE_uIay_set)
    __swig_destroy__ = _cphd.delete_HAE
    __del__ = lambda self: None
HAE_swigregister = _cphd.HAE_swigregister
HAE_swigregister(HAE)

class ReferenceSurface(_object):
    """Proxy of C++ cphd::ReferenceSurface class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReferenceSurface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReferenceSurface, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::ReferenceSurface self) -> ReferenceSurface"""
        this = _cphd.new_ReferenceSurface()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'ReferenceSurface') -> "bool":
        """__eq__(ReferenceSurface self, ReferenceSurface other) -> bool"""
        return _cphd.ReferenceSurface___eq__(self, other)


    def __ne__(self, other: 'ReferenceSurface') -> "bool":
        """__ne__(ReferenceSurface self, ReferenceSurface other) -> bool"""
        return _cphd.ReferenceSurface___ne__(self, other)

    __swig_setmethods__["planar"] = _cphd.ReferenceSurface_planar_set
    __swig_getmethods__["planar"] = _cphd.ReferenceSurface_planar_get
    if _newclass:
        planar = _swig_property(_cphd.ReferenceSurface_planar_get, _cphd.ReferenceSurface_planar_set)
    __swig_setmethods__["hae"] = _cphd.ReferenceSurface_hae_set
    __swig_getmethods__["hae"] = _cphd.ReferenceSurface_hae_get
    if _newclass:
        hae = _swig_property(_cphd.ReferenceSurface_hae_get, _cphd.ReferenceSurface_hae_set)
    __swig_destroy__ = _cphd.delete_ReferenceSurface
    __del__ = lambda self: None
ReferenceSurface_swigregister = _cphd.ReferenceSurface_swigregister
ReferenceSurface_swigregister(ReferenceSurface)

class AreaType(_object):
    """Proxy of C++ cphd::AreaType class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AreaType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AreaType, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::AreaType self) -> AreaType"""
        this = _cphd.new_AreaType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'AreaType') -> "bool":
        """__eq__(AreaType self, AreaType other) -> bool"""
        return _cphd.AreaType___eq__(self, other)


    def __ne__(self, other: 'AreaType') -> "bool":
        """__ne__(AreaType self, AreaType other) -> bool"""
        return _cphd.AreaType___ne__(self, other)

    __swig_setmethods__["x1y1"] = _cphd.AreaType_x1y1_set
    __swig_getmethods__["x1y1"] = _cphd.AreaType_x1y1_get
    if _newclass:
        x1y1 = _swig_property(_cphd.AreaType_x1y1_get, _cphd.AreaType_x1y1_set)
    __swig_setmethods__["x2y2"] = _cphd.AreaType_x2y2_set
    __swig_getmethods__["x2y2"] = _cphd.AreaType_x2y2_get
    if _newclass:
        x2y2 = _swig_property(_cphd.AreaType_x2y2_get, _cphd.AreaType_x2y2_set)
    __swig_setmethods__["polygon"] = _cphd.AreaType_polygon_set
    __swig_getmethods__["polygon"] = _cphd.AreaType_polygon_get
    if _newclass:
        polygon = _swig_property(_cphd.AreaType_polygon_get, _cphd.AreaType_polygon_set)
    __swig_destroy__ = _cphd.delete_AreaType
    __del__ = lambda self: None
AreaType_swigregister = _cphd.AreaType_swigregister
AreaType_swigregister(AreaType)

class LineSample(_object):
    """Proxy of C++ cphd::LineSample class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LineSample, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LineSample, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::LineSample self) -> LineSample"""
        this = _cphd.new_LineSample()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'LineSample') -> "bool":
        """__eq__(LineSample self, LineSample other) -> bool"""
        return _cphd.LineSample___eq__(self, other)


    def __ne__(self, other: 'LineSample') -> "bool":
        """__ne__(LineSample self, LineSample other) -> bool"""
        return _cphd.LineSample___ne__(self, other)


    def getIndex(self) -> "size_t":
        """getIndex(LineSample self) -> size_t"""
        return _cphd.LineSample_getIndex(self)


    def setIndex(self, idx: 'size_t') -> "void":
        """setIndex(LineSample self, size_t idx)"""
        return _cphd.LineSample_setIndex(self, idx)

    __swig_setmethods__["line"] = _cphd.LineSample_line_set
    __swig_getmethods__["line"] = _cphd.LineSample_line_get
    if _newclass:
        line = _swig_property(_cphd.LineSample_line_get, _cphd.LineSample_line_set)
    __swig_setmethods__["sample"] = _cphd.LineSample_sample_set
    __swig_getmethods__["sample"] = _cphd.LineSample_sample_get
    if _newclass:
        sample = _swig_property(_cphd.LineSample_sample_get, _cphd.LineSample_sample_set)
    __swig_destroy__ = _cphd.delete_LineSample
    __del__ = lambda self: None
LineSample_swigregister = _cphd.LineSample_swigregister
LineSample_swigregister(LineSample)

class ImageAreaXExtent(_object):
    """Proxy of C++ cphd::ImageAreaXExtent class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageAreaXExtent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageAreaXExtent, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::ImageAreaXExtent self) -> ImageAreaXExtent"""
        this = _cphd.new_ImageAreaXExtent()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'ImageAreaXExtent') -> "bool":
        """__eq__(ImageAreaXExtent self, ImageAreaXExtent other) -> bool"""
        return _cphd.ImageAreaXExtent___eq__(self, other)


    def __ne__(self, other: 'ImageAreaXExtent') -> "bool":
        """__ne__(ImageAreaXExtent self, ImageAreaXExtent other) -> bool"""
        return _cphd.ImageAreaXExtent___ne__(self, other)

    __swig_setmethods__["lineSpacing"] = _cphd.ImageAreaXExtent_lineSpacing_set
    __swig_getmethods__["lineSpacing"] = _cphd.ImageAreaXExtent_lineSpacing_get
    if _newclass:
        lineSpacing = _swig_property(_cphd.ImageAreaXExtent_lineSpacing_get, _cphd.ImageAreaXExtent_lineSpacing_set)
    __swig_setmethods__["firstLine"] = _cphd.ImageAreaXExtent_firstLine_set
    __swig_getmethods__["firstLine"] = _cphd.ImageAreaXExtent_firstLine_get
    if _newclass:
        firstLine = _swig_property(_cphd.ImageAreaXExtent_firstLine_get, _cphd.ImageAreaXExtent_firstLine_set)
    __swig_setmethods__["numLines"] = _cphd.ImageAreaXExtent_numLines_set
    __swig_getmethods__["numLines"] = _cphd.ImageAreaXExtent_numLines_get
    if _newclass:
        numLines = _swig_property(_cphd.ImageAreaXExtent_numLines_get, _cphd.ImageAreaXExtent_numLines_set)
    __swig_destroy__ = _cphd.delete_ImageAreaXExtent
    __del__ = lambda self: None
ImageAreaXExtent_swigregister = _cphd.ImageAreaXExtent_swigregister
ImageAreaXExtent_swigregister(ImageAreaXExtent)

class ImageAreaYExtent(_object):
    """Proxy of C++ cphd::ImageAreaYExtent class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageAreaYExtent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageAreaYExtent, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::ImageAreaYExtent self) -> ImageAreaYExtent"""
        this = _cphd.new_ImageAreaYExtent()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'ImageAreaYExtent') -> "bool":
        """__eq__(ImageAreaYExtent self, ImageAreaYExtent other) -> bool"""
        return _cphd.ImageAreaYExtent___eq__(self, other)


    def __ne__(self, other: 'ImageAreaYExtent') -> "bool":
        """__ne__(ImageAreaYExtent self, ImageAreaYExtent other) -> bool"""
        return _cphd.ImageAreaYExtent___ne__(self, other)

    __swig_setmethods__["sampleSpacing"] = _cphd.ImageAreaYExtent_sampleSpacing_set
    __swig_getmethods__["sampleSpacing"] = _cphd.ImageAreaYExtent_sampleSpacing_get
    if _newclass:
        sampleSpacing = _swig_property(_cphd.ImageAreaYExtent_sampleSpacing_get, _cphd.ImageAreaYExtent_sampleSpacing_set)
    __swig_setmethods__["firstSample"] = _cphd.ImageAreaYExtent_firstSample_set
    __swig_getmethods__["firstSample"] = _cphd.ImageAreaYExtent_firstSample_get
    if _newclass:
        firstSample = _swig_property(_cphd.ImageAreaYExtent_firstSample_get, _cphd.ImageAreaYExtent_firstSample_set)
    __swig_setmethods__["numSamples"] = _cphd.ImageAreaYExtent_numSamples_set
    __swig_getmethods__["numSamples"] = _cphd.ImageAreaYExtent_numSamples_get
    if _newclass:
        numSamples = _swig_property(_cphd.ImageAreaYExtent_numSamples_get, _cphd.ImageAreaYExtent_numSamples_set)
    __swig_destroy__ = _cphd.delete_ImageAreaYExtent
    __del__ = lambda self: None
ImageAreaYExtent_swigregister = _cphd.ImageAreaYExtent_swigregister
ImageAreaYExtent_swigregister(ImageAreaYExtent)

class Segment(_object):
    """Proxy of C++ cphd::Segment class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Segment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Segment, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::Segment self) -> Segment"""
        this = _cphd.new_Segment()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'Segment') -> "bool":
        """__eq__(Segment self, Segment other) -> bool"""
        return _cphd.Segment___eq__(self, other)


    def __ne__(self, other: 'Segment') -> "bool":
        """__ne__(Segment self, Segment other) -> bool"""
        return _cphd.Segment___ne__(self, other)

    __swig_setmethods__["startLine"] = _cphd.Segment_startLine_set
    __swig_getmethods__["startLine"] = _cphd.Segment_startLine_get
    if _newclass:
        startLine = _swig_property(_cphd.Segment_startLine_get, _cphd.Segment_startLine_set)
    __swig_setmethods__["startSample"] = _cphd.Segment_startSample_set
    __swig_getmethods__["startSample"] = _cphd.Segment_startSample_get
    if _newclass:
        startSample = _swig_property(_cphd.Segment_startSample_get, _cphd.Segment_startSample_set)
    __swig_setmethods__["endLine"] = _cphd.Segment_endLine_set
    __swig_getmethods__["endLine"] = _cphd.Segment_endLine_get
    if _newclass:
        endLine = _swig_property(_cphd.Segment_endLine_get, _cphd.Segment_endLine_set)
    __swig_setmethods__["endSample"] = _cphd.Segment_endSample_set
    __swig_getmethods__["endSample"] = _cphd.Segment_endSample_get
    if _newclass:
        endSample = _swig_property(_cphd.Segment_endSample_get, _cphd.Segment_endSample_set)
    __swig_setmethods__["identifier"] = _cphd.Segment_identifier_set
    __swig_getmethods__["identifier"] = _cphd.Segment_identifier_get
    if _newclass:
        identifier = _swig_property(_cphd.Segment_identifier_get, _cphd.Segment_identifier_set)
    __swig_setmethods__["polygon"] = _cphd.Segment_polygon_set
    __swig_getmethods__["polygon"] = _cphd.Segment_polygon_get
    if _newclass:
        polygon = _swig_property(_cphd.Segment_polygon_get, _cphd.Segment_polygon_set)
    __swig_destroy__ = _cphd.delete_Segment
    __del__ = lambda self: None
Segment_swigregister = _cphd.Segment_swigregister
Segment_swigregister(Segment)

class ImageGrid(_object):
    """Proxy of C++ cphd::ImageGrid class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageGrid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageGrid, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::ImageGrid self) -> ImageGrid"""
        this = _cphd.new_ImageGrid()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'ImageGrid') -> "bool":
        """__eq__(ImageGrid self, ImageGrid other) -> bool"""
        return _cphd.ImageGrid___eq__(self, other)


    def __ne__(self, other: 'ImageGrid') -> "bool":
        """__ne__(ImageGrid self, ImageGrid other) -> bool"""
        return _cphd.ImageGrid___ne__(self, other)

    __swig_setmethods__["identifier"] = _cphd.ImageGrid_identifier_set
    __swig_getmethods__["identifier"] = _cphd.ImageGrid_identifier_get
    if _newclass:
        identifier = _swig_property(_cphd.ImageGrid_identifier_get, _cphd.ImageGrid_identifier_set)
    __swig_setmethods__["iarpLocation"] = _cphd.ImageGrid_iarpLocation_set
    __swig_getmethods__["iarpLocation"] = _cphd.ImageGrid_iarpLocation_get
    if _newclass:
        iarpLocation = _swig_property(_cphd.ImageGrid_iarpLocation_get, _cphd.ImageGrid_iarpLocation_set)
    __swig_setmethods__["xExtent"] = _cphd.ImageGrid_xExtent_set
    __swig_getmethods__["xExtent"] = _cphd.ImageGrid_xExtent_get
    if _newclass:
        xExtent = _swig_property(_cphd.ImageGrid_xExtent_get, _cphd.ImageGrid_xExtent_set)
    __swig_setmethods__["yExtent"] = _cphd.ImageGrid_yExtent_set
    __swig_getmethods__["yExtent"] = _cphd.ImageGrid_yExtent_get
    if _newclass:
        yExtent = _swig_property(_cphd.ImageGrid_yExtent_get, _cphd.ImageGrid_yExtent_set)
    __swig_setmethods__["segments"] = _cphd.ImageGrid_segments_set
    __swig_getmethods__["segments"] = _cphd.ImageGrid_segments_get
    if _newclass:
        segments = _swig_property(_cphd.ImageGrid_segments_get, _cphd.ImageGrid_segments_set)
    __swig_destroy__ = _cphd.delete_ImageGrid
    __del__ = lambda self: None
ImageGrid_swigregister = _cphd.ImageGrid_swigregister
ImageGrid_swigregister(ImageGrid)

class SceneCoordinates(_object):
    """Proxy of C++ cphd::SceneCoordinates class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SceneCoordinates, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SceneCoordinates, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::SceneCoordinates self) -> SceneCoordinates"""
        this = _cphd.new_SceneCoordinates()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'SceneCoordinates') -> "bool":
        """__eq__(SceneCoordinates self, SceneCoordinates other) -> bool"""
        return _cphd.SceneCoordinates___eq__(self, other)


    def __ne__(self, other: 'SceneCoordinates') -> "bool":
        """__ne__(SceneCoordinates self, SceneCoordinates other) -> bool"""
        return _cphd.SceneCoordinates___ne__(self, other)

    __swig_setmethods__["earthModel"] = _cphd.SceneCoordinates_earthModel_set
    __swig_getmethods__["earthModel"] = _cphd.SceneCoordinates_earthModel_get
    if _newclass:
        earthModel = _swig_property(_cphd.SceneCoordinates_earthModel_get, _cphd.SceneCoordinates_earthModel_set)
    __swig_setmethods__["iarp"] = _cphd.SceneCoordinates_iarp_set
    __swig_getmethods__["iarp"] = _cphd.SceneCoordinates_iarp_get
    if _newclass:
        iarp = _swig_property(_cphd.SceneCoordinates_iarp_get, _cphd.SceneCoordinates_iarp_set)
    __swig_setmethods__["referenceSurface"] = _cphd.SceneCoordinates_referenceSurface_set
    __swig_getmethods__["referenceSurface"] = _cphd.SceneCoordinates_referenceSurface_get
    if _newclass:
        referenceSurface = _swig_property(_cphd.SceneCoordinates_referenceSurface_get, _cphd.SceneCoordinates_referenceSurface_set)
    __swig_setmethods__["imageArea"] = _cphd.SceneCoordinates_imageArea_set
    __swig_getmethods__["imageArea"] = _cphd.SceneCoordinates_imageArea_get
    if _newclass:
        imageArea = _swig_property(_cphd.SceneCoordinates_imageArea_get, _cphd.SceneCoordinates_imageArea_set)
    __swig_setmethods__["imageAreaCorners"] = _cphd.SceneCoordinates_imageAreaCorners_set
    __swig_getmethods__["imageAreaCorners"] = _cphd.SceneCoordinates_imageAreaCorners_get
    if _newclass:
        imageAreaCorners = _swig_property(_cphd.SceneCoordinates_imageAreaCorners_get, _cphd.SceneCoordinates_imageAreaCorners_set)
    __swig_setmethods__["extendedArea"] = _cphd.SceneCoordinates_extendedArea_set
    __swig_getmethods__["extendedArea"] = _cphd.SceneCoordinates_extendedArea_get
    if _newclass:
        extendedArea = _swig_property(_cphd.SceneCoordinates_extendedArea_get, _cphd.SceneCoordinates_extendedArea_set)
    __swig_setmethods__["imageGrid"] = _cphd.SceneCoordinates_imageGrid_set
    __swig_getmethods__["imageGrid"] = _cphd.SceneCoordinates_imageGrid_get
    if _newclass:
        imageGrid = _swig_property(_cphd.SceneCoordinates_imageGrid_get, _cphd.SceneCoordinates_imageGrid_set)
    __swig_destroy__ = _cphd.delete_SceneCoordinates
    __del__ = lambda self: None
SceneCoordinates_swigregister = _cphd.SceneCoordinates_swigregister
SceneCoordinates_swigregister(SceneCoordinates)

class SRP(_object):
    """Proxy of C++ cphd::SRP class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SRP, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SRP, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::SRP self) -> SRP"""
        this = _cphd.new_SRP()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'SRP') -> "bool":
        """__eq__(SRP self, SRP other) -> bool"""
        return _cphd.SRP___eq__(self, other)


    def __ne__(self, other: 'SRP') -> "bool":
        """__ne__(SRP self, SRP other) -> bool"""
        return _cphd.SRP___ne__(self, other)

    __swig_setmethods__["ecf"] = _cphd.SRP_ecf_set
    __swig_getmethods__["ecf"] = _cphd.SRP_ecf_get
    if _newclass:
        ecf = _swig_property(_cphd.SRP_ecf_get, _cphd.SRP_ecf_set)
    __swig_setmethods__["iac"] = _cphd.SRP_iac_set
    __swig_getmethods__["iac"] = _cphd.SRP_iac_get
    if _newclass:
        iac = _swig_property(_cphd.SRP_iac_get, _cphd.SRP_iac_set)
    __swig_destroy__ = _cphd.delete_SRP
    __del__ = lambda self: None
SRP_swigregister = _cphd.SRP_swigregister
SRP_swigregister(SRP)

class ImagingType(_object):
    """Proxy of C++ cphd::ImagingType class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImagingType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImagingType, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::ImagingType self) -> ImagingType"""
        this = _cphd.new_ImagingType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'ImagingType') -> "bool":
        """__eq__(ImagingType self, ImagingType other) -> bool"""
        return _cphd.ImagingType___eq__(self, other)


    def __ne__(self, other: 'ImagingType') -> "bool":
        """__ne__(ImagingType self, ImagingType other) -> bool"""
        return _cphd.ImagingType___ne__(self, other)

    __swig_destroy__ = _cphd.delete_ImagingType
    __del__ = lambda self: None
    __swig_setmethods__["azimuthAngle"] = _cphd.ImagingType_azimuthAngle_set
    __swig_getmethods__["azimuthAngle"] = _cphd.ImagingType_azimuthAngle_get
    if _newclass:
        azimuthAngle = _swig_property(_cphd.ImagingType_azimuthAngle_get, _cphd.ImagingType_azimuthAngle_set)
    __swig_setmethods__["grazeAngle"] = _cphd.ImagingType_grazeAngle_set
    __swig_getmethods__["grazeAngle"] = _cphd.ImagingType_grazeAngle_get
    if _newclass:
        grazeAngle = _swig_property(_cphd.ImagingType_grazeAngle_get, _cphd.ImagingType_grazeAngle_set)
    __swig_setmethods__["twistAngle"] = _cphd.ImagingType_twistAngle_set
    __swig_getmethods__["twistAngle"] = _cphd.ImagingType_twistAngle_get
    if _newclass:
        twistAngle = _swig_property(_cphd.ImagingType_twistAngle_get, _cphd.ImagingType_twistAngle_set)
    __swig_setmethods__["slopeAngle"] = _cphd.ImagingType_slopeAngle_set
    __swig_getmethods__["slopeAngle"] = _cphd.ImagingType_slopeAngle_get
    if _newclass:
        slopeAngle = _swig_property(_cphd.ImagingType_slopeAngle_get, _cphd.ImagingType_slopeAngle_set)
    __swig_setmethods__["layoverAngle"] = _cphd.ImagingType_layoverAngle_set
    __swig_getmethods__["layoverAngle"] = _cphd.ImagingType_layoverAngle_get
    if _newclass:
        layoverAngle = _swig_property(_cphd.ImagingType_layoverAngle_get, _cphd.ImagingType_layoverAngle_set)
ImagingType_swigregister = _cphd.ImagingType_swigregister
ImagingType_swigregister(ImagingType)

class Monostatic(ImagingType):
    """Proxy of C++ cphd::Monostatic class."""

    __swig_setmethods__ = {}
    for _s in [ImagingType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Monostatic, name, value)
    __swig_getmethods__ = {}
    for _s in [ImagingType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Monostatic, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::Monostatic self) -> Monostatic"""
        this = _cphd.new_Monostatic()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'Monostatic') -> "bool":
        """__eq__(Monostatic self, Monostatic other) -> bool"""
        return _cphd.Monostatic___eq__(self, other)


    def __ne__(self, other: 'Monostatic') -> "bool":
        """__ne__(Monostatic self, Monostatic other) -> bool"""
        return _cphd.Monostatic___ne__(self, other)

    __swig_setmethods__["sideOfTrack"] = _cphd.Monostatic_sideOfTrack_set
    __swig_getmethods__["sideOfTrack"] = _cphd.Monostatic_sideOfTrack_get
    if _newclass:
        sideOfTrack = _swig_property(_cphd.Monostatic_sideOfTrack_get, _cphd.Monostatic_sideOfTrack_set)
    __swig_setmethods__["slantRange"] = _cphd.Monostatic_slantRange_set
    __swig_getmethods__["slantRange"] = _cphd.Monostatic_slantRange_get
    if _newclass:
        slantRange = _swig_property(_cphd.Monostatic_slantRange_get, _cphd.Monostatic_slantRange_set)
    __swig_setmethods__["groundRange"] = _cphd.Monostatic_groundRange_set
    __swig_getmethods__["groundRange"] = _cphd.Monostatic_groundRange_get
    if _newclass:
        groundRange = _swig_property(_cphd.Monostatic_groundRange_get, _cphd.Monostatic_groundRange_set)
    __swig_setmethods__["dopplerConeAngle"] = _cphd.Monostatic_dopplerConeAngle_set
    __swig_getmethods__["dopplerConeAngle"] = _cphd.Monostatic_dopplerConeAngle_get
    if _newclass:
        dopplerConeAngle = _swig_property(_cphd.Monostatic_dopplerConeAngle_get, _cphd.Monostatic_dopplerConeAngle_set)
    __swig_setmethods__["incidenceAngle"] = _cphd.Monostatic_incidenceAngle_set
    __swig_getmethods__["incidenceAngle"] = _cphd.Monostatic_incidenceAngle_get
    if _newclass:
        incidenceAngle = _swig_property(_cphd.Monostatic_incidenceAngle_get, _cphd.Monostatic_incidenceAngle_set)
    __swig_setmethods__["arpPos"] = _cphd.Monostatic_arpPos_set
    __swig_getmethods__["arpPos"] = _cphd.Monostatic_arpPos_get
    if _newclass:
        arpPos = _swig_property(_cphd.Monostatic_arpPos_get, _cphd.Monostatic_arpPos_set)
    __swig_setmethods__["arpVel"] = _cphd.Monostatic_arpVel_set
    __swig_getmethods__["arpVel"] = _cphd.Monostatic_arpVel_get
    if _newclass:
        arpVel = _swig_property(_cphd.Monostatic_arpVel_get, _cphd.Monostatic_arpVel_set)
    __swig_destroy__ = _cphd.delete_Monostatic
    __del__ = lambda self: None
Monostatic_swigregister = _cphd.Monostatic_swigregister
Monostatic_swigregister(Monostatic)

class Bistatic(ImagingType):
    """Proxy of C++ cphd::Bistatic class."""

    __swig_setmethods__ = {}
    for _s in [ImagingType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bistatic, name, value)
    __swig_getmethods__ = {}
    for _s in [ImagingType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Bistatic, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::Bistatic self) -> Bistatic"""
        this = _cphd.new_Bistatic()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'Bistatic') -> "bool":
        """__eq__(Bistatic self, Bistatic other) -> bool"""
        return _cphd.Bistatic___eq__(self, other)


    def __ne__(self, other: 'Bistatic') -> "bool":
        """__ne__(Bistatic self, Bistatic other) -> bool"""
        return _cphd.Bistatic___ne__(self, other)

    __swig_setmethods__["azimuthAngleRate"] = _cphd.Bistatic_azimuthAngleRate_set
    __swig_getmethods__["azimuthAngleRate"] = _cphd.Bistatic_azimuthAngleRate_get
    if _newclass:
        azimuthAngleRate = _swig_property(_cphd.Bistatic_azimuthAngleRate_get, _cphd.Bistatic_azimuthAngleRate_set)
    __swig_setmethods__["bistaticAngle"] = _cphd.Bistatic_bistaticAngle_set
    __swig_getmethods__["bistaticAngle"] = _cphd.Bistatic_bistaticAngle_get
    if _newclass:
        bistaticAngle = _swig_property(_cphd.Bistatic_bistaticAngle_get, _cphd.Bistatic_bistaticAngle_set)
    __swig_setmethods__["bistaticAngleRate"] = _cphd.Bistatic_bistaticAngleRate_set
    __swig_getmethods__["bistaticAngleRate"] = _cphd.Bistatic_bistaticAngleRate_get
    if _newclass:
        bistaticAngleRate = _swig_property(_cphd.Bistatic_bistaticAngleRate_get, _cphd.Bistatic_bistaticAngleRate_set)
    __swig_setmethods__["txPlatform"] = _cphd.Bistatic_txPlatform_set
    __swig_getmethods__["txPlatform"] = _cphd.Bistatic_txPlatform_get
    if _newclass:
        txPlatform = _swig_property(_cphd.Bistatic_txPlatform_get, _cphd.Bistatic_txPlatform_set)
    __swig_setmethods__["rcvPlatform"] = _cphd.Bistatic_rcvPlatform_set
    __swig_getmethods__["rcvPlatform"] = _cphd.Bistatic_rcvPlatform_get
    if _newclass:
        rcvPlatform = _swig_property(_cphd.Bistatic_rcvPlatform_get, _cphd.Bistatic_rcvPlatform_set)
    __swig_destroy__ = _cphd.delete_Bistatic
    __del__ = lambda self: None
Bistatic_swigregister = _cphd.Bistatic_swigregister
Bistatic_swigregister(Bistatic)

class PlatformParams(_object):
    """Proxy of C++ cphd::Bistatic::PlatformParams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlatformParams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PlatformParams, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::Bistatic::PlatformParams self) -> PlatformParams"""
        this = _cphd.new_PlatformParams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'PlatformParams') -> "bool":
        """__eq__(PlatformParams self, PlatformParams other) -> bool"""
        return _cphd.PlatformParams___eq__(self, other)


    def __ne__(self, other: 'PlatformParams') -> "bool":
        """__ne__(PlatformParams self, PlatformParams other) -> bool"""
        return _cphd.PlatformParams___ne__(self, other)

    __swig_setmethods__["sideOfTrack"] = _cphd.PlatformParams_sideOfTrack_set
    __swig_getmethods__["sideOfTrack"] = _cphd.PlatformParams_sideOfTrack_get
    if _newclass:
        sideOfTrack = _swig_property(_cphd.PlatformParams_sideOfTrack_get, _cphd.PlatformParams_sideOfTrack_set)
    __swig_setmethods__["time"] = _cphd.PlatformParams_time_set
    __swig_getmethods__["time"] = _cphd.PlatformParams_time_get
    if _newclass:
        time = _swig_property(_cphd.PlatformParams_time_get, _cphd.PlatformParams_time_set)
    __swig_setmethods__["azimuthAngle"] = _cphd.PlatformParams_azimuthAngle_set
    __swig_getmethods__["azimuthAngle"] = _cphd.PlatformParams_azimuthAngle_get
    if _newclass:
        azimuthAngle = _swig_property(_cphd.PlatformParams_azimuthAngle_get, _cphd.PlatformParams_azimuthAngle_set)
    __swig_setmethods__["grazeAngle"] = _cphd.PlatformParams_grazeAngle_set
    __swig_getmethods__["grazeAngle"] = _cphd.PlatformParams_grazeAngle_get
    if _newclass:
        grazeAngle = _swig_property(_cphd.PlatformParams_grazeAngle_get, _cphd.PlatformParams_grazeAngle_set)
    __swig_setmethods__["incidenceAngle"] = _cphd.PlatformParams_incidenceAngle_set
    __swig_getmethods__["incidenceAngle"] = _cphd.PlatformParams_incidenceAngle_get
    if _newclass:
        incidenceAngle = _swig_property(_cphd.PlatformParams_incidenceAngle_get, _cphd.PlatformParams_incidenceAngle_set)
    __swig_setmethods__["dopplerConeAngle"] = _cphd.PlatformParams_dopplerConeAngle_set
    __swig_getmethods__["dopplerConeAngle"] = _cphd.PlatformParams_dopplerConeAngle_get
    if _newclass:
        dopplerConeAngle = _swig_property(_cphd.PlatformParams_dopplerConeAngle_get, _cphd.PlatformParams_dopplerConeAngle_set)
    __swig_setmethods__["groundRange"] = _cphd.PlatformParams_groundRange_set
    __swig_getmethods__["groundRange"] = _cphd.PlatformParams_groundRange_get
    if _newclass:
        groundRange = _swig_property(_cphd.PlatformParams_groundRange_get, _cphd.PlatformParams_groundRange_set)
    __swig_setmethods__["slantRange"] = _cphd.PlatformParams_slantRange_set
    __swig_getmethods__["slantRange"] = _cphd.PlatformParams_slantRange_get
    if _newclass:
        slantRange = _swig_property(_cphd.PlatformParams_slantRange_get, _cphd.PlatformParams_slantRange_set)
    __swig_setmethods__["pos"] = _cphd.PlatformParams_pos_set
    __swig_getmethods__["pos"] = _cphd.PlatformParams_pos_get
    if _newclass:
        pos = _swig_property(_cphd.PlatformParams_pos_get, _cphd.PlatformParams_pos_set)
    __swig_setmethods__["vel"] = _cphd.PlatformParams_vel_set
    __swig_getmethods__["vel"] = _cphd.PlatformParams_vel_get
    if _newclass:
        vel = _swig_property(_cphd.PlatformParams_vel_get, _cphd.PlatformParams_vel_set)
    __swig_destroy__ = _cphd.delete_PlatformParams
    __del__ = lambda self: None
PlatformParams_swigregister = _cphd.PlatformParams_swigregister
PlatformParams_swigregister(PlatformParams)

class ReferenceGeometry(_object):
    """Proxy of C++ cphd::ReferenceGeometry class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReferenceGeometry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReferenceGeometry, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::ReferenceGeometry self) -> ReferenceGeometry"""
        this = _cphd.new_ReferenceGeometry()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'ReferenceGeometry') -> "bool":
        """__eq__(ReferenceGeometry self, ReferenceGeometry other) -> bool"""
        return _cphd.ReferenceGeometry___eq__(self, other)


    def __ne__(self, other: 'ReferenceGeometry') -> "bool":
        """__ne__(ReferenceGeometry self, ReferenceGeometry other) -> bool"""
        return _cphd.ReferenceGeometry___ne__(self, other)

    __swig_setmethods__["referenceTime"] = _cphd.ReferenceGeometry_referenceTime_set
    __swig_getmethods__["referenceTime"] = _cphd.ReferenceGeometry_referenceTime_get
    if _newclass:
        referenceTime = _swig_property(_cphd.ReferenceGeometry_referenceTime_get, _cphd.ReferenceGeometry_referenceTime_set)
    __swig_setmethods__["srpCODTime"] = _cphd.ReferenceGeometry_srpCODTime_set
    __swig_getmethods__["srpCODTime"] = _cphd.ReferenceGeometry_srpCODTime_get
    if _newclass:
        srpCODTime = _swig_property(_cphd.ReferenceGeometry_srpCODTime_get, _cphd.ReferenceGeometry_srpCODTime_set)
    __swig_setmethods__["srpDwellTime"] = _cphd.ReferenceGeometry_srpDwellTime_set
    __swig_getmethods__["srpDwellTime"] = _cphd.ReferenceGeometry_srpDwellTime_get
    if _newclass:
        srpDwellTime = _swig_property(_cphd.ReferenceGeometry_srpDwellTime_get, _cphd.ReferenceGeometry_srpDwellTime_set)
    __swig_setmethods__["srp"] = _cphd.ReferenceGeometry_srp_set
    __swig_getmethods__["srp"] = _cphd.ReferenceGeometry_srp_get
    if _newclass:
        srp = _swig_property(_cphd.ReferenceGeometry_srp_get, _cphd.ReferenceGeometry_srp_set)
    __swig_setmethods__["monostatic"] = _cphd.ReferenceGeometry_monostatic_set
    __swig_getmethods__["monostatic"] = _cphd.ReferenceGeometry_monostatic_get
    if _newclass:
        monostatic = _swig_property(_cphd.ReferenceGeometry_monostatic_get, _cphd.ReferenceGeometry_monostatic_set)
    __swig_setmethods__["bistatic"] = _cphd.ReferenceGeometry_bistatic_set
    __swig_getmethods__["bistatic"] = _cphd.ReferenceGeometry_bistatic_get
    if _newclass:
        bistatic = _swig_property(_cphd.ReferenceGeometry_bistatic_get, _cphd.ReferenceGeometry_bistatic_set)
    __swig_destroy__ = _cphd.delete_ReferenceGeometry
    __del__ = lambda self: None
ReferenceGeometry_swigregister = _cphd.ReferenceGeometry_swigregister
ReferenceGeometry_swigregister(ReferenceGeometry)

class SupportArrayParameter(_object):
    """Proxy of C++ cphd::SupportArrayParameter class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SupportArrayParameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SupportArrayParameter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(cphd::SupportArrayParameter self) -> SupportArrayParameter
        __init__(cphd::SupportArrayParameter self, std::string const & format, size_t id, double x0_in, double y0_in, double xSS_in, double ySS_in) -> SupportArrayParameter
        """
        this = _cphd.new_SupportArrayParameter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'SupportArrayParameter') -> "bool":
        """__eq__(SupportArrayParameter self, SupportArrayParameter other) -> bool"""
        return _cphd.SupportArrayParameter___eq__(self, other)


    def __ne__(self, other: 'SupportArrayParameter') -> "bool":
        """__ne__(SupportArrayParameter self, SupportArrayParameter other) -> bool"""
        return _cphd.SupportArrayParameter___ne__(self, other)


    def setIdentifier(self, identifierIn: 'size_t') -> "void":
        """setIdentifier(SupportArrayParameter self, size_t identifierIn)"""
        return _cphd.SupportArrayParameter_setIdentifier(self, identifierIn)


    def getIdentifier(self) -> "size_t":
        """getIdentifier(SupportArrayParameter self) -> size_t"""
        return _cphd.SupportArrayParameter_getIdentifier(self)

    __swig_setmethods__["elementFormat"] = _cphd.SupportArrayParameter_elementFormat_set
    __swig_getmethods__["elementFormat"] = _cphd.SupportArrayParameter_elementFormat_get
    if _newclass:
        elementFormat = _swig_property(_cphd.SupportArrayParameter_elementFormat_get, _cphd.SupportArrayParameter_elementFormat_set)
    __swig_setmethods__["x0"] = _cphd.SupportArrayParameter_x0_set
    __swig_getmethods__["x0"] = _cphd.SupportArrayParameter_x0_get
    if _newclass:
        x0 = _swig_property(_cphd.SupportArrayParameter_x0_get, _cphd.SupportArrayParameter_x0_set)
    __swig_setmethods__["y0"] = _cphd.SupportArrayParameter_y0_set
    __swig_getmethods__["y0"] = _cphd.SupportArrayParameter_y0_get
    if _newclass:
        y0 = _swig_property(_cphd.SupportArrayParameter_y0_get, _cphd.SupportArrayParameter_y0_set)
    __swig_setmethods__["xSS"] = _cphd.SupportArrayParameter_xSS_set
    __swig_getmethods__["xSS"] = _cphd.SupportArrayParameter_xSS_get
    if _newclass:
        xSS = _swig_property(_cphd.SupportArrayParameter_xSS_get, _cphd.SupportArrayParameter_xSS_set)
    __swig_setmethods__["ySS"] = _cphd.SupportArrayParameter_ySS_set
    __swig_getmethods__["ySS"] = _cphd.SupportArrayParameter_ySS_get
    if _newclass:
        ySS = _swig_property(_cphd.SupportArrayParameter_ySS_get, _cphd.SupportArrayParameter_ySS_set)
    __swig_destroy__ = _cphd.delete_SupportArrayParameter
    __del__ = lambda self: None
SupportArrayParameter_swigregister = _cphd.SupportArrayParameter_swigregister
SupportArrayParameter_swigregister(SupportArrayParameter)

class AdditionalSupportArray(SupportArrayParameter):
    """Proxy of C++ cphd::AdditionalSupportArray class."""

    __swig_setmethods__ = {}
    for _s in [SupportArrayParameter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdditionalSupportArray, name, value)
    __swig_getmethods__ = {}
    for _s in [SupportArrayParameter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AdditionalSupportArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(cphd::AdditionalSupportArray self) -> AdditionalSupportArray
        __init__(cphd::AdditionalSupportArray self, std::string const & format, std::string const & id, double x0_in, double y0_in, double xSS_in, double ySS_in, std::string const & xUnits_in, std::string const & yUnits_in, std::string const & zUnits_in) -> AdditionalSupportArray
        """
        this = _cphd.new_AdditionalSupportArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'AdditionalSupportArray') -> "bool":
        """__eq__(AdditionalSupportArray self, AdditionalSupportArray other) -> bool"""
        return _cphd.AdditionalSupportArray___eq__(self, other)


    def __ne__(self, other: 'AdditionalSupportArray') -> "bool":
        """__ne__(AdditionalSupportArray self, AdditionalSupportArray other) -> bool"""
        return _cphd.AdditionalSupportArray___ne__(self, other)

    __swig_setmethods__["identifier"] = _cphd.AdditionalSupportArray_identifier_set
    __swig_getmethods__["identifier"] = _cphd.AdditionalSupportArray_identifier_get
    if _newclass:
        identifier = _swig_property(_cphd.AdditionalSupportArray_identifier_get, _cphd.AdditionalSupportArray_identifier_set)
    __swig_setmethods__["xUnits"] = _cphd.AdditionalSupportArray_xUnits_set
    __swig_getmethods__["xUnits"] = _cphd.AdditionalSupportArray_xUnits_get
    if _newclass:
        xUnits = _swig_property(_cphd.AdditionalSupportArray_xUnits_get, _cphd.AdditionalSupportArray_xUnits_set)
    __swig_setmethods__["yUnits"] = _cphd.AdditionalSupportArray_yUnits_set
    __swig_getmethods__["yUnits"] = _cphd.AdditionalSupportArray_yUnits_get
    if _newclass:
        yUnits = _swig_property(_cphd.AdditionalSupportArray_yUnits_get, _cphd.AdditionalSupportArray_yUnits_set)
    __swig_setmethods__["zUnits"] = _cphd.AdditionalSupportArray_zUnits_set
    __swig_getmethods__["zUnits"] = _cphd.AdditionalSupportArray_zUnits_get
    if _newclass:
        zUnits = _swig_property(_cphd.AdditionalSupportArray_zUnits_get, _cphd.AdditionalSupportArray_zUnits_set)
    __swig_setmethods__["parameter"] = _cphd.AdditionalSupportArray_parameter_set
    __swig_getmethods__["parameter"] = _cphd.AdditionalSupportArray_parameter_get
    if _newclass:
        parameter = _swig_property(_cphd.AdditionalSupportArray_parameter_get, _cphd.AdditionalSupportArray_parameter_set)
    __swig_destroy__ = _cphd.delete_AdditionalSupportArray
    __del__ = lambda self: None
AdditionalSupportArray_swigregister = _cphd.AdditionalSupportArray_swigregister
AdditionalSupportArray_swigregister(AdditionalSupportArray)

class SupportArray(_object):
    """Proxy of C++ cphd::SupportArray class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SupportArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SupportArray, name)
    __repr__ = _swig_repr

    def __eq__(self, other: 'SupportArray') -> "bool":
        """__eq__(SupportArray self, SupportArray other) -> bool"""
        return _cphd.SupportArray___eq__(self, other)


    def __ne__(self, other: 'SupportArray') -> "bool":
        """__ne__(SupportArray self, SupportArray other) -> bool"""
        return _cphd.SupportArray___ne__(self, other)


    def getIAZSupportArray(self, key: 'std::string const &') -> "cphd::SupportArrayParameter":
        """getIAZSupportArray(SupportArray self, std::string const & key) -> SupportArrayParameter"""
        return _cphd.SupportArray_getIAZSupportArray(self, key)


    def getAGPSupportArray(self, key: 'std::string const &') -> "cphd::SupportArrayParameter":
        """getAGPSupportArray(SupportArray self, std::string const & key) -> SupportArrayParameter"""
        return _cphd.SupportArray_getAGPSupportArray(self, key)


    def getAddedSupportArray(self, key: 'std::string const &') -> "cphd::AdditionalSupportArray":
        """getAddedSupportArray(SupportArray self, std::string const & key) -> AdditionalSupportArray"""
        return _cphd.SupportArray_getAddedSupportArray(self, key)

    __swig_setmethods__["iazArray"] = _cphd.SupportArray_iazArray_set
    __swig_getmethods__["iazArray"] = _cphd.SupportArray_iazArray_get
    if _newclass:
        iazArray = _swig_property(_cphd.SupportArray_iazArray_get, _cphd.SupportArray_iazArray_set)
    __swig_setmethods__["antGainPhase"] = _cphd.SupportArray_antGainPhase_set
    __swig_getmethods__["antGainPhase"] = _cphd.SupportArray_antGainPhase_get
    if _newclass:
        antGainPhase = _swig_property(_cphd.SupportArray_antGainPhase_get, _cphd.SupportArray_antGainPhase_set)
    __swig_setmethods__["addedSupportArray"] = _cphd.SupportArray_addedSupportArray_set
    __swig_getmethods__["addedSupportArray"] = _cphd.SupportArray_addedSupportArray_get
    if _newclass:
        addedSupportArray = _swig_property(_cphd.SupportArray_addedSupportArray_get, _cphd.SupportArray_addedSupportArray_set)

    def __init__(self):
        """__init__(cphd::SupportArray self) -> SupportArray"""
        this = _cphd.new_SupportArray()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cphd.delete_SupportArray
    __del__ = lambda self: None
SupportArray_swigregister = _cphd.SupportArray_swigregister
SupportArray_swigregister(SupportArray)

class ErrorParameters(_object):
    """Proxy of C++ cphd::ErrorParameters class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ErrorParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ErrorParameters, name)
    __repr__ = _swig_repr

    def __eq__(self, other: 'ErrorParameters') -> "bool":
        """__eq__(ErrorParameters self, ErrorParameters other) -> bool"""
        return _cphd.ErrorParameters___eq__(self, other)


    def __ne__(self, other: 'ErrorParameters') -> "bool":
        """__ne__(ErrorParameters self, ErrorParameters other) -> bool"""
        return _cphd.ErrorParameters___ne__(self, other)

    __swig_setmethods__["monostatic"] = _cphd.ErrorParameters_monostatic_set
    __swig_getmethods__["monostatic"] = _cphd.ErrorParameters_monostatic_get
    if _newclass:
        monostatic = _swig_property(_cphd.ErrorParameters_monostatic_get, _cphd.ErrorParameters_monostatic_set)
    __swig_setmethods__["bistatic"] = _cphd.ErrorParameters_bistatic_set
    __swig_getmethods__["bistatic"] = _cphd.ErrorParameters_bistatic_get
    if _newclass:
        bistatic = _swig_property(_cphd.ErrorParameters_bistatic_get, _cphd.ErrorParameters_bistatic_set)

    def __init__(self):
        """__init__(cphd::ErrorParameters self) -> ErrorParameters"""
        this = _cphd.new_ErrorParameters()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cphd.delete_ErrorParameters
    __del__ = lambda self: None
ErrorParameters_swigregister = _cphd.ErrorParameters_swigregister
ErrorParameters_swigregister(ErrorParameters)

class ErrorMonostatic(_object):
    """Proxy of C++ cphd::ErrorParameters::Monostatic class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ErrorMonostatic, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ErrorMonostatic, name)
    __repr__ = _swig_repr

    def __eq__(self, other: 'ErrorMonostatic') -> "bool":
        """__eq__(ErrorMonostatic self, ErrorMonostatic other) -> bool"""
        return _cphd.ErrorMonostatic___eq__(self, other)


    def __ne__(self, other: 'ErrorMonostatic') -> "bool":
        """__ne__(ErrorMonostatic self, ErrorMonostatic other) -> bool"""
        return _cphd.ErrorMonostatic___ne__(self, other)

    __swig_setmethods__["posVelErr"] = _cphd.ErrorMonostatic_posVelErr_set
    __swig_getmethods__["posVelErr"] = _cphd.ErrorMonostatic_posVelErr_get
    if _newclass:
        posVelErr = _swig_property(_cphd.ErrorMonostatic_posVelErr_get, _cphd.ErrorMonostatic_posVelErr_set)
    __swig_setmethods__["radarSensor"] = _cphd.ErrorMonostatic_radarSensor_set
    __swig_getmethods__["radarSensor"] = _cphd.ErrorMonostatic_radarSensor_get
    if _newclass:
        radarSensor = _swig_property(_cphd.ErrorMonostatic_radarSensor_get, _cphd.ErrorMonostatic_radarSensor_set)
    __swig_setmethods__["tropoError"] = _cphd.ErrorMonostatic_tropoError_set
    __swig_getmethods__["tropoError"] = _cphd.ErrorMonostatic_tropoError_get
    if _newclass:
        tropoError = _swig_property(_cphd.ErrorMonostatic_tropoError_get, _cphd.ErrorMonostatic_tropoError_set)
    __swig_setmethods__["ionoError"] = _cphd.ErrorMonostatic_ionoError_set
    __swig_getmethods__["ionoError"] = _cphd.ErrorMonostatic_ionoError_get
    if _newclass:
        ionoError = _swig_property(_cphd.ErrorMonostatic_ionoError_get, _cphd.ErrorMonostatic_ionoError_set)
    __swig_setmethods__["parameter"] = _cphd.ErrorMonostatic_parameter_set
    __swig_getmethods__["parameter"] = _cphd.ErrorMonostatic_parameter_get
    if _newclass:
        parameter = _swig_property(_cphd.ErrorMonostatic_parameter_get, _cphd.ErrorMonostatic_parameter_set)

    def __init__(self):
        """__init__(cphd::ErrorParameters::Monostatic self) -> ErrorMonostatic"""
        this = _cphd.new_ErrorMonostatic()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cphd.delete_ErrorMonostatic
    __del__ = lambda self: None
ErrorMonostatic_swigregister = _cphd.ErrorMonostatic_swigregister
ErrorMonostatic_swigregister(ErrorMonostatic)

class ErrorBistatic(_object):
    """Proxy of C++ cphd::ErrorParameters::Bistatic class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ErrorBistatic, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ErrorBistatic, name)
    __repr__ = _swig_repr

    def __eq__(self, other: 'ErrorBistatic') -> "bool":
        """__eq__(ErrorBistatic self, ErrorBistatic other) -> bool"""
        return _cphd.ErrorBistatic___eq__(self, other)


    def __ne__(self, other: 'ErrorBistatic') -> "bool":
        """__ne__(ErrorBistatic self, ErrorBistatic other) -> bool"""
        return _cphd.ErrorBistatic___ne__(self, other)

    __swig_setmethods__["txPlatform"] = _cphd.ErrorBistatic_txPlatform_set
    __swig_getmethods__["txPlatform"] = _cphd.ErrorBistatic_txPlatform_get
    if _newclass:
        txPlatform = _swig_property(_cphd.ErrorBistatic_txPlatform_get, _cphd.ErrorBistatic_txPlatform_set)
    __swig_setmethods__["rcvPlatform"] = _cphd.ErrorBistatic_rcvPlatform_set
    __swig_getmethods__["rcvPlatform"] = _cphd.ErrorBistatic_rcvPlatform_get
    if _newclass:
        rcvPlatform = _swig_property(_cphd.ErrorBistatic_rcvPlatform_get, _cphd.ErrorBistatic_rcvPlatform_set)
    __swig_setmethods__["parameter"] = _cphd.ErrorBistatic_parameter_set
    __swig_getmethods__["parameter"] = _cphd.ErrorBistatic_parameter_get
    if _newclass:
        parameter = _swig_property(_cphd.ErrorBistatic_parameter_get, _cphd.ErrorBistatic_parameter_set)

    def __init__(self):
        """__init__(cphd::ErrorParameters::Bistatic self) -> ErrorBistatic"""
        this = _cphd.new_ErrorBistatic()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cphd.delete_ErrorBistatic
    __del__ = lambda self: None
ErrorBistatic_swigregister = _cphd.ErrorBistatic_swigregister
ErrorBistatic_swigregister(ErrorBistatic)

class ErrorBistaticRadarSensor(_object):
    """Proxy of C++ cphd::ErrorParameters::Bistatic::RadarSensor class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ErrorBistaticRadarSensor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ErrorBistaticRadarSensor, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::ErrorParameters::Bistatic::RadarSensor self) -> ErrorBistaticRadarSensor"""
        this = _cphd.new_ErrorBistaticRadarSensor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'ErrorBistaticRadarSensor') -> "bool":
        """__eq__(ErrorBistaticRadarSensor self, ErrorBistaticRadarSensor other) -> bool"""
        return _cphd.ErrorBistaticRadarSensor___eq__(self, other)


    def __ne__(self, other: 'ErrorBistaticRadarSensor') -> "bool":
        """__ne__(ErrorBistaticRadarSensor self, ErrorBistaticRadarSensor other) -> bool"""
        return _cphd.ErrorBistaticRadarSensor___ne__(self, other)

    __swig_setmethods__["clockFreqSF"] = _cphd.ErrorBistaticRadarSensor_clockFreqSF_set
    __swig_getmethods__["clockFreqSF"] = _cphd.ErrorBistaticRadarSensor_clockFreqSF_get
    if _newclass:
        clockFreqSF = _swig_property(_cphd.ErrorBistaticRadarSensor_clockFreqSF_get, _cphd.ErrorBistaticRadarSensor_clockFreqSF_set)
    __swig_setmethods__["collectionStartTime"] = _cphd.ErrorBistaticRadarSensor_collectionStartTime_set
    __swig_getmethods__["collectionStartTime"] = _cphd.ErrorBistaticRadarSensor_collectionStartTime_get
    if _newclass:
        collectionStartTime = _swig_property(_cphd.ErrorBistaticRadarSensor_collectionStartTime_get, _cphd.ErrorBistaticRadarSensor_collectionStartTime_set)
    __swig_destroy__ = _cphd.delete_ErrorBistaticRadarSensor
    __del__ = lambda self: None
ErrorBistaticRadarSensor_swigregister = _cphd.ErrorBistaticRadarSensor_swigregister
ErrorBistaticRadarSensor_swigregister(ErrorBistaticRadarSensor)

class Platform(_object):
    """Proxy of C++ cphd::ErrorParameters::Bistatic::Platform class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Platform, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Platform, name)
    __repr__ = _swig_repr

    def __eq__(self, other: 'Platform') -> "bool":
        """__eq__(Platform self, Platform other) -> bool"""
        return _cphd.Platform___eq__(self, other)


    def __ne__(self, other: 'Platform') -> "bool":
        """__ne__(Platform self, Platform other) -> bool"""
        return _cphd.Platform___ne__(self, other)

    __swig_setmethods__["posVelErr"] = _cphd.Platform_posVelErr_set
    __swig_getmethods__["posVelErr"] = _cphd.Platform_posVelErr_get
    if _newclass:
        posVelErr = _swig_property(_cphd.Platform_posVelErr_get, _cphd.Platform_posVelErr_set)
    __swig_setmethods__["radarSensor"] = _cphd.Platform_radarSensor_set
    __swig_getmethods__["radarSensor"] = _cphd.Platform_radarSensor_get
    if _newclass:
        radarSensor = _swig_property(_cphd.Platform_radarSensor_get, _cphd.Platform_radarSensor_set)

    def __init__(self):
        """__init__(cphd::ErrorParameters::Bistatic::Platform self) -> Platform"""
        this = _cphd.new_Platform()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cphd.delete_Platform
    __del__ = lambda self: None
Platform_swigregister = _cphd.Platform_swigregister
Platform_swigregister(Platform)

class ErrorMonostaticRadarSensor(_object):
    """Proxy of C++ cphd::ErrorParameters::Monostatic::RadarSensor class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ErrorMonostaticRadarSensor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ErrorMonostaticRadarSensor, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::ErrorParameters::Monostatic::RadarSensor self) -> ErrorMonostaticRadarSensor"""
        this = _cphd.new_ErrorMonostaticRadarSensor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'ErrorMonostaticRadarSensor') -> "bool":
        """__eq__(ErrorMonostaticRadarSensor self, ErrorMonostaticRadarSensor other) -> bool"""
        return _cphd.ErrorMonostaticRadarSensor___eq__(self, other)


    def __ne__(self, other: 'ErrorMonostaticRadarSensor') -> "bool":
        """__ne__(ErrorMonostaticRadarSensor self, ErrorMonostaticRadarSensor other) -> bool"""
        return _cphd.ErrorMonostaticRadarSensor___ne__(self, other)

    __swig_setmethods__["rangeBias"] = _cphd.ErrorMonostaticRadarSensor_rangeBias_set
    __swig_getmethods__["rangeBias"] = _cphd.ErrorMonostaticRadarSensor_rangeBias_get
    if _newclass:
        rangeBias = _swig_property(_cphd.ErrorMonostaticRadarSensor_rangeBias_get, _cphd.ErrorMonostaticRadarSensor_rangeBias_set)
    __swig_setmethods__["clockFreqSF"] = _cphd.ErrorMonostaticRadarSensor_clockFreqSF_set
    __swig_getmethods__["clockFreqSF"] = _cphd.ErrorMonostaticRadarSensor_clockFreqSF_get
    if _newclass:
        clockFreqSF = _swig_property(_cphd.ErrorMonostaticRadarSensor_clockFreqSF_get, _cphd.ErrorMonostaticRadarSensor_clockFreqSF_set)
    __swig_setmethods__["collectionStartTime"] = _cphd.ErrorMonostaticRadarSensor_collectionStartTime_set
    __swig_getmethods__["collectionStartTime"] = _cphd.ErrorMonostaticRadarSensor_collectionStartTime_get
    if _newclass:
        collectionStartTime = _swig_property(_cphd.ErrorMonostaticRadarSensor_collectionStartTime_get, _cphd.ErrorMonostaticRadarSensor_collectionStartTime_set)
    __swig_setmethods__["rangeBiasDecorr"] = _cphd.ErrorMonostaticRadarSensor_rangeBiasDecorr_set
    __swig_getmethods__["rangeBiasDecorr"] = _cphd.ErrorMonostaticRadarSensor_rangeBiasDecorr_get
    if _newclass:
        rangeBiasDecorr = _swig_property(_cphd.ErrorMonostaticRadarSensor_rangeBiasDecorr_get, _cphd.ErrorMonostaticRadarSensor_rangeBiasDecorr_set)
    __swig_destroy__ = _cphd.delete_ErrorMonostaticRadarSensor
    __del__ = lambda self: None
ErrorMonostaticRadarSensor_swigregister = _cphd.ErrorMonostaticRadarSensor_swigregister
ErrorMonostaticRadarSensor_swigregister(ErrorMonostaticRadarSensor)

class ProductInfo(_object):
    """Proxy of C++ cphd::ProductInfo class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProductInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ProductInfo, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::ProductInfo self) -> ProductInfo"""
        this = _cphd.new_ProductInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'ProductInfo') -> "bool":
        """__eq__(ProductInfo self, ProductInfo other) -> bool"""
        return _cphd.ProductInfo___eq__(self, other)


    def __ne__(self, other: 'ProductInfo') -> "bool":
        """__ne__(ProductInfo self, ProductInfo other) -> bool"""
        return _cphd.ProductInfo___ne__(self, other)

    __swig_setmethods__["profile"] = _cphd.ProductInfo_profile_set
    __swig_getmethods__["profile"] = _cphd.ProductInfo_profile_get
    if _newclass:
        profile = _swig_property(_cphd.ProductInfo_profile_get, _cphd.ProductInfo_profile_set)
    __swig_setmethods__["creationInfo"] = _cphd.ProductInfo_creationInfo_set
    __swig_getmethods__["creationInfo"] = _cphd.ProductInfo_creationInfo_get
    if _newclass:
        creationInfo = _swig_property(_cphd.ProductInfo_creationInfo_get, _cphd.ProductInfo_creationInfo_set)
    __swig_setmethods__["parameter"] = _cphd.ProductInfo_parameter_set
    __swig_getmethods__["parameter"] = _cphd.ProductInfo_parameter_get
    if _newclass:
        parameter = _swig_property(_cphd.ProductInfo_parameter_get, _cphd.ProductInfo_parameter_set)
    __swig_destroy__ = _cphd.delete_ProductInfo
    __del__ = lambda self: None
ProductInfo_swigregister = _cphd.ProductInfo_swigregister
ProductInfo_swigregister(ProductInfo)

class CreationInfo(_object):
    """Proxy of C++ cphd::ProductInfo::CreationInfo class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CreationInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CreationInfo, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::ProductInfo::CreationInfo self) -> CreationInfo"""
        this = _cphd.new_CreationInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'CreationInfo') -> "bool":
        """__eq__(CreationInfo self, CreationInfo other) -> bool"""
        return _cphd.CreationInfo___eq__(self, other)


    def __ne__(self, other: 'CreationInfo') -> "bool":
        """__ne__(CreationInfo self, CreationInfo other) -> bool"""
        return _cphd.CreationInfo___ne__(self, other)

    __swig_setmethods__["application"] = _cphd.CreationInfo_application_set
    __swig_getmethods__["application"] = _cphd.CreationInfo_application_get
    if _newclass:
        application = _swig_property(_cphd.CreationInfo_application_get, _cphd.CreationInfo_application_set)
    __swig_setmethods__["dateTime"] = _cphd.CreationInfo_dateTime_set
    __swig_getmethods__["dateTime"] = _cphd.CreationInfo_dateTime_get
    if _newclass:
        dateTime = _swig_property(_cphd.CreationInfo_dateTime_get, _cphd.CreationInfo_dateTime_set)
    __swig_setmethods__["site"] = _cphd.CreationInfo_site_set
    __swig_getmethods__["site"] = _cphd.CreationInfo_site_get
    if _newclass:
        site = _swig_property(_cphd.CreationInfo_site_get, _cphd.CreationInfo_site_set)
    __swig_setmethods__["parameter"] = _cphd.CreationInfo_parameter_set
    __swig_getmethods__["parameter"] = _cphd.CreationInfo_parameter_get
    if _newclass:
        parameter = _swig_property(_cphd.CreationInfo_parameter_get, _cphd.CreationInfo_parameter_set)
    __swig_destroy__ = _cphd.delete_CreationInfo
    __del__ = lambda self: None
CreationInfo_swigregister = _cphd.CreationInfo_swigregister
CreationInfo_swigregister(CreationInfo)

class SupportBlock(_object):
    """Proxy of C++ cphd::SupportBlock class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SupportBlock, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SupportBlock, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(cphd::SupportBlock self, std::string const & pathname, Data data, sys::Off_T startSupport, sys::Off_T sizeSupport) -> SupportBlock
        __init__(cphd::SupportBlock self, std::shared_ptr< io::SeekableInputStream > inStream, Data data, sys::Off_T startSupport, sys::Off_T sizeSupport) -> SupportBlock
        """
        this = _cphd.new_SupportBlock(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getFileOffset(self, id: 'std::string const &') -> "sys::Off_T":
        """getFileOffset(SupportBlock self, std::string const & id) -> sys::Off_T"""
        return _cphd.SupportBlock_getFileOffset(self, id)


    def read(self, *args) -> "void":
        """
        read(SupportBlock self, std::string const & id, size_t numThreads, mem::BufferView< sys::ubyte > const & data)
        read(SupportBlock self, std::string const & id, size_t numThreads, mem::ScopedArray< sys::ubyte > & data)
        """
        return _cphd.SupportBlock_read(self, *args)


    def readAll(self, numThreads: 'size_t', data: 'mem::ScopedArray< sys::ubyte > &') -> "void":
        """readAll(SupportBlock self, size_t numThreads, mem::ScopedArray< sys::ubyte > & data)"""
        return _cphd.SupportBlock_readAll(self, numThreads, data)

    __swig_destroy__ = _cphd.delete_SupportBlock
    __del__ = lambda self: None
SupportBlock_swigregister = _cphd.SupportBlock_swigregister
SupportBlock_swigregister(SupportBlock)

class Polarization(_object):
    """Proxy of C++ cphd::Polarization class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Polarization, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Polarization, name)
    __repr__ = _swig_repr

    def __eq__(self, other: 'Polarization') -> "bool":
        """__eq__(Polarization self, Polarization other) -> bool"""
        return _cphd.Polarization___eq__(self, other)


    def __ne__(self, other: 'Polarization') -> "bool":
        """__ne__(Polarization self, Polarization other) -> bool"""
        return _cphd.Polarization___ne__(self, other)

    __swig_setmethods__["txPol"] = _cphd.Polarization_txPol_set
    __swig_getmethods__["txPol"] = _cphd.Polarization_txPol_get
    if _newclass:
        txPol = _swig_property(_cphd.Polarization_txPol_get, _cphd.Polarization_txPol_set)
    __swig_setmethods__["rcvPol"] = _cphd.Polarization_rcvPol_set
    __swig_getmethods__["rcvPol"] = _cphd.Polarization_rcvPol_get
    if _newclass:
        rcvPol = _swig_property(_cphd.Polarization_rcvPol_get, _cphd.Polarization_rcvPol_set)

    def __init__(self):
        """__init__(cphd::Polarization self) -> Polarization"""
        this = _cphd.new_Polarization()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cphd.delete_Polarization
    __del__ = lambda self: None
Polarization_swigregister = _cphd.Polarization_swigregister
Polarization_swigregister(Polarization)

class TOAExtended(_object):
    """Proxy of C++ cphd::TOAExtended class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TOAExtended, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TOAExtended, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::TOAExtended self) -> TOAExtended"""
        this = _cphd.new_TOAExtended()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'TOAExtended') -> "bool":
        """__eq__(TOAExtended self, TOAExtended other) -> bool"""
        return _cphd.TOAExtended___eq__(self, other)


    def __ne__(self, other: 'TOAExtended') -> "bool":
        """__ne__(TOAExtended self, TOAExtended other) -> bool"""
        return _cphd.TOAExtended___ne__(self, other)

    __swig_setmethods__["toaExtSaved"] = _cphd.TOAExtended_toaExtSaved_set
    __swig_getmethods__["toaExtSaved"] = _cphd.TOAExtended_toaExtSaved_get
    if _newclass:
        toaExtSaved = _swig_property(_cphd.TOAExtended_toaExtSaved_get, _cphd.TOAExtended_toaExtSaved_set)
    __swig_setmethods__["lfmEclipse"] = _cphd.TOAExtended_lfmEclipse_set
    __swig_getmethods__["lfmEclipse"] = _cphd.TOAExtended_lfmEclipse_get
    if _newclass:
        lfmEclipse = _swig_property(_cphd.TOAExtended_lfmEclipse_get, _cphd.TOAExtended_lfmEclipse_set)
    __swig_destroy__ = _cphd.delete_TOAExtended
    __del__ = lambda self: None
TOAExtended_swigregister = _cphd.TOAExtended_swigregister
TOAExtended_swigregister(TOAExtended)

class TOALFMEclipse(_object):
    """Proxy of C++ cphd::TOAExtended::LFMEclipse class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TOALFMEclipse, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TOALFMEclipse, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::TOAExtended::LFMEclipse self) -> TOALFMEclipse"""
        this = _cphd.new_TOALFMEclipse()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'TOALFMEclipse') -> "bool":
        """__eq__(TOALFMEclipse self, TOALFMEclipse other) -> bool"""
        return _cphd.TOALFMEclipse___eq__(self, other)


    def __ne__(self, other: 'TOALFMEclipse') -> "bool":
        """__ne__(TOALFMEclipse self, TOALFMEclipse other) -> bool"""
        return _cphd.TOALFMEclipse___ne__(self, other)

    __swig_setmethods__["fxEarlyLow"] = _cphd.TOALFMEclipse_fxEarlyLow_set
    __swig_getmethods__["fxEarlyLow"] = _cphd.TOALFMEclipse_fxEarlyLow_get
    if _newclass:
        fxEarlyLow = _swig_property(_cphd.TOALFMEclipse_fxEarlyLow_get, _cphd.TOALFMEclipse_fxEarlyLow_set)
    __swig_setmethods__["fxEarlyHigh"] = _cphd.TOALFMEclipse_fxEarlyHigh_set
    __swig_getmethods__["fxEarlyHigh"] = _cphd.TOALFMEclipse_fxEarlyHigh_get
    if _newclass:
        fxEarlyHigh = _swig_property(_cphd.TOALFMEclipse_fxEarlyHigh_get, _cphd.TOALFMEclipse_fxEarlyHigh_set)
    __swig_setmethods__["fxLateLow"] = _cphd.TOALFMEclipse_fxLateLow_set
    __swig_getmethods__["fxLateLow"] = _cphd.TOALFMEclipse_fxLateLow_get
    if _newclass:
        fxLateLow = _swig_property(_cphd.TOALFMEclipse_fxLateLow_get, _cphd.TOALFMEclipse_fxLateLow_set)
    __swig_setmethods__["fxLateHigh"] = _cphd.TOALFMEclipse_fxLateHigh_set
    __swig_getmethods__["fxLateHigh"] = _cphd.TOALFMEclipse_fxLateHigh_get
    if _newclass:
        fxLateHigh = _swig_property(_cphd.TOALFMEclipse_fxLateHigh_get, _cphd.TOALFMEclipse_fxLateHigh_set)
    __swig_destroy__ = _cphd.delete_TOALFMEclipse
    __del__ = lambda self: None
TOALFMEclipse_swigregister = _cphd.TOALFMEclipse_swigregister
TOALFMEclipse_swigregister(TOALFMEclipse)

class DwellTimes(_object):
    """Proxy of C++ cphd::DwellTimes class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DwellTimes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DwellTimes, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::DwellTimes self) -> DwellTimes"""
        this = _cphd.new_DwellTimes()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'DwellTimes') -> "bool":
        """__eq__(DwellTimes self, DwellTimes other) -> bool"""
        return _cphd.DwellTimes___eq__(self, other)


    def __ne__(self, other: 'DwellTimes') -> "bool":
        """__ne__(DwellTimes self, DwellTimes other) -> bool"""
        return _cphd.DwellTimes___ne__(self, other)

    __swig_setmethods__["codId"] = _cphd.DwellTimes_codId_set
    __swig_getmethods__["codId"] = _cphd.DwellTimes_codId_get
    if _newclass:
        codId = _swig_property(_cphd.DwellTimes_codId_get, _cphd.DwellTimes_codId_set)
    __swig_setmethods__["dwellId"] = _cphd.DwellTimes_dwellId_set
    __swig_getmethods__["dwellId"] = _cphd.DwellTimes_dwellId_get
    if _newclass:
        dwellId = _swig_property(_cphd.DwellTimes_dwellId_get, _cphd.DwellTimes_dwellId_set)
    __swig_destroy__ = _cphd.delete_DwellTimes
    __del__ = lambda self: None
DwellTimes_swigregister = _cphd.DwellTimes_swigregister
DwellTimes_swigregister(DwellTimes)

class TgtRefLevel(_object):
    """Proxy of C++ cphd::TgtRefLevel class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TgtRefLevel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TgtRefLevel, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::TgtRefLevel self) -> TgtRefLevel"""
        this = _cphd.new_TgtRefLevel()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'TgtRefLevel') -> "bool":
        """__eq__(TgtRefLevel self, TgtRefLevel other) -> bool"""
        return _cphd.TgtRefLevel___eq__(self, other)


    def __ne__(self, other: 'TgtRefLevel') -> "bool":
        """__ne__(TgtRefLevel self, TgtRefLevel other) -> bool"""
        return _cphd.TgtRefLevel___ne__(self, other)

    __swig_setmethods__["ptRef"] = _cphd.TgtRefLevel_ptRef_set
    __swig_getmethods__["ptRef"] = _cphd.TgtRefLevel_ptRef_get
    if _newclass:
        ptRef = _swig_property(_cphd.TgtRefLevel_ptRef_get, _cphd.TgtRefLevel_ptRef_set)
    __swig_destroy__ = _cphd.delete_TgtRefLevel
    __del__ = lambda self: None
TgtRefLevel_swigregister = _cphd.TgtRefLevel_swigregister
TgtRefLevel_swigregister(TgtRefLevel)

class Point(_object):
    """Proxy of C++ cphd::Point class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::Point self) -> Point"""
        this = _cphd.new_Point()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'Point') -> "bool":
        """__eq__(Point self, Point other) -> bool"""
        return _cphd.Point___eq__(self, other)


    def __ne__(self, other: 'Point') -> "bool":
        """__ne__(Point self, Point other) -> bool"""
        return _cphd.Point___ne__(self, other)

    __swig_setmethods__["fx"] = _cphd.Point_fx_set
    __swig_getmethods__["fx"] = _cphd.Point_fx_get
    if _newclass:
        fx = _swig_property(_cphd.Point_fx_get, _cphd.Point_fx_set)
    __swig_setmethods__["pn"] = _cphd.Point_pn_set
    __swig_getmethods__["pn"] = _cphd.Point_pn_get
    if _newclass:
        pn = _swig_property(_cphd.Point_pn_get, _cphd.Point_pn_set)
    __swig_destroy__ = _cphd.delete_Point
    __del__ = lambda self: None
Point_swigregister = _cphd.Point_swigregister
Point_swigregister(Point)

class FxNoiseProfile(_object):
    """Proxy of C++ cphd::FxNoiseProfile class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FxNoiseProfile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FxNoiseProfile, name)
    __repr__ = _swig_repr

    def __eq__(self, other: 'FxNoiseProfile') -> "bool":
        """__eq__(FxNoiseProfile self, FxNoiseProfile other) -> bool"""
        return _cphd.FxNoiseProfile___eq__(self, other)


    def __ne__(self, other: 'FxNoiseProfile') -> "bool":
        """__ne__(FxNoiseProfile self, FxNoiseProfile other) -> bool"""
        return _cphd.FxNoiseProfile___ne__(self, other)

    __swig_setmethods__["point"] = _cphd.FxNoiseProfile_point_set
    __swig_getmethods__["point"] = _cphd.FxNoiseProfile_point_get
    if _newclass:
        point = _swig_property(_cphd.FxNoiseProfile_point_get, _cphd.FxNoiseProfile_point_set)

    def __init__(self):
        """__init__(cphd::FxNoiseProfile self) -> FxNoiseProfile"""
        this = _cphd.new_FxNoiseProfile()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cphd.delete_FxNoiseProfile
    __del__ = lambda self: None
FxNoiseProfile_swigregister = _cphd.FxNoiseProfile_swigregister
FxNoiseProfile_swigregister(FxNoiseProfile)

class NoiseLevel(_object):
    """Proxy of C++ cphd::NoiseLevel class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoiseLevel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NoiseLevel, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::NoiseLevel self) -> NoiseLevel"""
        this = _cphd.new_NoiseLevel()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'NoiseLevel') -> "bool":
        """__eq__(NoiseLevel self, NoiseLevel other) -> bool"""
        return _cphd.NoiseLevel___eq__(self, other)


    def __ne__(self, other: 'NoiseLevel') -> "bool":
        """__ne__(NoiseLevel self, NoiseLevel other) -> bool"""
        return _cphd.NoiseLevel___ne__(self, other)

    __swig_setmethods__["pnRef"] = _cphd.NoiseLevel_pnRef_set
    __swig_getmethods__["pnRef"] = _cphd.NoiseLevel_pnRef_get
    if _newclass:
        pnRef = _swig_property(_cphd.NoiseLevel_pnRef_get, _cphd.NoiseLevel_pnRef_set)
    __swig_setmethods__["bnRef"] = _cphd.NoiseLevel_bnRef_set
    __swig_getmethods__["bnRef"] = _cphd.NoiseLevel_bnRef_get
    if _newclass:
        bnRef = _swig_property(_cphd.NoiseLevel_bnRef_get, _cphd.NoiseLevel_bnRef_set)
    __swig_setmethods__["fxNoiseProfile"] = _cphd.NoiseLevel_fxNoiseProfile_set
    __swig_getmethods__["fxNoiseProfile"] = _cphd.NoiseLevel_fxNoiseProfile_get
    if _newclass:
        fxNoiseProfile = _swig_property(_cphd.NoiseLevel_fxNoiseProfile_get, _cphd.NoiseLevel_fxNoiseProfile_set)
    __swig_destroy__ = _cphd.delete_NoiseLevel
    __del__ = lambda self: None
NoiseLevel_swigregister = _cphd.NoiseLevel_swigregister
NoiseLevel_swigregister(NoiseLevel)

class ChannelParameter(_object):
    """Proxy of C++ cphd::ChannelParameter class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChannelParameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChannelParameter, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::ChannelParameter self) -> ChannelParameter"""
        this = _cphd.new_ChannelParameter()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'ChannelParameter') -> "bool":
        """__eq__(ChannelParameter self, ChannelParameter other) -> bool"""
        return _cphd.ChannelParameter___eq__(self, other)


    def __ne__(self, other: 'ChannelParameter') -> "bool":
        """__ne__(ChannelParameter self, ChannelParameter other) -> bool"""
        return _cphd.ChannelParameter___ne__(self, other)

    __swig_setmethods__["identifier"] = _cphd.ChannelParameter_identifier_set
    __swig_getmethods__["identifier"] = _cphd.ChannelParameter_identifier_get
    if _newclass:
        identifier = _swig_property(_cphd.ChannelParameter_identifier_get, _cphd.ChannelParameter_identifier_set)
    __swig_setmethods__["refVectorIndex"] = _cphd.ChannelParameter_refVectorIndex_set
    __swig_getmethods__["refVectorIndex"] = _cphd.ChannelParameter_refVectorIndex_get
    if _newclass:
        refVectorIndex = _swig_property(_cphd.ChannelParameter_refVectorIndex_get, _cphd.ChannelParameter_refVectorIndex_set)
    __swig_setmethods__["fxFixed"] = _cphd.ChannelParameter_fxFixed_set
    __swig_getmethods__["fxFixed"] = _cphd.ChannelParameter_fxFixed_get
    if _newclass:
        fxFixed = _swig_property(_cphd.ChannelParameter_fxFixed_get, _cphd.ChannelParameter_fxFixed_set)
    __swig_setmethods__["toaFixed"] = _cphd.ChannelParameter_toaFixed_set
    __swig_getmethods__["toaFixed"] = _cphd.ChannelParameter_toaFixed_get
    if _newclass:
        toaFixed = _swig_property(_cphd.ChannelParameter_toaFixed_get, _cphd.ChannelParameter_toaFixed_set)
    __swig_setmethods__["srpFixed"] = _cphd.ChannelParameter_srpFixed_set
    __swig_getmethods__["srpFixed"] = _cphd.ChannelParameter_srpFixed_get
    if _newclass:
        srpFixed = _swig_property(_cphd.ChannelParameter_srpFixed_get, _cphd.ChannelParameter_srpFixed_set)
    __swig_setmethods__["signalNormal"] = _cphd.ChannelParameter_signalNormal_set
    __swig_getmethods__["signalNormal"] = _cphd.ChannelParameter_signalNormal_get
    if _newclass:
        signalNormal = _swig_property(_cphd.ChannelParameter_signalNormal_get, _cphd.ChannelParameter_signalNormal_set)
    __swig_setmethods__["polarization"] = _cphd.ChannelParameter_polarization_set
    __swig_getmethods__["polarization"] = _cphd.ChannelParameter_polarization_get
    if _newclass:
        polarization = _swig_property(_cphd.ChannelParameter_polarization_get, _cphd.ChannelParameter_polarization_set)
    __swig_setmethods__["fxC"] = _cphd.ChannelParameter_fxC_set
    __swig_getmethods__["fxC"] = _cphd.ChannelParameter_fxC_get
    if _newclass:
        fxC = _swig_property(_cphd.ChannelParameter_fxC_get, _cphd.ChannelParameter_fxC_set)
    __swig_setmethods__["fxBW"] = _cphd.ChannelParameter_fxBW_set
    __swig_getmethods__["fxBW"] = _cphd.ChannelParameter_fxBW_get
    if _newclass:
        fxBW = _swig_property(_cphd.ChannelParameter_fxBW_get, _cphd.ChannelParameter_fxBW_set)
    __swig_setmethods__["fxBWNoise"] = _cphd.ChannelParameter_fxBWNoise_set
    __swig_getmethods__["fxBWNoise"] = _cphd.ChannelParameter_fxBWNoise_get
    if _newclass:
        fxBWNoise = _swig_property(_cphd.ChannelParameter_fxBWNoise_get, _cphd.ChannelParameter_fxBWNoise_set)
    __swig_setmethods__["toaSaved"] = _cphd.ChannelParameter_toaSaved_set
    __swig_getmethods__["toaSaved"] = _cphd.ChannelParameter_toaSaved_get
    if _newclass:
        toaSaved = _swig_property(_cphd.ChannelParameter_toaSaved_get, _cphd.ChannelParameter_toaSaved_set)
    __swig_setmethods__["dwellTimes"] = _cphd.ChannelParameter_dwellTimes_set
    __swig_getmethods__["dwellTimes"] = _cphd.ChannelParameter_dwellTimes_get
    if _newclass:
        dwellTimes = _swig_property(_cphd.ChannelParameter_dwellTimes_get, _cphd.ChannelParameter_dwellTimes_set)
    __swig_setmethods__["imageArea"] = _cphd.ChannelParameter_imageArea_set
    __swig_getmethods__["imageArea"] = _cphd.ChannelParameter_imageArea_get
    if _newclass:
        imageArea = _swig_property(_cphd.ChannelParameter_imageArea_get, _cphd.ChannelParameter_imageArea_set)
    __swig_setmethods__["toaExtended"] = _cphd.ChannelParameter_toaExtended_set
    __swig_getmethods__["toaExtended"] = _cphd.ChannelParameter_toaExtended_get
    if _newclass:
        toaExtended = _swig_property(_cphd.ChannelParameter_toaExtended_get, _cphd.ChannelParameter_toaExtended_set)
    __swig_setmethods__["antenna"] = _cphd.ChannelParameter_antenna_set
    __swig_getmethods__["antenna"] = _cphd.ChannelParameter_antenna_get
    if _newclass:
        antenna = _swig_property(_cphd.ChannelParameter_antenna_get, _cphd.ChannelParameter_antenna_set)
    __swig_setmethods__["txRcv"] = _cphd.ChannelParameter_txRcv_set
    __swig_getmethods__["txRcv"] = _cphd.ChannelParameter_txRcv_get
    if _newclass:
        txRcv = _swig_property(_cphd.ChannelParameter_txRcv_get, _cphd.ChannelParameter_txRcv_set)
    __swig_setmethods__["tgtRefLevel"] = _cphd.ChannelParameter_tgtRefLevel_set
    __swig_getmethods__["tgtRefLevel"] = _cphd.ChannelParameter_tgtRefLevel_get
    if _newclass:
        tgtRefLevel = _swig_property(_cphd.ChannelParameter_tgtRefLevel_get, _cphd.ChannelParameter_tgtRefLevel_set)
    __swig_setmethods__["noiseLevel"] = _cphd.ChannelParameter_noiseLevel_set
    __swig_getmethods__["noiseLevel"] = _cphd.ChannelParameter_noiseLevel_get
    if _newclass:
        noiseLevel = _swig_property(_cphd.ChannelParameter_noiseLevel_get, _cphd.ChannelParameter_noiseLevel_set)
    __swig_destroy__ = _cphd.delete_ChannelParameter
    __del__ = lambda self: None
ChannelParameter_swigregister = _cphd.ChannelParameter_swigregister
ChannelParameter_swigregister(ChannelParameter)

class ChannelTxRcv(_object):
    """Proxy of C++ cphd::ChannelParameter::TxRcv class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChannelTxRcv, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChannelTxRcv, name)
    __repr__ = _swig_repr

    def __eq__(self, other: 'ChannelTxRcv') -> "bool":
        """__eq__(ChannelTxRcv self, ChannelTxRcv other) -> bool"""
        return _cphd.ChannelTxRcv___eq__(self, other)


    def __ne__(self, other: 'ChannelTxRcv') -> "bool":
        """__ne__(ChannelTxRcv self, ChannelTxRcv other) -> bool"""
        return _cphd.ChannelTxRcv___ne__(self, other)

    __swig_setmethods__["txWFId"] = _cphd.ChannelTxRcv_txWFId_set
    __swig_getmethods__["txWFId"] = _cphd.ChannelTxRcv_txWFId_get
    if _newclass:
        txWFId = _swig_property(_cphd.ChannelTxRcv_txWFId_get, _cphd.ChannelTxRcv_txWFId_set)
    __swig_setmethods__["rcvId"] = _cphd.ChannelTxRcv_rcvId_set
    __swig_getmethods__["rcvId"] = _cphd.ChannelTxRcv_rcvId_get
    if _newclass:
        rcvId = _swig_property(_cphd.ChannelTxRcv_rcvId_get, _cphd.ChannelTxRcv_rcvId_set)

    def __init__(self):
        """__init__(cphd::ChannelParameter::TxRcv self) -> ChannelTxRcv"""
        this = _cphd.new_ChannelTxRcv()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cphd.delete_ChannelTxRcv
    __del__ = lambda self: None
ChannelTxRcv_swigregister = _cphd.ChannelTxRcv_swigregister
ChannelTxRcv_swigregister(ChannelTxRcv)

class ChannelAntenna(_object):
    """Proxy of C++ cphd::ChannelParameter::Antenna class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChannelAntenna, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChannelAntenna, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::ChannelParameter::Antenna self) -> ChannelAntenna"""
        this = _cphd.new_ChannelAntenna()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'ChannelAntenna') -> "bool":
        """__eq__(ChannelAntenna self, ChannelAntenna other) -> bool"""
        return _cphd.ChannelAntenna___eq__(self, other)


    def __ne__(self, other: 'ChannelAntenna') -> "bool":
        """__ne__(ChannelAntenna self, ChannelAntenna other) -> bool"""
        return _cphd.ChannelAntenna___ne__(self, other)

    __swig_setmethods__["txAPCId"] = _cphd.ChannelAntenna_txAPCId_set
    __swig_getmethods__["txAPCId"] = _cphd.ChannelAntenna_txAPCId_get
    if _newclass:
        txAPCId = _swig_property(_cphd.ChannelAntenna_txAPCId_get, _cphd.ChannelAntenna_txAPCId_set)
    __swig_setmethods__["txAPATId"] = _cphd.ChannelAntenna_txAPATId_set
    __swig_getmethods__["txAPATId"] = _cphd.ChannelAntenna_txAPATId_get
    if _newclass:
        txAPATId = _swig_property(_cphd.ChannelAntenna_txAPATId_get, _cphd.ChannelAntenna_txAPATId_set)
    __swig_setmethods__["rcvAPCId"] = _cphd.ChannelAntenna_rcvAPCId_set
    __swig_getmethods__["rcvAPCId"] = _cphd.ChannelAntenna_rcvAPCId_get
    if _newclass:
        rcvAPCId = _swig_property(_cphd.ChannelAntenna_rcvAPCId_get, _cphd.ChannelAntenna_rcvAPCId_set)
    __swig_setmethods__["rcvAPATId"] = _cphd.ChannelAntenna_rcvAPATId_set
    __swig_getmethods__["rcvAPATId"] = _cphd.ChannelAntenna_rcvAPATId_get
    if _newclass:
        rcvAPATId = _swig_property(_cphd.ChannelAntenna_rcvAPATId_get, _cphd.ChannelAntenna_rcvAPATId_set)
    __swig_destroy__ = _cphd.delete_ChannelAntenna
    __del__ = lambda self: None
ChannelAntenna_swigregister = _cphd.ChannelAntenna_swigregister
ChannelAntenna_swigregister(ChannelAntenna)

class Channel(_object):
    """Proxy of C++ cphd::Channel class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Channel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Channel, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::Channel self) -> Channel"""
        this = _cphd.new_Channel()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'Channel') -> "bool":
        """__eq__(Channel self, Channel other) -> bool"""
        return _cphd.Channel___eq__(self, other)


    def __ne__(self, other: 'Channel') -> "bool":
        """__ne__(Channel self, Channel other) -> bool"""
        return _cphd.Channel___ne__(self, other)

    __swig_setmethods__["refChId"] = _cphd.Channel_refChId_set
    __swig_getmethods__["refChId"] = _cphd.Channel_refChId_get
    if _newclass:
        refChId = _swig_property(_cphd.Channel_refChId_get, _cphd.Channel_refChId_set)
    __swig_setmethods__["fxFixedCphd"] = _cphd.Channel_fxFixedCphd_set
    __swig_getmethods__["fxFixedCphd"] = _cphd.Channel_fxFixedCphd_get
    if _newclass:
        fxFixedCphd = _swig_property(_cphd.Channel_fxFixedCphd_get, _cphd.Channel_fxFixedCphd_set)
    __swig_setmethods__["toaFixedCphd"] = _cphd.Channel_toaFixedCphd_set
    __swig_getmethods__["toaFixedCphd"] = _cphd.Channel_toaFixedCphd_get
    if _newclass:
        toaFixedCphd = _swig_property(_cphd.Channel_toaFixedCphd_get, _cphd.Channel_toaFixedCphd_set)
    __swig_setmethods__["srpFixedCphd"] = _cphd.Channel_srpFixedCphd_set
    __swig_getmethods__["srpFixedCphd"] = _cphd.Channel_srpFixedCphd_get
    if _newclass:
        srpFixedCphd = _swig_property(_cphd.Channel_srpFixedCphd_get, _cphd.Channel_srpFixedCphd_set)
    __swig_setmethods__["parameters"] = _cphd.Channel_parameters_set
    __swig_getmethods__["parameters"] = _cphd.Channel_parameters_get
    if _newclass:
        parameters = _swig_property(_cphd.Channel_parameters_get, _cphd.Channel_parameters_set)
    __swig_setmethods__["addedParameters"] = _cphd.Channel_addedParameters_set
    __swig_getmethods__["addedParameters"] = _cphd.Channel_addedParameters_get
    if _newclass:
        addedParameters = _swig_property(_cphd.Channel_addedParameters_get, _cphd.Channel_addedParameters_set)
    __swig_destroy__ = _cphd.delete_Channel
    __del__ = lambda self: None
Channel_swigregister = _cphd.Channel_swigregister
Channel_swigregister(Channel)

class Data(_object):
    """Proxy of C++ cphd::Data class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Data, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::Data self) -> Data"""
        this = _cphd.new_Data()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cphd.delete_Data
    __del__ = lambda self: None

    def __eq__(self, other: 'Data') -> "bool":
        """__eq__(Data self, Data other) -> bool"""
        return _cphd.Data___eq__(self, other)


    def __ne__(self, other: 'Data') -> "bool":
        """__ne__(Data self, Data other) -> bool"""
        return _cphd.Data___ne__(self, other)


    def getNumVectors(self, channel: 'size_t') -> "size_t":
        """getNumVectors(Data self, size_t channel) -> size_t"""
        return _cphd.Data_getNumVectors(self, channel)


    def getNumSamples(self, channel: 'size_t') -> "size_t":
        """getNumSamples(Data self, size_t channel) -> size_t"""
        return _cphd.Data_getNumSamples(self, channel)


    def getCompressedSignalSize(self, channel: 'size_t') -> "size_t":
        """getCompressedSignalSize(Data self, size_t channel) -> size_t"""
        return _cphd.Data_getCompressedSignalSize(self, channel)


    def getSignalSize(self, channel: 'size_t') -> "size_t":
        """getSignalSize(Data self, size_t channel) -> size_t"""
        return _cphd.Data_getSignalSize(self, channel)


    def getNumChannels(self) -> "size_t":
        """getNumChannels(Data self) -> size_t"""
        return _cphd.Data_getNumChannels(self)


    def getNumBytesPVPSet(self) -> "size_t":
        """getNumBytesPVPSet(Data self) -> size_t"""
        return _cphd.Data_getNumBytesPVPSet(self)


    def getCompressionID(self) -> "std::string":
        """getCompressionID(Data self) -> std::string"""
        return _cphd.Data_getCompressionID(self)


    def getSampleType(self) -> "cphd::SignalArrayFormat":
        """getSampleType(Data self) -> SignalArrayFormat"""
        return _cphd.Data_getSampleType(self)


    def getNumBytesPerSample(self) -> "size_t":
        """getNumBytesPerSample(Data self) -> size_t"""
        return _cphd.Data_getNumBytesPerSample(self)


    def getNumSupportArrays(self) -> "size_t":
        """getNumSupportArrays(Data self) -> size_t"""
        return _cphd.Data_getNumSupportArrays(self)


    def getSupportArrayById(self, id: 'std::string const &') -> "cphd::Data::SupportArray":
        """getSupportArrayById(Data self, std::string const & id) -> DataSupportArray"""
        return _cphd.Data_getSupportArrayById(self, id)


    def getElementSize(self, id: 'std::string const &') -> "size_t":
        """getElementSize(Data self, std::string const & id) -> size_t"""
        return _cphd.Data_getElementSize(self, id)


    def getAllSupportSize(self) -> "size_t":
        """getAllSupportSize(Data self) -> size_t"""
        return _cphd.Data_getAllSupportSize(self)


    def setSupportArray(self, id: 'std::string const &', numRows: 'size_t', numCols: 'size_t', numBytes: 'size_t', offset: 'sys::Off_T') -> "void":
        """setSupportArray(Data self, std::string const & id, size_t numRows, size_t numCols, size_t numBytes, sys::Off_T offset)"""
        return _cphd.Data_setSupportArray(self, id, numRows, numCols, numBytes, offset)


    def isCompressed(self) -> "bool":
        """isCompressed(Data self) -> bool"""
        return _cphd.Data_isCompressed(self)

    __swig_setmethods__["signalArrayFormat"] = _cphd.Data_signalArrayFormat_set
    __swig_getmethods__["signalArrayFormat"] = _cphd.Data_signalArrayFormat_get
    if _newclass:
        signalArrayFormat = _swig_property(_cphd.Data_signalArrayFormat_get, _cphd.Data_signalArrayFormat_set)
    __swig_setmethods__["numBytesPVP"] = _cphd.Data_numBytesPVP_set
    __swig_getmethods__["numBytesPVP"] = _cphd.Data_numBytesPVP_get
    if _newclass:
        numBytesPVP = _swig_property(_cphd.Data_numBytesPVP_get, _cphd.Data_numBytesPVP_set)
    __swig_setmethods__["channels"] = _cphd.Data_channels_set
    __swig_getmethods__["channels"] = _cphd.Data_channels_get
    if _newclass:
        channels = _swig_property(_cphd.Data_channels_get, _cphd.Data_channels_set)
    __swig_setmethods__["signalCompressionID"] = _cphd.Data_signalCompressionID_set
    __swig_getmethods__["signalCompressionID"] = _cphd.Data_signalCompressionID_get
    if _newclass:
        signalCompressionID = _swig_property(_cphd.Data_signalCompressionID_get, _cphd.Data_signalCompressionID_set)
    __swig_setmethods__["supportArrayMap"] = _cphd.Data_supportArrayMap_set
    __swig_getmethods__["supportArrayMap"] = _cphd.Data_supportArrayMap_get
    if _newclass:
        supportArrayMap = _swig_property(_cphd.Data_supportArrayMap_get, _cphd.Data_supportArrayMap_set)
Data_swigregister = _cphd.Data_swigregister
Data_swigregister(Data)

class DataSupportArray(_object):
    """Proxy of C++ cphd::Data::SupportArray class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataSupportArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataSupportArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        SupportArray() -> DataSupportArray
        __init__(cphd::Data::SupportArray self, std::string const & id, size_t rows, size_t cols, size_t numBytes, size_t offset) -> DataSupportArray
        """
        this = _cphd.new_DataSupportArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'DataSupportArray') -> "bool":
        """__eq__(DataSupportArray self, DataSupportArray other) -> bool"""
        return _cphd.DataSupportArray___eq__(self, other)


    def __ne__(self, other: 'DataSupportArray') -> "bool":
        """__ne__(DataSupportArray self, DataSupportArray other) -> bool"""
        return _cphd.DataSupportArray___ne__(self, other)


    def getSize(self) -> "size_t":
        """getSize(DataSupportArray self) -> size_t"""
        return _cphd.DataSupportArray_getSize(self)

    __swig_setmethods__["identifier"] = _cphd.DataSupportArray_identifier_set
    __swig_getmethods__["identifier"] = _cphd.DataSupportArray_identifier_get
    if _newclass:
        identifier = _swig_property(_cphd.DataSupportArray_identifier_get, _cphd.DataSupportArray_identifier_set)
    __swig_setmethods__["numRows"] = _cphd.DataSupportArray_numRows_set
    __swig_getmethods__["numRows"] = _cphd.DataSupportArray_numRows_get
    if _newclass:
        numRows = _swig_property(_cphd.DataSupportArray_numRows_get, _cphd.DataSupportArray_numRows_set)
    __swig_setmethods__["numCols"] = _cphd.DataSupportArray_numCols_set
    __swig_getmethods__["numCols"] = _cphd.DataSupportArray_numCols_get
    if _newclass:
        numCols = _swig_property(_cphd.DataSupportArray_numCols_get, _cphd.DataSupportArray_numCols_set)
    __swig_setmethods__["bytesPerElement"] = _cphd.DataSupportArray_bytesPerElement_set
    __swig_getmethods__["bytesPerElement"] = _cphd.DataSupportArray_bytesPerElement_get
    if _newclass:
        bytesPerElement = _swig_property(_cphd.DataSupportArray_bytesPerElement_get, _cphd.DataSupportArray_bytesPerElement_set)
    __swig_setmethods__["arrayByteOffset"] = _cphd.DataSupportArray_arrayByteOffset_set
    __swig_getmethods__["arrayByteOffset"] = _cphd.DataSupportArray_arrayByteOffset_get
    if _newclass:
        arrayByteOffset = _swig_property(_cphd.DataSupportArray_arrayByteOffset_get, _cphd.DataSupportArray_arrayByteOffset_set)
    __swig_destroy__ = _cphd.delete_DataSupportArray
    __del__ = lambda self: None
DataSupportArray_swigregister = _cphd.DataSupportArray_swigregister
DataSupportArray_swigregister(DataSupportArray)

class DataChannel(_object):
    """Proxy of C++ cphd::Data::Channel class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataChannel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataChannel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Channel() -> DataChannel
        Channel(size_t vectors, size_t samples) -> DataChannel
        Channel(size_t vectors, size_t samples, size_t signalByteOffset, size_t pvpByteOffset, size_t compressedSize) -> DataChannel
        __init__(cphd::Data::Channel self, size_t vectors, size_t samples, size_t signalByteOffset, size_t pvpByteOffset) -> DataChannel
        """
        this = _cphd.new_DataChannel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'DataChannel') -> "bool":
        """__eq__(DataChannel self, DataChannel other) -> bool"""
        return _cphd.DataChannel___eq__(self, other)


    def __ne__(self, other: 'DataChannel') -> "bool":
        """__ne__(DataChannel self, DataChannel other) -> bool"""
        return _cphd.DataChannel___ne__(self, other)


    def getNumVectors(self) -> "size_t":
        """getNumVectors(DataChannel self) -> size_t"""
        return _cphd.DataChannel_getNumVectors(self)


    def getNumSamples(self) -> "size_t":
        """getNumSamples(DataChannel self) -> size_t"""
        return _cphd.DataChannel_getNumSamples(self)


    def getSignalArrayByteOffset(self) -> "size_t":
        """getSignalArrayByteOffset(DataChannel self) -> size_t"""
        return _cphd.DataChannel_getSignalArrayByteOffset(self)


    def getCompressedSignalSize(self) -> "size_t":
        """getCompressedSignalSize(DataChannel self) -> size_t"""
        return _cphd.DataChannel_getCompressedSignalSize(self)

    __swig_setmethods__["identifier"] = _cphd.DataChannel_identifier_set
    __swig_getmethods__["identifier"] = _cphd.DataChannel_identifier_get
    if _newclass:
        identifier = _swig_property(_cphd.DataChannel_identifier_get, _cphd.DataChannel_identifier_set)
    __swig_setmethods__["numVectors"] = _cphd.DataChannel_numVectors_set
    __swig_getmethods__["numVectors"] = _cphd.DataChannel_numVectors_get
    if _newclass:
        numVectors = _swig_property(_cphd.DataChannel_numVectors_get, _cphd.DataChannel_numVectors_set)
    __swig_setmethods__["numSamples"] = _cphd.DataChannel_numSamples_set
    __swig_getmethods__["numSamples"] = _cphd.DataChannel_numSamples_get
    if _newclass:
        numSamples = _swig_property(_cphd.DataChannel_numSamples_get, _cphd.DataChannel_numSamples_set)
    __swig_setmethods__["signalArrayByteOffset"] = _cphd.DataChannel_signalArrayByteOffset_set
    __swig_getmethods__["signalArrayByteOffset"] = _cphd.DataChannel_signalArrayByteOffset_get
    if _newclass:
        signalArrayByteOffset = _swig_property(_cphd.DataChannel_signalArrayByteOffset_get, _cphd.DataChannel_signalArrayByteOffset_set)
    __swig_setmethods__["pvpArrayByteOffset"] = _cphd.DataChannel_pvpArrayByteOffset_set
    __swig_getmethods__["pvpArrayByteOffset"] = _cphd.DataChannel_pvpArrayByteOffset_get
    if _newclass:
        pvpArrayByteOffset = _swig_property(_cphd.DataChannel_pvpArrayByteOffset_get, _cphd.DataChannel_pvpArrayByteOffset_set)
    __swig_setmethods__["compressedSignalSize"] = _cphd.DataChannel_compressedSignalSize_set
    __swig_getmethods__["compressedSignalSize"] = _cphd.DataChannel_compressedSignalSize_get
    if _newclass:
        compressedSignalSize = _swig_property(_cphd.DataChannel_compressedSignalSize_get, _cphd.DataChannel_compressedSignalSize_set)
    __swig_destroy__ = _cphd.delete_DataChannel
    __del__ = lambda self: None
DataChannel_swigregister = _cphd.DataChannel_swigregister
DataChannel_swigregister(DataChannel)

class DwellTime(_object):
    """Proxy of C++ cphd::DwellTime class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DwellTime, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DwellTime, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::DwellTime self) -> DwellTime"""
        this = _cphd.new_DwellTime()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'DwellTime') -> "bool":
        """__eq__(DwellTime self, DwellTime other) -> bool"""
        return _cphd.DwellTime___eq__(self, other)


    def __ne__(self, other: 'DwellTime') -> "bool":
        """__ne__(DwellTime self, DwellTime other) -> bool"""
        return _cphd.DwellTime___ne__(self, other)

    __swig_setmethods__["identifier"] = _cphd.DwellTime_identifier_set
    __swig_getmethods__["identifier"] = _cphd.DwellTime_identifier_get
    if _newclass:
        identifier = _swig_property(_cphd.DwellTime_identifier_get, _cphd.DwellTime_identifier_set)
    __swig_setmethods__["dwellTimePoly"] = _cphd.DwellTime_dwellTimePoly_set
    __swig_getmethods__["dwellTimePoly"] = _cphd.DwellTime_dwellTimePoly_get
    if _newclass:
        dwellTimePoly = _swig_property(_cphd.DwellTime_dwellTimePoly_get, _cphd.DwellTime_dwellTimePoly_set)
    __swig_destroy__ = _cphd.delete_DwellTime
    __del__ = lambda self: None
DwellTime_swigregister = _cphd.DwellTime_swigregister
DwellTime_swigregister(DwellTime)

class COD(_object):
    """Proxy of C++ cphd::COD class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, COD, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, COD, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::COD self) -> COD"""
        this = _cphd.new_COD()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'COD') -> "bool":
        """__eq__(COD self, COD other) -> bool"""
        return _cphd.COD___eq__(self, other)


    def __ne__(self, other: 'COD') -> "bool":
        """__ne__(COD self, COD other) -> bool"""
        return _cphd.COD___ne__(self, other)

    __swig_setmethods__["identifier"] = _cphd.COD_identifier_set
    __swig_getmethods__["identifier"] = _cphd.COD_identifier_get
    if _newclass:
        identifier = _swig_property(_cphd.COD_identifier_get, _cphd.COD_identifier_set)
    __swig_setmethods__["codTimePoly"] = _cphd.COD_codTimePoly_set
    __swig_getmethods__["codTimePoly"] = _cphd.COD_codTimePoly_get
    if _newclass:
        codTimePoly = _swig_property(_cphd.COD_codTimePoly_get, _cphd.COD_codTimePoly_set)
    __swig_destroy__ = _cphd.delete_COD
    __del__ = lambda self: None
COD_swigregister = _cphd.COD_swigregister
COD_swigregister(COD)

class Dwell(_object):
    """Proxy of C++ cphd::Dwell class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Dwell, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Dwell, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::Dwell self) -> Dwell"""
        this = _cphd.new_Dwell()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'Dwell') -> "bool":
        """__eq__(Dwell self, Dwell other) -> bool"""
        return _cphd.Dwell___eq__(self, other)


    def __ne__(self, other: 'Dwell') -> "bool":
        """__ne__(Dwell self, Dwell other) -> bool"""
        return _cphd.Dwell___ne__(self, other)

    __swig_setmethods__["cod"] = _cphd.Dwell_cod_set
    __swig_getmethods__["cod"] = _cphd.Dwell_cod_get
    if _newclass:
        cod = _swig_property(_cphd.Dwell_cod_get, _cphd.Dwell_cod_set)
    __swig_setmethods__["dtime"] = _cphd.Dwell_dtime_set
    __swig_getmethods__["dtime"] = _cphd.Dwell_dtime_get
    if _newclass:
        dtime = _swig_property(_cphd.Dwell_dtime_get, _cphd.Dwell_dtime_set)
    __swig_destroy__ = _cphd.delete_Dwell
    __del__ = lambda self: None
Dwell_swigregister = _cphd.Dwell_swigregister
Dwell_swigregister(Dwell)

class ParameterType(_object):
    """Proxy of C++ cphd::ParameterType class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParameterType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParameterType, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::ParameterType self) -> ParameterType"""
        this = _cphd.new_ParameterType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'ParameterType') -> "bool":
        """__eq__(ParameterType self, ParameterType other) -> bool"""
        return _cphd.ParameterType___eq__(self, other)


    def __ne__(self, other: 'ParameterType') -> "bool":
        """__ne__(ParameterType self, ParameterType other) -> bool"""
        return _cphd.ParameterType___ne__(self, other)

    __swig_setmethods__["identifier"] = _cphd.ParameterType_identifier_set
    __swig_getmethods__["identifier"] = _cphd.ParameterType_identifier_get
    if _newclass:
        identifier = _swig_property(_cphd.ParameterType_identifier_get, _cphd.ParameterType_identifier_set)
    __swig_setmethods__["freqCenter"] = _cphd.ParameterType_freqCenter_set
    __swig_getmethods__["freqCenter"] = _cphd.ParameterType_freqCenter_get
    if _newclass:
        freqCenter = _swig_property(_cphd.ParameterType_freqCenter_get, _cphd.ParameterType_freqCenter_set)
    __swig_setmethods__["lfmRate"] = _cphd.ParameterType_lfmRate_set
    __swig_getmethods__["lfmRate"] = _cphd.ParameterType_lfmRate_get
    if _newclass:
        lfmRate = _swig_property(_cphd.ParameterType_lfmRate_get, _cphd.ParameterType_lfmRate_set)
    __swig_setmethods__["polarization"] = _cphd.ParameterType_polarization_set
    __swig_getmethods__["polarization"] = _cphd.ParameterType_polarization_get
    if _newclass:
        polarization = _swig_property(_cphd.ParameterType_polarization_get, _cphd.ParameterType_polarization_set)
    __swig_destroy__ = _cphd.delete_ParameterType
    __del__ = lambda self: None
ParameterType_swigregister = _cphd.ParameterType_swigregister
ParameterType_swigregister(ParameterType)

class TxWFParameters(ParameterType):
    """Proxy of C++ cphd::TxWFParameters class."""

    __swig_setmethods__ = {}
    for _s in [ParameterType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TxWFParameters, name, value)
    __swig_getmethods__ = {}
    for _s in [ParameterType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TxWFParameters, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::TxWFParameters self) -> TxWFParameters"""
        this = _cphd.new_TxWFParameters()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'TxWFParameters') -> "bool":
        """__eq__(TxWFParameters self, TxWFParameters other) -> bool"""
        return _cphd.TxWFParameters___eq__(self, other)


    def __ne__(self, other: 'TxWFParameters') -> "bool":
        """__ne__(TxWFParameters self, TxWFParameters other) -> bool"""
        return _cphd.TxWFParameters___ne__(self, other)

    __swig_setmethods__["pulseLength"] = _cphd.TxWFParameters_pulseLength_set
    __swig_getmethods__["pulseLength"] = _cphd.TxWFParameters_pulseLength_get
    if _newclass:
        pulseLength = _swig_property(_cphd.TxWFParameters_pulseLength_get, _cphd.TxWFParameters_pulseLength_set)
    __swig_setmethods__["rfBandwidth"] = _cphd.TxWFParameters_rfBandwidth_set
    __swig_getmethods__["rfBandwidth"] = _cphd.TxWFParameters_rfBandwidth_get
    if _newclass:
        rfBandwidth = _swig_property(_cphd.TxWFParameters_rfBandwidth_get, _cphd.TxWFParameters_rfBandwidth_set)
    __swig_setmethods__["power"] = _cphd.TxWFParameters_power_set
    __swig_getmethods__["power"] = _cphd.TxWFParameters_power_get
    if _newclass:
        power = _swig_property(_cphd.TxWFParameters_power_get, _cphd.TxWFParameters_power_set)
    __swig_destroy__ = _cphd.delete_TxWFParameters
    __del__ = lambda self: None
TxWFParameters_swigregister = _cphd.TxWFParameters_swigregister
TxWFParameters_swigregister(TxWFParameters)

class RcvParameters(ParameterType):
    """Proxy of C++ cphd::RcvParameters class."""

    __swig_setmethods__ = {}
    for _s in [ParameterType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RcvParameters, name, value)
    __swig_getmethods__ = {}
    for _s in [ParameterType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RcvParameters, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::RcvParameters self) -> RcvParameters"""
        this = _cphd.new_RcvParameters()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'RcvParameters') -> "bool":
        """__eq__(RcvParameters self, RcvParameters other) -> bool"""
        return _cphd.RcvParameters___eq__(self, other)


    def __ne__(self, other: 'RcvParameters') -> "bool":
        """__ne__(RcvParameters self, RcvParameters other) -> bool"""
        return _cphd.RcvParameters___ne__(self, other)

    __swig_setmethods__["windowLength"] = _cphd.RcvParameters_windowLength_set
    __swig_getmethods__["windowLength"] = _cphd.RcvParameters_windowLength_get
    if _newclass:
        windowLength = _swig_property(_cphd.RcvParameters_windowLength_get, _cphd.RcvParameters_windowLength_set)
    __swig_setmethods__["sampleRate"] = _cphd.RcvParameters_sampleRate_set
    __swig_getmethods__["sampleRate"] = _cphd.RcvParameters_sampleRate_get
    if _newclass:
        sampleRate = _swig_property(_cphd.RcvParameters_sampleRate_get, _cphd.RcvParameters_sampleRate_set)
    __swig_setmethods__["ifFilterBW"] = _cphd.RcvParameters_ifFilterBW_set
    __swig_getmethods__["ifFilterBW"] = _cphd.RcvParameters_ifFilterBW_get
    if _newclass:
        ifFilterBW = _swig_property(_cphd.RcvParameters_ifFilterBW_get, _cphd.RcvParameters_ifFilterBW_set)
    __swig_setmethods__["pathGain"] = _cphd.RcvParameters_pathGain_set
    __swig_getmethods__["pathGain"] = _cphd.RcvParameters_pathGain_get
    if _newclass:
        pathGain = _swig_property(_cphd.RcvParameters_pathGain_get, _cphd.RcvParameters_pathGain_set)
    __swig_destroy__ = _cphd.delete_RcvParameters
    __del__ = lambda self: None
RcvParameters_swigregister = _cphd.RcvParameters_swigregister
RcvParameters_swigregister(RcvParameters)

class TxRcv(_object):
    """Proxy of C++ cphd::TxRcv class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TxRcv, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TxRcv, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::TxRcv self) -> TxRcv"""
        this = _cphd.new_TxRcv()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'TxRcv') -> "bool":
        """__eq__(TxRcv self, TxRcv other) -> bool"""
        return _cphd.TxRcv___eq__(self, other)


    def __ne__(self, other: 'TxRcv') -> "bool":
        """__ne__(TxRcv self, TxRcv other) -> bool"""
        return _cphd.TxRcv___ne__(self, other)

    __swig_setmethods__["txWFParameters"] = _cphd.TxRcv_txWFParameters_set
    __swig_getmethods__["txWFParameters"] = _cphd.TxRcv_txWFParameters_get
    if _newclass:
        txWFParameters = _swig_property(_cphd.TxRcv_txWFParameters_get, _cphd.TxRcv_txWFParameters_set)
    __swig_setmethods__["rcvParameters"] = _cphd.TxRcv_rcvParameters_set
    __swig_getmethods__["rcvParameters"] = _cphd.TxRcv_rcvParameters_get
    if _newclass:
        rcvParameters = _swig_property(_cphd.TxRcv_rcvParameters_get, _cphd.TxRcv_rcvParameters_set)
    __swig_destroy__ = _cphd.delete_TxRcv
    __del__ = lambda self: None
TxRcv_swigregister = _cphd.TxRcv_swigregister
TxRcv_swigregister(TxRcv)

class PVPType(_object):
    """Proxy of C++ cphd::PVPType class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PVPType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PVPType, name)
    __repr__ = _swig_repr
    WORD_BYTE_SIZE = _cphd.PVPType_WORD_BYTE_SIZE

    def __init__(self):
        """__init__(cphd::PVPType self) -> PVPType"""
        this = _cphd.new_PVPType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'PVPType') -> "bool":
        """__eq__(PVPType self, PVPType other) -> bool"""
        return _cphd.PVPType___eq__(self, other)


    def __ne__(self, other: 'PVPType') -> "bool":
        """__ne__(PVPType self, PVPType other) -> bool"""
        return _cphd.PVPType___ne__(self, other)


    def setOffset(self, offset: 'size_t') -> "void":
        """setOffset(PVPType self, size_t offset)"""
        return _cphd.PVPType_setOffset(self, offset)


    def setSize(self, size: 'size_t') -> "void":
        """setSize(PVPType self, size_t size)"""
        return _cphd.PVPType_setSize(self, size)


    def setFormat(self, format: 'std::string const &') -> "void":
        """setFormat(PVPType self, std::string const & format)"""
        return _cphd.PVPType_setFormat(self, format)


    def getSize(self) -> "size_t":
        """getSize(PVPType self) -> size_t"""
        return _cphd.PVPType_getSize(self)


    def getByteSize(self) -> "size_t":
        """getByteSize(PVPType self) -> size_t"""
        return _cphd.PVPType_getByteSize(self)


    def getOffset(self) -> "size_t":
        """getOffset(PVPType self) -> size_t"""
        return _cphd.PVPType_getOffset(self)


    def getByteOffset(self) -> "size_t":
        """getByteOffset(PVPType self) -> size_t"""
        return _cphd.PVPType_getByteOffset(self)


    def getFormat(self) -> "std::string":
        """getFormat(PVPType self) -> std::string"""
        return _cphd.PVPType_getFormat(self)

    __swig_destroy__ = _cphd.delete_PVPType
    __del__ = lambda self: None
PVPType_swigregister = _cphd.PVPType_swigregister
PVPType_swigregister(PVPType)

class APVPType(PVPType):
    """Proxy of C++ cphd::APVPType class."""

    __swig_setmethods__ = {}
    for _s in [PVPType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, APVPType, name, value)
    __swig_getmethods__ = {}
    for _s in [PVPType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, APVPType, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::APVPType self) -> APVPType"""
        this = _cphd.new_APVPType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'APVPType') -> "bool":
        """__eq__(APVPType self, APVPType other) -> bool"""
        return _cphd.APVPType___eq__(self, other)


    def __ne__(self, other: 'APVPType') -> "bool":
        """__ne__(APVPType self, APVPType other) -> bool"""
        return _cphd.APVPType___ne__(self, other)


    def setData(self, size: 'size_t', offset: 'size_t', format: 'std::string const &', name: 'std::string const &') -> "void":
        """setData(APVPType self, size_t size, size_t offset, std::string const & format, std::string const & name)"""
        return _cphd.APVPType_setData(self, size, offset, format, name)


    def getName(self) -> "std::string":
        """getName(APVPType self) -> std::string"""
        return _cphd.APVPType_getName(self)

    __swig_destroy__ = _cphd.delete_APVPType
    __del__ = lambda self: None
APVPType_swigregister = _cphd.APVPType_swigregister
APVPType_swigregister(APVPType)

class Pvp(_object):
    """Proxy of C++ cphd::Pvp class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pvp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Pvp, name)
    __repr__ = _swig_repr
    __swig_setmethods__["txTime"] = _cphd.Pvp_txTime_set
    __swig_getmethods__["txTime"] = _cphd.Pvp_txTime_get
    if _newclass:
        txTime = _swig_property(_cphd.Pvp_txTime_get, _cphd.Pvp_txTime_set)
    __swig_setmethods__["txPos"] = _cphd.Pvp_txPos_set
    __swig_getmethods__["txPos"] = _cphd.Pvp_txPos_get
    if _newclass:
        txPos = _swig_property(_cphd.Pvp_txPos_get, _cphd.Pvp_txPos_set)
    __swig_setmethods__["txVel"] = _cphd.Pvp_txVel_set
    __swig_getmethods__["txVel"] = _cphd.Pvp_txVel_get
    if _newclass:
        txVel = _swig_property(_cphd.Pvp_txVel_get, _cphd.Pvp_txVel_set)
    __swig_setmethods__["rcvTime"] = _cphd.Pvp_rcvTime_set
    __swig_getmethods__["rcvTime"] = _cphd.Pvp_rcvTime_get
    if _newclass:
        rcvTime = _swig_property(_cphd.Pvp_rcvTime_get, _cphd.Pvp_rcvTime_set)
    __swig_setmethods__["rcvPos"] = _cphd.Pvp_rcvPos_set
    __swig_getmethods__["rcvPos"] = _cphd.Pvp_rcvPos_get
    if _newclass:
        rcvPos = _swig_property(_cphd.Pvp_rcvPos_get, _cphd.Pvp_rcvPos_set)
    __swig_setmethods__["rcvVel"] = _cphd.Pvp_rcvVel_set
    __swig_getmethods__["rcvVel"] = _cphd.Pvp_rcvVel_get
    if _newclass:
        rcvVel = _swig_property(_cphd.Pvp_rcvVel_get, _cphd.Pvp_rcvVel_set)
    __swig_setmethods__["srpPos"] = _cphd.Pvp_srpPos_set
    __swig_getmethods__["srpPos"] = _cphd.Pvp_srpPos_get
    if _newclass:
        srpPos = _swig_property(_cphd.Pvp_srpPos_get, _cphd.Pvp_srpPos_set)
    __swig_setmethods__["ampSF"] = _cphd.Pvp_ampSF_set
    __swig_getmethods__["ampSF"] = _cphd.Pvp_ampSF_get
    if _newclass:
        ampSF = _swig_property(_cphd.Pvp_ampSF_get, _cphd.Pvp_ampSF_set)
    __swig_setmethods__["aFDOP"] = _cphd.Pvp_aFDOP_set
    __swig_getmethods__["aFDOP"] = _cphd.Pvp_aFDOP_get
    if _newclass:
        aFDOP = _swig_property(_cphd.Pvp_aFDOP_get, _cphd.Pvp_aFDOP_set)
    __swig_setmethods__["aFRR1"] = _cphd.Pvp_aFRR1_set
    __swig_getmethods__["aFRR1"] = _cphd.Pvp_aFRR1_get
    if _newclass:
        aFRR1 = _swig_property(_cphd.Pvp_aFRR1_get, _cphd.Pvp_aFRR1_set)
    __swig_setmethods__["aFRR2"] = _cphd.Pvp_aFRR2_set
    __swig_getmethods__["aFRR2"] = _cphd.Pvp_aFRR2_get
    if _newclass:
        aFRR2 = _swig_property(_cphd.Pvp_aFRR2_get, _cphd.Pvp_aFRR2_set)
    __swig_setmethods__["fx1"] = _cphd.Pvp_fx1_set
    __swig_getmethods__["fx1"] = _cphd.Pvp_fx1_get
    if _newclass:
        fx1 = _swig_property(_cphd.Pvp_fx1_get, _cphd.Pvp_fx1_set)
    __swig_setmethods__["fx2"] = _cphd.Pvp_fx2_set
    __swig_getmethods__["fx2"] = _cphd.Pvp_fx2_get
    if _newclass:
        fx2 = _swig_property(_cphd.Pvp_fx2_get, _cphd.Pvp_fx2_set)
    __swig_setmethods__["fxN1"] = _cphd.Pvp_fxN1_set
    __swig_getmethods__["fxN1"] = _cphd.Pvp_fxN1_get
    if _newclass:
        fxN1 = _swig_property(_cphd.Pvp_fxN1_get, _cphd.Pvp_fxN1_set)
    __swig_setmethods__["fxN2"] = _cphd.Pvp_fxN2_set
    __swig_getmethods__["fxN2"] = _cphd.Pvp_fxN2_get
    if _newclass:
        fxN2 = _swig_property(_cphd.Pvp_fxN2_get, _cphd.Pvp_fxN2_set)
    __swig_setmethods__["toa1"] = _cphd.Pvp_toa1_set
    __swig_getmethods__["toa1"] = _cphd.Pvp_toa1_get
    if _newclass:
        toa1 = _swig_property(_cphd.Pvp_toa1_get, _cphd.Pvp_toa1_set)
    __swig_setmethods__["toa2"] = _cphd.Pvp_toa2_set
    __swig_getmethods__["toa2"] = _cphd.Pvp_toa2_get
    if _newclass:
        toa2 = _swig_property(_cphd.Pvp_toa2_get, _cphd.Pvp_toa2_set)
    __swig_setmethods__["toaE1"] = _cphd.Pvp_toaE1_set
    __swig_getmethods__["toaE1"] = _cphd.Pvp_toaE1_get
    if _newclass:
        toaE1 = _swig_property(_cphd.Pvp_toaE1_get, _cphd.Pvp_toaE1_set)
    __swig_setmethods__["toaE2"] = _cphd.Pvp_toaE2_set
    __swig_getmethods__["toaE2"] = _cphd.Pvp_toaE2_get
    if _newclass:
        toaE2 = _swig_property(_cphd.Pvp_toaE2_get, _cphd.Pvp_toaE2_set)
    __swig_setmethods__["tdTropoSRP"] = _cphd.Pvp_tdTropoSRP_set
    __swig_getmethods__["tdTropoSRP"] = _cphd.Pvp_tdTropoSRP_get
    if _newclass:
        tdTropoSRP = _swig_property(_cphd.Pvp_tdTropoSRP_get, _cphd.Pvp_tdTropoSRP_set)
    __swig_setmethods__["tdIonoSRP"] = _cphd.Pvp_tdIonoSRP_set
    __swig_getmethods__["tdIonoSRP"] = _cphd.Pvp_tdIonoSRP_get
    if _newclass:
        tdIonoSRP = _swig_property(_cphd.Pvp_tdIonoSRP_get, _cphd.Pvp_tdIonoSRP_set)
    __swig_setmethods__["sc0"] = _cphd.Pvp_sc0_set
    __swig_getmethods__["sc0"] = _cphd.Pvp_sc0_get
    if _newclass:
        sc0 = _swig_property(_cphd.Pvp_sc0_get, _cphd.Pvp_sc0_set)
    __swig_setmethods__["scss"] = _cphd.Pvp_scss_set
    __swig_getmethods__["scss"] = _cphd.Pvp_scss_get
    if _newclass:
        scss = _swig_property(_cphd.Pvp_scss_get, _cphd.Pvp_scss_set)
    __swig_setmethods__["signal"] = _cphd.Pvp_signal_set
    __swig_getmethods__["signal"] = _cphd.Pvp_signal_get
    if _newclass:
        signal = _swig_property(_cphd.Pvp_signal_get, _cphd.Pvp_signal_set)
    __swig_setmethods__["addedPVP"] = _cphd.Pvp_addedPVP_set
    __swig_getmethods__["addedPVP"] = _cphd.Pvp_addedPVP_get
    if _newclass:
        addedPVP = _swig_property(_cphd.Pvp_addedPVP_get, _cphd.Pvp_addedPVP_set)

    def __init__(self):
        """__init__(cphd::Pvp self) -> Pvp"""
        this = _cphd.new_Pvp()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'Pvp') -> "bool":
        """__eq__(Pvp self, Pvp other) -> bool"""
        return _cphd.Pvp___eq__(self, other)


    def __ne__(self, other: 'Pvp') -> "bool":
        """__ne__(Pvp self, Pvp other) -> bool"""
        return _cphd.Pvp___ne__(self, other)


    def getReqSetSize(self) -> "size_t":
        """getReqSetSize(Pvp self) -> size_t"""
        return _cphd.Pvp_getReqSetSize(self)


    def sizeInBytes(self) -> "size_t":
        """sizeInBytes(Pvp self) -> size_t"""
        return _cphd.Pvp_sizeInBytes(self)


    def setOffset(self, offset: 'size_t', param: 'PVPType') -> "void":
        """setOffset(Pvp self, size_t offset, PVPType param)"""
        return _cphd.Pvp_setOffset(self, offset, param)


    def append(self, param: 'PVPType') -> "void":
        """append(Pvp self, PVPType param)"""
        return _cphd.Pvp_append(self, param)


    def setCustomParameter(self, size: 'size_t', offset: 'size_t', format: 'std::string const &', name: 'std::string const &') -> "void":
        """setCustomParameter(Pvp self, size_t size, size_t offset, std::string const & format, std::string const & name)"""
        return _cphd.Pvp_setCustomParameter(self, size, offset, format, name)


    def appendCustomParameter(self, size: 'size_t', format: 'std::string const &', name: 'std::string const &') -> "void":
        """appendCustomParameter(Pvp self, size_t size, std::string const & format, std::string const & name)"""
        return _cphd.Pvp_appendCustomParameter(self, size, format, name)

    __swig_destroy__ = _cphd.delete_Pvp
    __del__ = lambda self: None
Pvp_swigregister = _cphd.Pvp_swigregister
Pvp_swigregister(Pvp)

class AntCoordFrame(_object):
    """Proxy of C++ cphd::AntCoordFrame class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AntCoordFrame, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AntCoordFrame, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::AntCoordFrame self) -> AntCoordFrame"""
        this = _cphd.new_AntCoordFrame()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'AntCoordFrame') -> "bool":
        """__eq__(AntCoordFrame self, AntCoordFrame other) -> bool"""
        return _cphd.AntCoordFrame___eq__(self, other)


    def __ne__(self, other: 'AntCoordFrame') -> "bool":
        """__ne__(AntCoordFrame self, AntCoordFrame other) -> bool"""
        return _cphd.AntCoordFrame___ne__(self, other)

    __swig_setmethods__["identifier"] = _cphd.AntCoordFrame_identifier_set
    __swig_getmethods__["identifier"] = _cphd.AntCoordFrame_identifier_get
    if _newclass:
        identifier = _swig_property(_cphd.AntCoordFrame_identifier_get, _cphd.AntCoordFrame_identifier_set)
    __swig_setmethods__["xAxisPoly"] = _cphd.AntCoordFrame_xAxisPoly_set
    __swig_getmethods__["xAxisPoly"] = _cphd.AntCoordFrame_xAxisPoly_get
    if _newclass:
        xAxisPoly = _swig_property(_cphd.AntCoordFrame_xAxisPoly_get, _cphd.AntCoordFrame_xAxisPoly_set)
    __swig_setmethods__["yAxisPoly"] = _cphd.AntCoordFrame_yAxisPoly_set
    __swig_getmethods__["yAxisPoly"] = _cphd.AntCoordFrame_yAxisPoly_get
    if _newclass:
        yAxisPoly = _swig_property(_cphd.AntCoordFrame_yAxisPoly_get, _cphd.AntCoordFrame_yAxisPoly_set)
    __swig_destroy__ = _cphd.delete_AntCoordFrame
    __del__ = lambda self: None
AntCoordFrame_swigregister = _cphd.AntCoordFrame_swigregister
AntCoordFrame_swigregister(AntCoordFrame)

class AntPhaseCenter(_object):
    """Proxy of C++ cphd::AntPhaseCenter class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AntPhaseCenter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AntPhaseCenter, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::AntPhaseCenter self) -> AntPhaseCenter"""
        this = _cphd.new_AntPhaseCenter()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'AntPhaseCenter') -> "bool":
        """__eq__(AntPhaseCenter self, AntPhaseCenter other) -> bool"""
        return _cphd.AntPhaseCenter___eq__(self, other)


    def __ne__(self, other: 'AntPhaseCenter') -> "bool":
        """__ne__(AntPhaseCenter self, AntPhaseCenter other) -> bool"""
        return _cphd.AntPhaseCenter___ne__(self, other)

    __swig_setmethods__["identifier"] = _cphd.AntPhaseCenter_identifier_set
    __swig_getmethods__["identifier"] = _cphd.AntPhaseCenter_identifier_get
    if _newclass:
        identifier = _swig_property(_cphd.AntPhaseCenter_identifier_get, _cphd.AntPhaseCenter_identifier_set)
    __swig_setmethods__["acfId"] = _cphd.AntPhaseCenter_acfId_set
    __swig_getmethods__["acfId"] = _cphd.AntPhaseCenter_acfId_get
    if _newclass:
        acfId = _swig_property(_cphd.AntPhaseCenter_acfId_get, _cphd.AntPhaseCenter_acfId_set)
    __swig_setmethods__["apcXYZ"] = _cphd.AntPhaseCenter_apcXYZ_set
    __swig_getmethods__["apcXYZ"] = _cphd.AntPhaseCenter_apcXYZ_get
    if _newclass:
        apcXYZ = _swig_property(_cphd.AntPhaseCenter_apcXYZ_get, _cphd.AntPhaseCenter_apcXYZ_set)
    __swig_destroy__ = _cphd.delete_AntPhaseCenter
    __del__ = lambda self: None
AntPhaseCenter_swigregister = _cphd.AntPhaseCenter_swigregister
AntPhaseCenter_swigregister(AntPhaseCenter)

class AntPattern(_object):
    """Proxy of C++ cphd::AntPattern class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AntPattern, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AntPattern, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::AntPattern self) -> AntPattern"""
        this = _cphd.new_AntPattern()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'AntPattern') -> "bool":
        """__eq__(AntPattern self, AntPattern other) -> bool"""
        return _cphd.AntPattern___eq__(self, other)


    def __ne__(self, other: 'AntPattern') -> "bool":
        """__ne__(AntPattern self, AntPattern other) -> bool"""
        return _cphd.AntPattern___ne__(self, other)

    __swig_setmethods__["identifier"] = _cphd.AntPattern_identifier_set
    __swig_getmethods__["identifier"] = _cphd.AntPattern_identifier_get
    if _newclass:
        identifier = _swig_property(_cphd.AntPattern_identifier_get, _cphd.AntPattern_identifier_set)
    __swig_setmethods__["freqZero"] = _cphd.AntPattern_freqZero_set
    __swig_getmethods__["freqZero"] = _cphd.AntPattern_freqZero_get
    if _newclass:
        freqZero = _swig_property(_cphd.AntPattern_freqZero_get, _cphd.AntPattern_freqZero_set)
    __swig_setmethods__["gainZero"] = _cphd.AntPattern_gainZero_set
    __swig_getmethods__["gainZero"] = _cphd.AntPattern_gainZero_get
    if _newclass:
        gainZero = _swig_property(_cphd.AntPattern_gainZero_get, _cphd.AntPattern_gainZero_set)
    __swig_setmethods__["ebFreqShift"] = _cphd.AntPattern_ebFreqShift_set
    __swig_getmethods__["ebFreqShift"] = _cphd.AntPattern_ebFreqShift_get
    if _newclass:
        ebFreqShift = _swig_property(_cphd.AntPattern_ebFreqShift_get, _cphd.AntPattern_ebFreqShift_set)
    __swig_setmethods__["mlFreqDilation"] = _cphd.AntPattern_mlFreqDilation_set
    __swig_getmethods__["mlFreqDilation"] = _cphd.AntPattern_mlFreqDilation_get
    if _newclass:
        mlFreqDilation = _swig_property(_cphd.AntPattern_mlFreqDilation_get, _cphd.AntPattern_mlFreqDilation_set)
    __swig_setmethods__["gainBSPoly"] = _cphd.AntPattern_gainBSPoly_set
    __swig_getmethods__["gainBSPoly"] = _cphd.AntPattern_gainBSPoly_get
    if _newclass:
        gainBSPoly = _swig_property(_cphd.AntPattern_gainBSPoly_get, _cphd.AntPattern_gainBSPoly_set)
    __swig_setmethods__["eb"] = _cphd.AntPattern_eb_set
    __swig_getmethods__["eb"] = _cphd.AntPattern_eb_get
    if _newclass:
        eb = _swig_property(_cphd.AntPattern_eb_get, _cphd.AntPattern_eb_set)
    __swig_setmethods__["array"] = _cphd.AntPattern_array_set
    __swig_getmethods__["array"] = _cphd.AntPattern_array_get
    if _newclass:
        array = _swig_property(_cphd.AntPattern_array_get, _cphd.AntPattern_array_set)
    __swig_setmethods__["element"] = _cphd.AntPattern_element_set
    __swig_getmethods__["element"] = _cphd.AntPattern_element_get
    if _newclass:
        element = _swig_property(_cphd.AntPattern_element_get, _cphd.AntPattern_element_set)
    __swig_setmethods__["gainPhaseArray"] = _cphd.AntPattern_gainPhaseArray_set
    __swig_getmethods__["gainPhaseArray"] = _cphd.AntPattern_gainPhaseArray_get
    if _newclass:
        gainPhaseArray = _swig_property(_cphd.AntPattern_gainPhaseArray_get, _cphd.AntPattern_gainPhaseArray_set)
    __swig_destroy__ = _cphd.delete_AntPattern
    __del__ = lambda self: None
AntPattern_swigregister = _cphd.AntPattern_swigregister
AntPattern_swigregister(AntPattern)

class GainPhaseArray(_object):
    """Proxy of C++ cphd::AntPattern::GainPhaseArray class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GainPhaseArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GainPhaseArray, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::AntPattern::GainPhaseArray self) -> GainPhaseArray"""
        this = _cphd.new_GainPhaseArray()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'GainPhaseArray') -> "bool":
        """__eq__(GainPhaseArray self, GainPhaseArray other) -> bool"""
        return _cphd.GainPhaseArray___eq__(self, other)


    def __ne__(self, other: 'GainPhaseArray') -> "bool":
        """__ne__(GainPhaseArray self, GainPhaseArray other) -> bool"""
        return _cphd.GainPhaseArray___ne__(self, other)

    __swig_setmethods__["freq"] = _cphd.GainPhaseArray_freq_set
    __swig_getmethods__["freq"] = _cphd.GainPhaseArray_freq_get
    if _newclass:
        freq = _swig_property(_cphd.GainPhaseArray_freq_get, _cphd.GainPhaseArray_freq_set)
    __swig_setmethods__["arrayId"] = _cphd.GainPhaseArray_arrayId_set
    __swig_getmethods__["arrayId"] = _cphd.GainPhaseArray_arrayId_get
    if _newclass:
        arrayId = _swig_property(_cphd.GainPhaseArray_arrayId_get, _cphd.GainPhaseArray_arrayId_set)
    __swig_setmethods__["elementId"] = _cphd.GainPhaseArray_elementId_set
    __swig_getmethods__["elementId"] = _cphd.GainPhaseArray_elementId_get
    if _newclass:
        elementId = _swig_property(_cphd.GainPhaseArray_elementId_get, _cphd.GainPhaseArray_elementId_set)
    __swig_destroy__ = _cphd.delete_GainPhaseArray
    __del__ = lambda self: None
GainPhaseArray_swigregister = _cphd.GainPhaseArray_swigregister
GainPhaseArray_swigregister(GainPhaseArray)

class CphdAntenna(_object):
    """Proxy of C++ cphd::Antenna class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CphdAntenna, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CphdAntenna, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::Antenna self) -> CphdAntenna"""
        this = _cphd.new_CphdAntenna()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'CphdAntenna') -> "bool":
        """__eq__(CphdAntenna self, CphdAntenna other) -> bool"""
        return _cphd.CphdAntenna___eq__(self, other)


    def __ne__(self, other: 'CphdAntenna') -> "bool":
        """__ne__(CphdAntenna self, CphdAntenna other) -> bool"""
        return _cphd.CphdAntenna___ne__(self, other)

    __swig_setmethods__["antCoordFrame"] = _cphd.CphdAntenna_antCoordFrame_set
    __swig_getmethods__["antCoordFrame"] = _cphd.CphdAntenna_antCoordFrame_get
    if _newclass:
        antCoordFrame = _swig_property(_cphd.CphdAntenna_antCoordFrame_get, _cphd.CphdAntenna_antCoordFrame_set)
    __swig_setmethods__["antPhaseCenter"] = _cphd.CphdAntenna_antPhaseCenter_set
    __swig_getmethods__["antPhaseCenter"] = _cphd.CphdAntenna_antPhaseCenter_get
    if _newclass:
        antPhaseCenter = _swig_property(_cphd.CphdAntenna_antPhaseCenter_get, _cphd.CphdAntenna_antPhaseCenter_set)
    __swig_setmethods__["antPattern"] = _cphd.CphdAntenna_antPattern_set
    __swig_getmethods__["antPattern"] = _cphd.CphdAntenna_antPattern_get
    if _newclass:
        antPattern = _swig_property(_cphd.CphdAntenna_antPattern_get, _cphd.CphdAntenna_antPattern_set)
    __swig_destroy__ = _cphd.delete_CphdAntenna
    __del__ = lambda self: None
CphdAntenna_swigregister = _cphd.CphdAntenna_swigregister
CphdAntenna_swigregister(CphdAntenna)

class Metadata(MetadataBase):
    """Proxy of C++ cphd::Metadata class."""

    __swig_setmethods__ = {}
    for _s in [MetadataBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Metadata, name, value)
    __swig_getmethods__ = {}
    for _s in [MetadataBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Metadata, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::Metadata self) -> Metadata"""
        this = _cphd.new_Metadata()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getNumChannels(self) -> "size_t":
        """getNumChannels(Metadata self) -> size_t"""
        return _cphd.Metadata_getNumChannels(self)


    def getNumVectors(self, channel: 'size_t') -> "size_t":
        """getNumVectors(Metadata self, size_t channel) -> size_t"""
        return _cphd.Metadata_getNumVectors(self, channel)


    def getNumSamples(self, channel: 'size_t') -> "size_t":
        """getNumSamples(Metadata self, size_t channel) -> size_t"""
        return _cphd.Metadata_getNumSamples(self, channel)


    def getNumBytesPerSample(self) -> "size_t":
        """getNumBytesPerSample(Metadata self) -> size_t"""
        return _cphd.Metadata_getNumBytesPerSample(self)


    def getCompressedSignalSize(self, channel: 'size_t') -> "size_t":
        """getCompressedSignalSize(Metadata self, size_t channel) -> size_t"""
        return _cphd.Metadata_getCompressedSignalSize(self, channel)


    def isCompressed(self) -> "bool":
        """isCompressed(Metadata self) -> bool"""
        return _cphd.Metadata_isCompressed(self)


    def getDomainType(self) -> "cphd::DomainType":
        """getDomainType(Metadata self) -> DomainType"""
        return _cphd.Metadata_getDomainType(self)


    def getVersion(self) -> "std::string":
        """getVersion(Metadata self) -> std::string"""
        return _cphd.Metadata_getVersion(self)


    def setVersion(self, version: 'std::string const &') -> "void":
        """setVersion(Metadata self, std::string const & version)"""
        return _cphd.Metadata_setVersion(self, version)

    __swig_setmethods__["collectionID"] = _cphd.Metadata_collectionID_set
    __swig_getmethods__["collectionID"] = _cphd.Metadata_collectionID_get
    if _newclass:
        collectionID = _swig_property(_cphd.Metadata_collectionID_get, _cphd.Metadata_collectionID_set)
    __swig_setmethods__["_global"] = _cphd.Metadata__global_set
    __swig_getmethods__["_global"] = _cphd.Metadata__global_get
    if _newclass:
        _global = _swig_property(_cphd.Metadata__global_get, _cphd.Metadata__global_set)
    __swig_setmethods__["sceneCoordinates"] = _cphd.Metadata_sceneCoordinates_set
    __swig_getmethods__["sceneCoordinates"] = _cphd.Metadata_sceneCoordinates_get
    if _newclass:
        sceneCoordinates = _swig_property(_cphd.Metadata_sceneCoordinates_get, _cphd.Metadata_sceneCoordinates_set)
    __swig_setmethods__["data"] = _cphd.Metadata_data_set
    __swig_getmethods__["data"] = _cphd.Metadata_data_get
    if _newclass:
        data = _swig_property(_cphd.Metadata_data_get, _cphd.Metadata_data_set)
    __swig_setmethods__["channel"] = _cphd.Metadata_channel_set
    __swig_getmethods__["channel"] = _cphd.Metadata_channel_get
    if _newclass:
        channel = _swig_property(_cphd.Metadata_channel_get, _cphd.Metadata_channel_set)
    __swig_setmethods__["pvp"] = _cphd.Metadata_pvp_set
    __swig_getmethods__["pvp"] = _cphd.Metadata_pvp_get
    if _newclass:
        pvp = _swig_property(_cphd.Metadata_pvp_get, _cphd.Metadata_pvp_set)
    __swig_setmethods__["dwell"] = _cphd.Metadata_dwell_set
    __swig_getmethods__["dwell"] = _cphd.Metadata_dwell_get
    if _newclass:
        dwell = _swig_property(_cphd.Metadata_dwell_get, _cphd.Metadata_dwell_set)
    __swig_setmethods__["referenceGeometry"] = _cphd.Metadata_referenceGeometry_set
    __swig_getmethods__["referenceGeometry"] = _cphd.Metadata_referenceGeometry_get
    if _newclass:
        referenceGeometry = _swig_property(_cphd.Metadata_referenceGeometry_get, _cphd.Metadata_referenceGeometry_set)
    __swig_setmethods__["supportArray"] = _cphd.Metadata_supportArray_set
    __swig_getmethods__["supportArray"] = _cphd.Metadata_supportArray_get
    if _newclass:
        supportArray = _swig_property(_cphd.Metadata_supportArray_get, _cphd.Metadata_supportArray_set)
    __swig_setmethods__["antenna"] = _cphd.Metadata_antenna_set
    __swig_getmethods__["antenna"] = _cphd.Metadata_antenna_get
    if _newclass:
        antenna = _swig_property(_cphd.Metadata_antenna_get, _cphd.Metadata_antenna_set)
    __swig_setmethods__["txRcv"] = _cphd.Metadata_txRcv_set
    __swig_getmethods__["txRcv"] = _cphd.Metadata_txRcv_get
    if _newclass:
        txRcv = _swig_property(_cphd.Metadata_txRcv_get, _cphd.Metadata_txRcv_set)
    __swig_setmethods__["errorParameters"] = _cphd.Metadata_errorParameters_set
    __swig_getmethods__["errorParameters"] = _cphd.Metadata_errorParameters_get
    if _newclass:
        errorParameters = _swig_property(_cphd.Metadata_errorParameters_get, _cphd.Metadata_errorParameters_set)
    __swig_setmethods__["productInfo"] = _cphd.Metadata_productInfo_set
    __swig_getmethods__["productInfo"] = _cphd.Metadata_productInfo_get
    if _newclass:
        productInfo = _swig_property(_cphd.Metadata_productInfo_get, _cphd.Metadata_productInfo_set)
    __swig_setmethods__["geoInfo"] = _cphd.Metadata_geoInfo_set
    __swig_getmethods__["geoInfo"] = _cphd.Metadata_geoInfo_get
    if _newclass:
        geoInfo = _swig_property(_cphd.Metadata_geoInfo_get, _cphd.Metadata_geoInfo_set)
    __swig_setmethods__["matchInfo"] = _cphd.Metadata_matchInfo_set
    __swig_getmethods__["matchInfo"] = _cphd.Metadata_matchInfo_get
    if _newclass:
        matchInfo = _swig_property(_cphd.Metadata_matchInfo_get, _cphd.Metadata_matchInfo_set)

    def __eq__(self, other: 'Metadata') -> "bool":
        """__eq__(Metadata self, Metadata other) -> bool"""
        return _cphd.Metadata___eq__(self, other)


    def __ne__(self, other: 'Metadata') -> "bool":
        """__ne__(Metadata self, Metadata other) -> bool"""
        return _cphd.Metadata___ne__(self, other)


    def __str__(self) -> "std::string":
        """__str__(Metadata self) -> std::string"""
        return _cphd.Metadata___str__(self)

    __swig_destroy__ = _cphd.delete_Metadata
    __del__ = lambda self: None
Metadata_swigregister = _cphd.Metadata_swigregister
Metadata_swigregister(Metadata)


def __lshift__(*args) -> "std::ostream &":
    """
    __lshift__(std::ostream & os, Global d) -> std::ostream
    __lshift__(std::ostream & os, Timeline d) -> std::ostream
    __lshift__(std::ostream & os, FxBand d) -> std::ostream
    __lshift__(std::ostream & os, TOASwath d) -> std::ostream
    __lshift__(std::ostream & os, TropoParameters d) -> std::ostream
    __lshift__(std::ostream & os, IonoParameters d) -> std::ostream
    __lshift__(std::ostream & os, SceneCoordinates d) -> std::ostream
    __lshift__(std::ostream & os, IARP d) -> std::ostream
    __lshift__(std::ostream & os, ReferenceSurface d) -> std::ostream
    __lshift__(std::ostream & os, Planar d) -> std::ostream
    __lshift__(std::ostream & os, HAE d) -> std::ostream
    __lshift__(std::ostream & os, AreaType d) -> std::ostream
    __lshift__(std::ostream & os, ImageGrid d) -> std::ostream
    __lshift__(std::ostream & os, LineSample d) -> std::ostream
    __lshift__(std::ostream & os, ImageAreaXExtent d) -> std::ostream
    __lshift__(std::ostream & os, ImageAreaYExtent d) -> std::ostream
    __lshift__(std::ostream & os, Segment d) -> std::ostream
    __lshift__(std::ostream & os, SRP s) -> std::ostream
    __lshift__(std::ostream & os, ImagingType i) -> std::ostream
    __lshift__(std::ostream & os, Monostatic m) -> std::ostream
    __lshift__(std::ostream & os, PlatformParams p) -> std::ostream
    __lshift__(std::ostream & os, Bistatic b) -> std::ostream
    __lshift__(std::ostream & os, ReferenceGeometry r) -> std::ostream
    __lshift__(std::ostream & os, SupportArrayParameter s) -> std::ostream
    __lshift__(std::ostream & os, AdditionalSupportArray a) -> std::ostream
    __lshift__(std::ostream & os, SupportArray s) -> std::ostream
    __lshift__(std::ostream & os, PosVelError p) -> std::ostream
    __lshift__(std::ostream & os, ErrorParameters e) -> std::ostream
    __lshift__(std::ostream & os, ProductInfo p) -> std::ostream
    __lshift__(std::ostream & os, Polarization p) -> std::ostream
    __lshift__(std::ostream & os, TOAExtended t) -> std::ostream
    __lshift__(std::ostream & os, DwellTimes d) -> std::ostream
    __lshift__(std::ostream & os, TgtRefLevel t) -> std::ostream
    __lshift__(std::ostream & os, Point p) -> std::ostream
    __lshift__(std::ostream & os, FxNoiseProfile f) -> std::ostream
    __lshift__(std::ostream & os, NoiseLevel n) -> std::ostream
    __lshift__(std::ostream & os, ChannelParameter c) -> std::ostream
    __lshift__(std::ostream & os, Channel c) -> std::ostream
    __lshift__(std::ostream & os, DataSupportArray s) -> std::ostream
    __lshift__(std::ostream & os, DataChannel c) -> std::ostream
    __lshift__(std::ostream & os, Data d) -> std::ostream
    __lshift__(std::ostream & os, DwellTime d) -> std::ostream
    __lshift__(std::ostream & os, COD c) -> std::ostream
    __lshift__(std::ostream & os, Dwell d) -> std::ostream
    __lshift__(std::ostream & os, ParameterType p) -> std::ostream
    __lshift__(std::ostream & os, TxWFParameters t) -> std::ostream
    __lshift__(std::ostream & os, RcvParameters r) -> std::ostream
    __lshift__(std::ostream & os, TxRcv t) -> std::ostream
    __lshift__(std::ostream & os, PVPType p) -> std::ostream
    __lshift__(std::ostream & os, APVPType a) -> std::ostream
    __lshift__(std::ostream & os, Pvp p) -> std::ostream
    __lshift__(std::ostream & os, AntCoordFrame a) -> std::ostream
    __lshift__(std::ostream & os, AntPhaseCenter a) -> std::ostream
    __lshift__(std::ostream & os, GainPhaseArray g) -> std::ostream
    __lshift__(std::ostream & os, AntPattern a) -> std::ostream
    __lshift__(std::ostream & os, CphdAntenna a) -> std::ostream
    __lshift__(std::ostream & os, Metadata d) -> std::ostream &
    """
    return _cphd.__lshift__(*args)
class PVPBlock(_object):
    """Proxy of C++ cphd::PVPBlock class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PVPBlock, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PVPBlock, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(cphd::PVPBlock self) -> PVPBlock
        __init__(cphd::PVPBlock self, Pvp pvp, Data data) -> PVPBlock
        __init__(cphd::PVPBlock self, size_t numChannels, VectorSizeT numVectors, Pvp pvp) -> PVPBlock
        __init__(cphd::PVPBlock self, size_t numChannels, VectorSizeT numVectors, Pvp pvp, std::vector< void const *,std::allocator< void const * > > const & data) -> PVPBlock
        """
        this = _cphd.new_PVPBlock(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def verifyChannelVector(self, channel: 'size_t', vector: 'size_t') -> "void":
        """verifyChannelVector(PVPBlock self, size_t channel, size_t vector)"""
        return _cphd.PVPBlock_verifyChannelVector(self, channel, vector)


    def getTxTime(self, channel: 'size_t', set: 'size_t') -> "double":
        """getTxTime(PVPBlock self, size_t channel, size_t set) -> double"""
        return _cphd.PVPBlock_getTxTime(self, channel, set)


    def getTxPos(self, channel: 'size_t', set: 'size_t') -> "cphd::Vector3":
        """getTxPos(PVPBlock self, size_t channel, size_t set) -> Vector3"""
        return _cphd.PVPBlock_getTxPos(self, channel, set)


    def getTxVel(self, channel: 'size_t', set: 'size_t') -> "cphd::Vector3":
        """getTxVel(PVPBlock self, size_t channel, size_t set) -> Vector3"""
        return _cphd.PVPBlock_getTxVel(self, channel, set)


    def getRcvTime(self, channel: 'size_t', set: 'size_t') -> "double":
        """getRcvTime(PVPBlock self, size_t channel, size_t set) -> double"""
        return _cphd.PVPBlock_getRcvTime(self, channel, set)


    def getRcvPos(self, channel: 'size_t', set: 'size_t') -> "cphd::Vector3":
        """getRcvPos(PVPBlock self, size_t channel, size_t set) -> Vector3"""
        return _cphd.PVPBlock_getRcvPos(self, channel, set)


    def getRcvVel(self, channel: 'size_t', set: 'size_t') -> "cphd::Vector3":
        """getRcvVel(PVPBlock self, size_t channel, size_t set) -> Vector3"""
        return _cphd.PVPBlock_getRcvVel(self, channel, set)


    def getSRPPos(self, channel: 'size_t', set: 'size_t') -> "cphd::Vector3":
        """getSRPPos(PVPBlock self, size_t channel, size_t set) -> Vector3"""
        return _cphd.PVPBlock_getSRPPos(self, channel, set)


    def getaFDOP(self, channel: 'size_t', set: 'size_t') -> "double":
        """getaFDOP(PVPBlock self, size_t channel, size_t set) -> double"""
        return _cphd.PVPBlock_getaFDOP(self, channel, set)


    def getaFRR1(self, channel: 'size_t', set: 'size_t') -> "double":
        """getaFRR1(PVPBlock self, size_t channel, size_t set) -> double"""
        return _cphd.PVPBlock_getaFRR1(self, channel, set)


    def getaFRR2(self, channel: 'size_t', set: 'size_t') -> "double":
        """getaFRR2(PVPBlock self, size_t channel, size_t set) -> double"""
        return _cphd.PVPBlock_getaFRR2(self, channel, set)


    def getFx1(self, channel: 'size_t', set: 'size_t') -> "double":
        """getFx1(PVPBlock self, size_t channel, size_t set) -> double"""
        return _cphd.PVPBlock_getFx1(self, channel, set)


    def getFx2(self, channel: 'size_t', set: 'size_t') -> "double":
        """getFx2(PVPBlock self, size_t channel, size_t set) -> double"""
        return _cphd.PVPBlock_getFx2(self, channel, set)


    def getTOA1(self, channel: 'size_t', set: 'size_t') -> "double":
        """getTOA1(PVPBlock self, size_t channel, size_t set) -> double"""
        return _cphd.PVPBlock_getTOA1(self, channel, set)


    def getTOA2(self, channel: 'size_t', set: 'size_t') -> "double":
        """getTOA2(PVPBlock self, size_t channel, size_t set) -> double"""
        return _cphd.PVPBlock_getTOA2(self, channel, set)


    def getTdTropoSRP(self, channel: 'size_t', set: 'size_t') -> "double":
        """getTdTropoSRP(PVPBlock self, size_t channel, size_t set) -> double"""
        return _cphd.PVPBlock_getTdTropoSRP(self, channel, set)


    def getSC0(self, channel: 'size_t', set: 'size_t') -> "double":
        """getSC0(PVPBlock self, size_t channel, size_t set) -> double"""
        return _cphd.PVPBlock_getSC0(self, channel, set)


    def getSCSS(self, channel: 'size_t', set: 'size_t') -> "double":
        """getSCSS(PVPBlock self, size_t channel, size_t set) -> double"""
        return _cphd.PVPBlock_getSCSS(self, channel, set)


    def getAmpSF(self, channel: 'size_t', set: 'size_t') -> "double":
        """getAmpSF(PVPBlock self, size_t channel, size_t set) -> double"""
        return _cphd.PVPBlock_getAmpSF(self, channel, set)


    def getFxN1(self, channel: 'size_t', set: 'size_t') -> "double":
        """getFxN1(PVPBlock self, size_t channel, size_t set) -> double"""
        return _cphd.PVPBlock_getFxN1(self, channel, set)


    def getFxN2(self, channel: 'size_t', set: 'size_t') -> "double":
        """getFxN2(PVPBlock self, size_t channel, size_t set) -> double"""
        return _cphd.PVPBlock_getFxN2(self, channel, set)


    def getTOAE1(self, channel: 'size_t', set: 'size_t') -> "double":
        """getTOAE1(PVPBlock self, size_t channel, size_t set) -> double"""
        return _cphd.PVPBlock_getTOAE1(self, channel, set)


    def getTOAE2(self, channel: 'size_t', set: 'size_t') -> "double":
        """getTOAE2(PVPBlock self, size_t channel, size_t set) -> double"""
        return _cphd.PVPBlock_getTOAE2(self, channel, set)


    def getTdIonoSRP(self, channel: 'size_t', set: 'size_t') -> "double":
        """getTdIonoSRP(PVPBlock self, size_t channel, size_t set) -> double"""
        return _cphd.PVPBlock_getTdIonoSRP(self, channel, set)


    def getSignal(self, channel: 'size_t', set: 'size_t') -> "double":
        """getSignal(PVPBlock self, size_t channel, size_t set) -> double"""
        return _cphd.PVPBlock_getSignal(self, channel, set)


    def setTxTime(self, value: 'double', channel: 'size_t', set: 'size_t') -> "void":
        """setTxTime(PVPBlock self, double value, size_t channel, size_t set)"""
        return _cphd.PVPBlock_setTxTime(self, value, channel, set)


    def setTxPos(self, value: 'Vector3', channel: 'size_t', set: 'size_t') -> "void":
        """setTxPos(PVPBlock self, Vector3 value, size_t channel, size_t set)"""
        return _cphd.PVPBlock_setTxPos(self, value, channel, set)


    def setTxVel(self, value: 'Vector3', channel: 'size_t', set: 'size_t') -> "void":
        """setTxVel(PVPBlock self, Vector3 value, size_t channel, size_t set)"""
        return _cphd.PVPBlock_setTxVel(self, value, channel, set)


    def setRcvTime(self, value: 'double', channel: 'size_t', set: 'size_t') -> "void":
        """setRcvTime(PVPBlock self, double value, size_t channel, size_t set)"""
        return _cphd.PVPBlock_setRcvTime(self, value, channel, set)


    def setRcvPos(self, value: 'Vector3', channel: 'size_t', set: 'size_t') -> "void":
        """setRcvPos(PVPBlock self, Vector3 value, size_t channel, size_t set)"""
        return _cphd.PVPBlock_setRcvPos(self, value, channel, set)


    def setRcvVel(self, value: 'Vector3', channel: 'size_t', set: 'size_t') -> "void":
        """setRcvVel(PVPBlock self, Vector3 value, size_t channel, size_t set)"""
        return _cphd.PVPBlock_setRcvVel(self, value, channel, set)


    def setSRPPos(self, value: 'Vector3', channel: 'size_t', set: 'size_t') -> "void":
        """setSRPPos(PVPBlock self, Vector3 value, size_t channel, size_t set)"""
        return _cphd.PVPBlock_setSRPPos(self, value, channel, set)


    def setaFDOP(self, value: 'double', channel: 'size_t', set: 'size_t') -> "void":
        """setaFDOP(PVPBlock self, double value, size_t channel, size_t set)"""
        return _cphd.PVPBlock_setaFDOP(self, value, channel, set)


    def setaFRR1(self, value: 'double', channel: 'size_t', set: 'size_t') -> "void":
        """setaFRR1(PVPBlock self, double value, size_t channel, size_t set)"""
        return _cphd.PVPBlock_setaFRR1(self, value, channel, set)


    def setaFRR2(self, value: 'double', channel: 'size_t', set: 'size_t') -> "void":
        """setaFRR2(PVPBlock self, double value, size_t channel, size_t set)"""
        return _cphd.PVPBlock_setaFRR2(self, value, channel, set)


    def setFx1(self, value: 'double', channel: 'size_t', set: 'size_t') -> "void":
        """setFx1(PVPBlock self, double value, size_t channel, size_t set)"""
        return _cphd.PVPBlock_setFx1(self, value, channel, set)


    def setFx2(self, value: 'double', channel: 'size_t', set: 'size_t') -> "void":
        """setFx2(PVPBlock self, double value, size_t channel, size_t set)"""
        return _cphd.PVPBlock_setFx2(self, value, channel, set)


    def setTOA1(self, value: 'double', channel: 'size_t', set: 'size_t') -> "void":
        """setTOA1(PVPBlock self, double value, size_t channel, size_t set)"""
        return _cphd.PVPBlock_setTOA1(self, value, channel, set)


    def setTOA2(self, value: 'double', channel: 'size_t', set: 'size_t') -> "void":
        """setTOA2(PVPBlock self, double value, size_t channel, size_t set)"""
        return _cphd.PVPBlock_setTOA2(self, value, channel, set)


    def setTdTropoSRP(self, value: 'double', channel: 'size_t', set: 'size_t') -> "void":
        """setTdTropoSRP(PVPBlock self, double value, size_t channel, size_t set)"""
        return _cphd.PVPBlock_setTdTropoSRP(self, value, channel, set)


    def setSC0(self, value: 'double', channel: 'size_t', set: 'size_t') -> "void":
        """setSC0(PVPBlock self, double value, size_t channel, size_t set)"""
        return _cphd.PVPBlock_setSC0(self, value, channel, set)


    def setSCSS(self, value: 'double', channel: 'size_t', set: 'size_t') -> "void":
        """setSCSS(PVPBlock self, double value, size_t channel, size_t set)"""
        return _cphd.PVPBlock_setSCSS(self, value, channel, set)


    def setAmpSF(self, value: 'double', channel: 'size_t', set: 'size_t') -> "void":
        """setAmpSF(PVPBlock self, double value, size_t channel, size_t set)"""
        return _cphd.PVPBlock_setAmpSF(self, value, channel, set)


    def setFxN1(self, value: 'double', channel: 'size_t', set: 'size_t') -> "void":
        """setFxN1(PVPBlock self, double value, size_t channel, size_t set)"""
        return _cphd.PVPBlock_setFxN1(self, value, channel, set)


    def setFxN2(self, value: 'double', channel: 'size_t', set: 'size_t') -> "void":
        """setFxN2(PVPBlock self, double value, size_t channel, size_t set)"""
        return _cphd.PVPBlock_setFxN2(self, value, channel, set)


    def setTOAE1(self, value: 'double', channel: 'size_t', set: 'size_t') -> "void":
        """setTOAE1(PVPBlock self, double value, size_t channel, size_t set)"""
        return _cphd.PVPBlock_setTOAE1(self, value, channel, set)


    def setTOAE2(self, value: 'double', channel: 'size_t', set: 'size_t') -> "void":
        """setTOAE2(PVPBlock self, double value, size_t channel, size_t set)"""
        return _cphd.PVPBlock_setTOAE2(self, value, channel, set)


    def setTdIonoSRP(self, value: 'double', channel: 'size_t', set: 'size_t') -> "void":
        """setTdIonoSRP(PVPBlock self, double value, size_t channel, size_t set)"""
        return _cphd.PVPBlock_setTdIonoSRP(self, value, channel, set)


    def setSignal(self, value: 'double', channel: 'size_t', set: 'size_t') -> "void":
        """setSignal(PVPBlock self, double value, size_t channel, size_t set)"""
        return _cphd.PVPBlock_setSignal(self, value, channel, set)


    def getNumBytesPVPSet(self) -> "size_t":
        """getNumBytesPVPSet(PVPBlock self) -> size_t"""
        return _cphd.PVPBlock_getNumBytesPVPSet(self)


    def getPVPsize(self, channel: 'size_t') -> "size_t":
        """getPVPsize(PVPBlock self, size_t channel) -> size_t"""
        return _cphd.PVPBlock_getPVPsize(self, channel)


    def hasAmpSF(self) -> "bool":
        """hasAmpSF(PVPBlock self) -> bool"""
        return _cphd.PVPBlock_hasAmpSF(self)


    def hasFxN1(self) -> "bool":
        """hasFxN1(PVPBlock self) -> bool"""
        return _cphd.PVPBlock_hasFxN1(self)


    def hasFxN2(self) -> "bool":
        """hasFxN2(PVPBlock self) -> bool"""
        return _cphd.PVPBlock_hasFxN2(self)


    def hasToaE1(self) -> "bool":
        """hasToaE1(PVPBlock self) -> bool"""
        return _cphd.PVPBlock_hasToaE1(self)


    def hasToaE2(self) -> "bool":
        """hasToaE2(PVPBlock self) -> bool"""
        return _cphd.PVPBlock_hasToaE2(self)


    def hasTDIonoSRP(self) -> "bool":
        """hasTDIonoSRP(PVPBlock self) -> bool"""
        return _cphd.PVPBlock_hasTDIonoSRP(self)


    def hasSignal(self) -> "bool":
        """hasSignal(PVPBlock self) -> bool"""
        return _cphd.PVPBlock_hasSignal(self)


    def load(self, inStream: 'SeekableInputStream', startPVP: 'sys::Off_T', sizePVP: 'sys::Off_T', numThreads: 'size_t') -> "sys::Off_T":
        """load(PVPBlock self, SeekableInputStream inStream, sys::Off_T startPVP, sys::Off_T sizePVP, size_t numThreads) -> sys::Off_T"""
        return _cphd.PVPBlock_load(self, inStream, startPVP, sizePVP, numThreads)


    def __eq__(self, other: 'PVPBlock') -> "bool":
        """__eq__(PVPBlock self, PVPBlock other) -> bool"""
        return _cphd.PVPBlock___eq__(self, other)


    def __ne__(self, other: 'PVPBlock') -> "bool":
        """__ne__(PVPBlock self, PVPBlock other) -> bool"""
        return _cphd.PVPBlock___ne__(self, other)


    def __str__(self) -> "std::string":
        """__str__(PVPBlock self) -> std::string"""
        return _cphd.PVPBlock___str__(self)


    def getPVPdata(self, *args) -> "void":
        """
        getPVPdata(PVPBlock self, size_t channel, std::vector< sys::ubyte,std::allocator< sys::ubyte > > & data)
        getPVPdata(PVPBlock self, size_t channel, void * data)
        getPVPdata(PVPBlock self, size_t channel, size_t data)
        """
        return _cphd.PVPBlock_getPVPdata(self, *args)


    def getUnsignedIntAddedPVP(self, channel: 'size_t', set: 'size_t', name: 'std::string const &') -> "unsigned int":
        """getUnsignedIntAddedPVP(PVPBlock self, size_t channel, size_t set, std::string const & name) -> unsigned int"""
        return _cphd.PVPBlock_getUnsignedIntAddedPVP(self, channel, set, name)


    def getIntAddedPVP(self, channel: 'size_t', set: 'size_t', name: 'std::string const &') -> "int":
        """getIntAddedPVP(PVPBlock self, size_t channel, size_t set, std::string const & name) -> int"""
        return _cphd.PVPBlock_getIntAddedPVP(self, channel, set, name)


    def getFloatAddedPVP(self, channel: 'size_t', set: 'size_t', name: 'std::string const &') -> "float":
        """getFloatAddedPVP(PVPBlock self, size_t channel, size_t set, std::string const & name) -> float"""
        return _cphd.PVPBlock_getFloatAddedPVP(self, channel, set, name)


    def getComplexSignedIntAddedPVP(self, channel: 'size_t', set: 'size_t', name: 'std::string const &') -> "std::complex< int >":
        """getComplexSignedIntAddedPVP(PVPBlock self, size_t channel, size_t set, std::string const & name) -> std::complex< int >"""
        return _cphd.PVPBlock_getComplexSignedIntAddedPVP(self, channel, set, name)


    def getComplexFloatAddedPVP(self, channel: 'size_t', set: 'size_t', name: 'std::string const &') -> "std::complex< float >":
        """getComplexFloatAddedPVP(PVPBlock self, size_t channel, size_t set, std::string const & name) -> std::complex< float >"""
        return _cphd.PVPBlock_getComplexFloatAddedPVP(self, channel, set, name)


    def getStringAddedPVP(self, channel: 'size_t', set: 'size_t', name: 'std::string const &') -> "std::string":
        """getStringAddedPVP(PVPBlock self, size_t channel, size_t set, std::string const & name) -> std::string"""
        return _cphd.PVPBlock_getStringAddedPVP(self, channel, set, name)


    def setUnsignedIntAddedPVP(self, value: 'unsigned int', channel: 'size_t', set: 'size_t', name: 'std::string const &') -> "void":
        """setUnsignedIntAddedPVP(PVPBlock self, unsigned int value, size_t channel, size_t set, std::string const & name)"""
        return _cphd.PVPBlock_setUnsignedIntAddedPVP(self, value, channel, set, name)


    def setIntAddedPVP(self, value: 'int', channel: 'size_t', set: 'size_t', name: 'std::string const &') -> "void":
        """setIntAddedPVP(PVPBlock self, int value, size_t channel, size_t set, std::string const & name)"""
        return _cphd.PVPBlock_setIntAddedPVP(self, value, channel, set, name)


    def setFloatAddedPVP(self, value: 'float', channel: 'size_t', set: 'size_t', name: 'std::string const &') -> "void":
        """setFloatAddedPVP(PVPBlock self, float value, size_t channel, size_t set, std::string const & name)"""
        return _cphd.PVPBlock_setFloatAddedPVP(self, value, channel, set, name)


    def setComplexSignedIntAddedPVP(self, value: 'std::complex< int >', channel: 'size_t', set: 'size_t', name: 'std::string const &') -> "void":
        """setComplexSignedIntAddedPVP(PVPBlock self, std::complex< int > value, size_t channel, size_t set, std::string const & name)"""
        return _cphd.PVPBlock_setComplexSignedIntAddedPVP(self, value, channel, set, name)


    def setComplexFloatAddedPVP(self, value: 'std::complex< float >', channel: 'size_t', set: 'size_t', name: 'std::string const &') -> "void":
        """setComplexFloatAddedPVP(PVPBlock self, std::complex< float > value, size_t channel, size_t set, std::string const & name)"""
        return _cphd.PVPBlock_setComplexFloatAddedPVP(self, value, channel, set, name)


    def setStringAddedPVP(self, value: 'std::string', channel: 'size_t', set: 'size_t', name: 'std::string const &') -> "void":
        """setStringAddedPVP(PVPBlock self, std::string value, size_t channel, size_t set, std::string const & name)"""
        return _cphd.PVPBlock_setStringAddedPVP(self, value, channel, set, name)


        # Map PVPBlock field names to how they're used in the get/set methods for each PVP parameter
        # in a CPHD PVPBlock object.  We could generate these programmatically, but the
        # upper/lowercasing of the method names is not 100% consistent (TOAE, TdIonoSRP)
        # and this is very explicit
    PVP_PARAM_METHODS = {
        'txTime': 'TxTime',
        'txPos': 'TxPos',
        'txVel': 'TxVel',
        'rcvTime': 'RcvTime',
        'rcvPos': 'RcvPos',
        'rcvVel': 'RcvVel',
        'srpPos': 'SRPPos',
        'aFDOP': 'aFDOP',
        'aFRR1': 'aFRR1',
        'aFRR2': 'aFRR2',
        'fx1': 'Fx1',
        'fx2': 'Fx2',
        'toa1': 'TOA1',
        'toa2': 'TOA2',
        'tdTropoSRP': 'TdTropoSRP',
        'sc0': 'SC0',
        'scss': 'SCSS'
    }
    OPTIONAL_PVP_PARAMS = {
        'ampSF': ('hasAmpSF', 'AmpSF'),
        'fxN1': ('hasFxN1', 'FxN1'),
        'fxN2': ('hasFxN2', 'FxN2'),
        'signal': ('hasSignal', 'Signal'),
        'tdIonoSRP': ('hasTDIonoSRP', 'TdIonoSRP'),
        'toaE1': ('hasToaE1', 'TOAE1'),
        'toaE2': ('hasToaE2', 'TOAE2')
    }

    import numpy  # 'as np' doesn't work unless the import is within each function

    @staticmethod
    def _validateMultiplePVPFormatStr(pvpFormatStr):
        """
        \brief  Confirms that a valid PVP format string (CPHD Spec Table 10-2) with multiple
                parameters (e.g. 'X=U2;Y=U2;') uses the same data type for all parameters.
                Returns the data type if it is the same for all parameters, raises an exception
                otherwise

        \param  pvpFormatStr (str)
                CPHD PVP format string, with multiple parameters e.g. 'X=U1;Y=U1;'
                See CPHD Spec Table 10-2

        \return Data type if it is the same for all parameters, raises an exception otherwise
        """

        paramTypes = [param[param.index('=') + 1:] for param in pvpFormatStr.split(';') if param]

    # TODO support multiple different parameter types ('A=U2;B=I2;')
        if not all(paramType == paramTypes[0] for paramType in paramTypes[1:]):
            raise Exception('Multiple parameters with different data types are not yet supported')

        return paramTypes[0]

    @staticmethod
    def _pvpFormatToNPdtype(pvpFormatStr):
        """
        \brief  Maps valid PVP format strings (CPHD Spec Table 10-2) to NumPy dtypes
                Note that both CPHD and NumPy types are in terms of bytes
                Currently doesn't support multiple parameters with different types,
                e.g. 'X=U2;Y=F4;'

        \param  pvpFormatStr (str)
                CPHD PVP format string, e.g. 'U1' or 'CI2'. See CPHD Spec Table 10-2

        \return NumPy dtype corresponding to pvpFormatStr
        """

        if '=' in pvpFormatStr and ';' in pvpFormatStr:
    # This string has multiple parameters, assert that they are all the same data type
            pvpFormatStr = PVPBlock._validateMultiplePVPFormatStr(pvpFormatStr)

        first = pvpFormatStr[0]
        if first in ['U', 'I', 'F']:  # Unsigned int, signed int, float
            return numpy.dtype(pvpFormatStr.lower())
        elif first == 'C':  # Complex float ('CF') or complex int ('CI')
    # This uses complex floats for both, which works but will take more space
    # TODO define a custom dtype for complex ints?
            return numpy.dtype('c' + pvpFormatStr[2:])
        elif first == 'S':  # String
    # TODO official format is “S[1-9][0-9]*”:
    #   Is the '*' literal or indicating that these can be however long?
            return numpy.dtype('U' + pvpFormatStr[1:])

        raise Exception('Unknown or unsupported format string: \'{0}\''.format(pvpFormatStr))

    def pvpFormatToAddedPVPMethod(self, getOrSet, pvpFormatStr):
        """
        \brief  Returns a callable method object to get or set an added PVP. PVPBlock.getAddedPVP()
                is templated based on the type of the parameter it returns, so we need to get the
                correct method name for the type of the parameter

        \param  getOrSet (str)
                'get' or 'set', depending on whether we want the getter or setter method for this
                type of PVP
        \param  pvpFormatStr (str)
                CPHD PVP format string, e.g. 'U1' or 'CI2'. See CPHD Spec Table 10-2

        \return Callable method object to get or set an added PVP for this PVPBlock
        """

        if '=' in pvpFormatStr and ';' in pvpFormatStr:
    # This string has multiple parameters, assert that they are all the same data type
            pvpFormatStr = PVPBlock._validateMultiplePVPFormatStr(pvpFormatStr)

        if getOrSet not in ['get', 'set']:
            raise Exception('getOrSet should be only \'get\' or \'set\', not {}'.format(getOrSet))

        methodName = None
        if pvpFormatStr.startswith('U'):
            methodName = 'UnsignedIntAddedPVP'
        elif pvpFormatStr.startswith('I'):
            methodName = 'IntAddedPVP'
        elif pvpFormatStr.startswith('F'):
            methodName = 'FloatAddedPVP'
        elif pvpFormatStr.startswith('CI'):
            methodName = 'ComplexSignedIntAddedPVP'
        elif pvpFormatStr.startswith('CF'):
            methodName = 'ComplexFloatAddedPVP'
        elif pvpFormatStr.startswith('S'):
            methodName = 'StringAddedPVP'

        return getattr(self, getOrSet + methodName)

    def getDefaultParametersInUse(self):
        """
        \brief  Returns a dict mapping PVPBlock field names for the default PVP parameters
                in this block to the names used in their get/set methods. Method names will
                need to have 'get' or 'set' prepended

        \return A dict mapping field names for the default PVP parameters used in this block
                to the names used in their get/set methods
        """

    # Determine which (non-custom) params need to be set
        usedParams = dict(self.PVP_PARAM_METHODS)  # Copy all required PVP params
        for optionalParam in self.OPTIONAL_PVP_PARAMS:
    # Call boolean `has[param]` method of PVPBlock to check if this PVPBlock has this param
            if getattr(self, self.OPTIONAL_PVP_PARAMS[optionalParam][0])():
    # Copy `get[param]` method name into usedParams
                usedParams[optionalParam] = self.OPTIONAL_PVP_PARAMS[optionalParam][1]
        return usedParams

    def toListOfDicts(self, cphdMetadata):
        """
        \brief  Turns this PVPBlock object in a list of Python dictionaries with NumPy arrays
                of PVP data

        \param  cphdMetadata (SWIG-wrapped CPHD Metadata object)
                The metadata used to create this PVPBlock

        \return List of Python dictionaries containing NumPy arrays of PVP data.
                Each dictionary in the list corresponds to a CPHD data channel.
                The dictionary keys are string names of the PVP parameters in this PVPBlock
                    (specifically, the names of the attributes used to store them in a CPHD PVP
                    object, e.g. 'rcvTime').
                The dictionary values are NumPy arrays of shape
                    (cphdMetadata.getNumVectors(channel), cphdMetadata.getNumSamples(channel))
                    (with an extra dimension of size cphdMetadata.pvp.[param].getSize() if the
                    parameter size != 1).
                The data types of these arrays are set based on the PVP format string,
                    cphdMetadata.pvp.[param].getFormat(), using PVPBlock._pvpFormatToNPdtype()
                Any added PVP parameters should also have been added to cphdMetadata.pvp.addedPVP
        """

    # getDefaultParametersInUse() maps all string param names to the names used in their
    # get/set methods. Call it and reorganize a little: prepend 'get' and wrap the string
    # method names in tuples
        paramsToCopy = {paramName: ('get' + paramMethodName,)
                        for paramName, paramMethodName in self.getDefaultParametersInUse().items()}

        for paramName in paramsToCopy:
    # Append PVPType object to tuple inside paramsToCopy
            paramsToCopy[paramName] += (getattr(cphdMetadata.pvp, paramName),)
    # Add custom PVP objects, which don't have getters
    # (APVPType ("AddedPVPType") derives from PVPType)
        paramsToCopy.update({paramName: (None, paramObj)
                             for paramName, paramObj in cphdMetadata.pvp.addedPVP.items()})

    # Now paramsToCopy consists of:
    # {'param1Name': ('getParam1', cphd.PVPType object for param1)}
    # for all default and custom PVP parameters used in this PVPBlock

        pvpData = []
    # Read data from each channel of this PVPBlock into list-of-dicts
        for channel in range(cphdMetadata.getNumChannels()):
    # Initialize dict of parameters for this channel
    # Doing this for each channel in case they have different numbers of vectors/samples
            channelPVP = {}
            for paramName, (paramGetter, paramObj) in paramsToCopy.items():
                paramSize = paramObj.getSize()
                paramShape = (cphdMetadata.getNumVectors(channel),)
                if paramSize != 1:
    # If data is a vector, add another dimension to the array
                    paramShape += (paramSize,)
                paramDtype = self._pvpFormatToNPdtype(paramObj.getFormat())
                channelPVP[paramName] = numpy.empty(shape=paramShape, dtype=paramDtype)

    # Copy PVP data for this channel by vector
            for vector in range(cphdMetadata.getNumVectors(channel)):
                for paramName, (paramGetter, paramObj) in paramsToCopy.items():
    # Get, then call, the PVPBlock.get[param]() method object for
    # current channel and vector (or use PVPBlock.getAddedPVP() if
    # this is a custom parameter)
                    pulseVector = (getattr(self, paramGetter)(channel, vector)
                                   if paramName not in cphdMetadata.pvp.addedPVP else
                                   self.pvpFormatToAddedPVPMethod('get', paramObj.getFormat())(
                                        channel, vector, paramName))
                    paramSize = paramObj.getSize()
                    if paramSize == 1:
                        channelPVP[paramName][vector] = pulseVector
                    else:
                        for i in range(paramSize):
                            channelPVP[paramName][vector][i] = pulseVector[i]

            pvpData.append(channelPVP)

        return pvpData

    @staticmethod
    def fromListOfDicts(pvpData, cphdMetadata):
        """
        \brief  Initializes a PVPBlock using provided CPHD metadata and populates it from a list
                of Python dicts

        \param  pvpData (list of Python dicts)
                List of Python dicts (one for each channel) mapping parameter names
                to NumPy arrays of data.  See PVPBlock.toListOfDicts() for more information
                on the structure expected here
        \param  cphdMetadata (SWIG-wrapped CPHD Metadata object)
                The metadata used to create this PVPBlock
        """

        pvpBlock = PVPBlock(cphdMetadata.pvp, cphdMetadata.data)  # Call other PVPBlock constructor

        paramsToSet = {paramName: 'set' + paramMethodName for
                       paramName, paramMethodName in pvpBlock.getDefaultParametersInUse().items()}

    # For each parameter, check that all actual data sizes equal metadata size
        expectedParamSizes = {**{paramName: getattr(cphdMetadata.pvp, paramName).getSize()
                                 for paramName in paramsToSet},
                              **{paramName: paramObj.getSize()
                                 for paramName, paramObj in cphdMetadata.pvp.addedPVP.items()}}
        mismatchedParams = []  # Parameters for which actual size doesn't match size in metadata
        for paramName in (list(paramsToSet.keys()) + list(cphdMetadata.pvp.addedPVP.keys())):
            for channelIndex, channelData in enumerate(pvpData):
                actualSize = 1 if len(channelData[paramName].shape) == 1 \
                               else channelData[paramName].shape[1]
                if actualSize != expectedParamSizes[paramName]:
                    mismatchedParams.append(
                        (paramName, channelIndex, actualSize, expectedParamSizes[paramName]))
        if mismatchedParams:
            raise Exception('For the following parameters, actual data size does not match size '
                            + 'in metadata object:\n'
                            + '\n'.join(
                                ['Parameter: {0}  Channel: {1}  Actual: {2}  Expected: {3}'
                                 .format(param, channel, actual, expected)
                                 for (param, channel, actual, expected) in mismatchedParams]))

    # Populate PVPBlock object from pvpData
        for channelIndex, channelData in enumerate(pvpData):
            for vectorIndex in range(cphdMetadata.getNumVectors(channelIndex)):
                for paramName, data in channelData.items():
                    paramData = data[vectorIndex]
                    if isinstance(paramData, numpy.ndarray):
    # Could use Vector2 here, but there aren't any size 2 default parameters
                        if len(paramData) == 3:
                            paramData = coda.math_linear.Vector3(paramData)
                        else:
                            raise Exception(('Only PVP parameters of size 1 or 3 are supported, '
                                             + '\'{0}\' has size {1}'
                                             .format(paramName, len(paramData))))
                    if 'numpy' in type(paramData).__module__:
    # Change 1D arrays to scalars AND convert NumPy types (e.g. numpy.int64)
    # to Python dtypes that SWIG can understand
                        paramData = paramData.item()
                    if paramName not in cphdMetadata.pvp.addedPVP:
    # Get the setter method for this parameter, then call it with indices and
    # data to set for this parameter
                        getattr(pvpBlock, paramsToSet[paramName])(paramData, channelIndex, vectorIndex)
                    else:
    # Get and call setter method for the type of this custom parameter
                        pvpBlock.pvpFormatToAddedPVPMethod('set', cphdMetadata.pvp.addedPVP[paramName].getFormat())(
                            paramData, channelIndex, vectorIndex, paramName)
        return pvpBlock

    __swig_destroy__ = _cphd.delete_PVPBlock
    __del__ = lambda self: None
PVPBlock_swigregister = _cphd.PVPBlock_swigregister
PVPBlock_swigregister(PVPBlock)

class CPHDXMLControl(_object):
    """Proxy of C++ cphd::CPHDXMLControl class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPHDXMLControl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CPHDXMLControl, name)
    __repr__ = _swig_repr

    def __init__(self, log: 'logging::Logger *'=None, ownLog: 'bool'=False):
        """
        __init__(cphd::CPHDXMLControl self, logging::Logger * log=None, bool ownLog=False) -> CPHDXMLControl
        __init__(cphd::CPHDXMLControl self, logging::Logger * log=None) -> CPHDXMLControl
        __init__(cphd::CPHDXMLControl self) -> CPHDXMLControl
        """
        this = _cphd.new_CPHDXMLControl(log, ownLog)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cphd.delete_CPHDXMLControl
    __del__ = lambda self: None

    def setLogger(self, log: 'logging::Logger *', ownLog: 'bool'=False) -> "void":
        """
        setLogger(CPHDXMLControl self, logging::Logger * log, bool ownLog=False)
        setLogger(CPHDXMLControl self, logging::Logger * log)
        """
        return _cphd.CPHDXMLControl_setLogger(self, log, ownLog)


    def toXMLString(self, *args) -> "std::string":
        """
        toXMLString(CPHDXMLControl self, Metadata metadata, VectorString schemaPaths, bool prettyPrint=False) -> std::string
        toXMLString(CPHDXMLControl self, Metadata metadata, VectorString schemaPaths) -> std::string
        toXMLString(CPHDXMLControl self, Metadata metadata) -> std::string
        """
        return _cphd.CPHDXMLControl_toXMLString(self, *args)


    def fromXMLString(self, xmlString: 'std::string const &') -> "cphd::Metadata":
        """fromXMLString(CPHDXMLControl self, std::string const & xmlString) -> Metadata"""
        return _cphd.CPHDXMLControl_fromXMLString(self, xmlString)

CPHDXMLControl_swigregister = _cphd.CPHDXMLControl_swigregister
CPHDXMLControl_swigregister(CPHDXMLControl)

class Wideband(_object):
    """Proxy of C++ cphd::Wideband class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Wideband, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Wideband, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(cphd::Wideband self, std::string const & pathname, MetadataBase metadata, sys::Off_T startWB, sys::Off_T sizeWB) -> Wideband
        __init__(cphd::Wideband self, std::shared_ptr< io::SeekableInputStream > inStream, MetadataBase metadata, sys::Off_T startWB, sys::Off_T sizeWB) -> Wideband
        """
        this = _cphd.new_Wideband(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getFileOffset(self, *args) -> "sys::Off_T":
        """
        getFileOffset(Wideband self, size_t channel, size_t vector, size_t sample) -> sys::Off_T
        getFileOffset(Wideband self, size_t channel) -> sys::Off_T
        """
        return _cphd.Wideband_getFileOffset(self, *args)


    def read(self, *args) -> "void":
        """
        read(Wideband self, size_t channel, size_t firstVector, size_t lastVector, size_t firstSample, size_t lastSample, size_t numThreads, mem::BufferView< sys::ubyte > const & data)
        read(Wideband self, size_t channel, mem::BufferView< sys::ubyte > const & data)
        read(Wideband self, size_t channel, size_t firstVector, size_t lastVector, size_t firstSample, size_t lastSample, size_t numThreads, mem::ScopedArray< sys::ubyte > & data)
        read(Wideband self, size_t channel, mem::ScopedArray< sys::ubyte > & data)
        read(Wideband self, size_t channel, size_t firstVector, size_t lastVector, size_t firstSample, size_t lastSample, std_vector_double vectorScaleFactors, size_t numThreads, mem::BufferView< sys::ubyte > const & scratch, mem::BufferView< std::complex< float > > const & data)
        read(Wideband self, size_t channel, size_t firstVector, size_t lastVector, size_t firstSample, size_t lastSample, size_t numThreads, RowColSizeT dims, void * data)
        """
        return _cphd.Wideband_read(self, *args)


    def getBytesRequiredForRead(self, *args) -> "size_t":
        """
        getBytesRequiredForRead(Wideband self, size_t channel) -> size_t
        getBytesRequiredForRead(Wideband self, size_t channel, size_t firstVector, size_t lastVector, size_t firstSample, size_t lastSample) -> size_t
        """
        return _cphd.Wideband_getBytesRequiredForRead(self, *args)


    def getBufferDims(self, channel: 'size_t', firstVector: 'size_t', lastVector: 'size_t', firstSample: 'size_t', lastSample: 'size_t') -> "types::RowCol< size_t >":
        """getBufferDims(Wideband self, size_t channel, size_t firstVector, size_t lastVector, size_t firstSample, size_t lastSample) -> RowColSizeT"""
        return _cphd.Wideband_getBufferDims(self, channel, firstVector, lastVector, firstSample, lastSample)


    def getElementSize(self) -> "size_t":
        """getElementSize(Wideband self) -> size_t"""
        return _cphd.Wideband_getElementSize(self)


    def readImpl(self, channel: 'size_t', firstVector: 'size_t', lastVector: 'size_t', firstSample: 'size_t', lastSample: 'size_t', numThreads: 'size_t', dims: 'RowColSizeT', data: 'long long') -> "void":
        """readImpl(Wideband self, size_t channel, size_t firstVector, size_t lastVector, size_t firstSample, size_t lastSample, size_t numThreads, RowColSizeT dims, long long data)"""
        return _cphd.Wideband_readImpl(self, channel, firstVector, lastVector, firstSample, lastSample, numThreads, dims, data)

    __swig_destroy__ = _cphd.delete_Wideband
    __del__ = lambda self: None
Wideband_swigregister = _cphd.Wideband_swigregister
Wideband_swigregister(Wideband)
Wideband.ALL = _cphd.cvar.Wideband_ALL

class CPHDReader(_object):
    """Proxy of C++ cphd::CPHDReader class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPHDReader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CPHDReader, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(cphd::CPHDReader self, std::shared_ptr< io::SeekableInputStream > inStream, size_t numThreads, VectorString schemaPaths, std::shared_ptr< logging::Logger > logger) -> CPHDReader
        __init__(cphd::CPHDReader self, std::shared_ptr< io::SeekableInputStream > inStream, size_t numThreads, VectorString schemaPaths) -> CPHDReader
        __init__(cphd::CPHDReader self, std::shared_ptr< io::SeekableInputStream > inStream, size_t numThreads) -> CPHDReader
        __init__(cphd::CPHDReader self, std::string const & fromFile, size_t numThreads, VectorString schemaPaths, std::shared_ptr< logging::Logger > logger) -> CPHDReader
        __init__(cphd::CPHDReader self, std::string const & fromFile, size_t numThreads, VectorString schemaPaths) -> CPHDReader
        __init__(cphd::CPHDReader self, std::string const & fromFile, size_t numThreads) -> CPHDReader
        """
        this = _cphd.new_CPHDReader(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getNumChannels(self) -> "size_t":
        """getNumChannels(CPHDReader self) -> size_t"""
        return _cphd.CPHDReader_getNumChannels(self)


    def getNumVectors(self, channel: 'size_t') -> "size_t":
        """getNumVectors(CPHDReader self, size_t channel) -> size_t"""
        return _cphd.CPHDReader_getNumVectors(self, channel)


    def getNumSamples(self, channel: 'size_t') -> "size_t":
        """getNumSamples(CPHDReader self, size_t channel) -> size_t"""
        return _cphd.CPHDReader_getNumSamples(self, channel)


    def getNumBytesPerSample(self) -> "size_t":
        """getNumBytesPerSample(CPHDReader self) -> size_t"""
        return _cphd.CPHDReader_getNumBytesPerSample(self)


    def getFileOffset(self, channel: 'size_t', vector: 'size_t', sample: 'size_t') -> "sys::Off_T":
        """getFileOffset(CPHDReader self, size_t channel, size_t vector, size_t sample) -> sys::Off_T"""
        return _cphd.CPHDReader_getFileOffset(self, channel, vector, sample)


    def getFileHeader(self) -> "cphd::FileHeader const &":
        """getFileHeader(CPHDReader self) -> FileHeader"""
        return _cphd.CPHDReader_getFileHeader(self)


    def getMetadata(self) -> "cphd::Metadata const &":
        """getMetadata(CPHDReader self) -> Metadata"""
        return _cphd.CPHDReader_getMetadata(self)


    def getPVPBlock(self) -> "cphd::PVPBlock const &":
        """getPVPBlock(CPHDReader self) -> PVPBlock"""
        return _cphd.CPHDReader_getPVPBlock(self)


    def getWideband(self) -> "cphd::Wideband const &":
        """getWideband(CPHDReader self) -> Wideband"""
        return _cphd.CPHDReader_getWideband(self)


    def getSupportBlock(self) -> "cphd::SupportBlock const &":
        """getSupportBlock(CPHDReader self) -> SupportBlock"""
        return _cphd.CPHDReader_getSupportBlock(self)


    def getPHD(self, channel: 'size_t') -> "PyObject *":
        """getPHD(CPHDReader self, size_t channel) -> PyObject *"""
        return _cphd.CPHDReader_getPHD(self, channel)

    __swig_destroy__ = _cphd.delete_CPHDReader
    __del__ = lambda self: None
CPHDReader_swigregister = _cphd.CPHDReader_swigregister
CPHDReader_swigregister(CPHDReader)

class DataWriter(_object):
    """Proxy of C++ cphd::DataWriter class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataWriter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataWriter, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cphd.delete_DataWriter
    __del__ = lambda self: None

    def __call__(self, data: 'sys::ubyte const *', numElements: 'size_t', elementSize: 'size_t') -> "void":
        """__call__(DataWriter self, sys::ubyte const * data, size_t numElements, size_t elementSize)"""
        return _cphd.DataWriter___call__(self, data, numElements, elementSize)

DataWriter_swigregister = _cphd.DataWriter_swigregister
DataWriter_swigregister(DataWriter)

class DataWriterLittleEndian(DataWriter):
    """Proxy of C++ cphd::DataWriterLittleEndian class."""

    __swig_setmethods__ = {}
    for _s in [DataWriter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataWriterLittleEndian, name, value)
    __swig_getmethods__ = {}
    for _s in [DataWriter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataWriterLittleEndian, name)
    __repr__ = _swig_repr

    def __init__(self, stream: 'std::shared_ptr< io::SeekableOutputStream >', numThreads: 'size_t', scratchSize: 'size_t'):
        """__init__(cphd::DataWriterLittleEndian self, std::shared_ptr< io::SeekableOutputStream > stream, size_t numThreads, size_t scratchSize) -> DataWriterLittleEndian"""
        this = _cphd.new_DataWriterLittleEndian(stream, numThreads, scratchSize)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, data: 'sys::ubyte const *', numElements: 'size_t', elementSize: 'size_t') -> "void":
        """__call__(DataWriterLittleEndian self, sys::ubyte const * data, size_t numElements, size_t elementSize)"""
        return _cphd.DataWriterLittleEndian___call__(self, data, numElements, elementSize)

    __swig_destroy__ = _cphd.delete_DataWriterLittleEndian
    __del__ = lambda self: None
DataWriterLittleEndian_swigregister = _cphd.DataWriterLittleEndian_swigregister
DataWriterLittleEndian_swigregister(DataWriterLittleEndian)

class DataWriterBigEndian(DataWriter):
    """Proxy of C++ cphd::DataWriterBigEndian class."""

    __swig_setmethods__ = {}
    for _s in [DataWriter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataWriterBigEndian, name, value)
    __swig_getmethods__ = {}
    for _s in [DataWriter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataWriterBigEndian, name)
    __repr__ = _swig_repr

    def __init__(self, stream: 'std::shared_ptr< io::SeekableOutputStream >', numThreads: 'size_t'):
        """__init__(cphd::DataWriterBigEndian self, std::shared_ptr< io::SeekableOutputStream > stream, size_t numThreads) -> DataWriterBigEndian"""
        this = _cphd.new_DataWriterBigEndian(stream, numThreads)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, data: 'sys::ubyte const *', numElements: 'size_t', elementSize: 'size_t') -> "void":
        """__call__(DataWriterBigEndian self, sys::ubyte const * data, size_t numElements, size_t elementSize)"""
        return _cphd.DataWriterBigEndian___call__(self, data, numElements, elementSize)

    __swig_destroy__ = _cphd.delete_DataWriterBigEndian
    __del__ = lambda self: None
DataWriterBigEndian_swigregister = _cphd.DataWriterBigEndian_swigregister
DataWriterBigEndian_swigregister(DataWriterBigEndian)

class CPHDWriter(_object):
    """Proxy of C++ cphd::CPHDWriter class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPHDWriter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CPHDWriter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(cphd::CPHDWriter self, Metadata metadata, std::shared_ptr< io::SeekableOutputStream > stream, VectorString schemaPaths, size_t numThreads=0, size_t scratchSpaceSize=4) -> CPHDWriter
        __init__(cphd::CPHDWriter self, Metadata metadata, std::shared_ptr< io::SeekableOutputStream > stream, VectorString schemaPaths, size_t numThreads=0) -> CPHDWriter
        __init__(cphd::CPHDWriter self, Metadata metadata, std::shared_ptr< io::SeekableOutputStream > stream, VectorString schemaPaths) -> CPHDWriter
        __init__(cphd::CPHDWriter self, Metadata metadata, std::shared_ptr< io::SeekableOutputStream > stream) -> CPHDWriter
        __init__(cphd::CPHDWriter self, Metadata metadata, std::string const & pathname, VectorString schemaPaths, size_t numThreads=0, size_t scratchSpaceSize=4) -> CPHDWriter
        __init__(cphd::CPHDWriter self, Metadata metadata, std::string const & pathname, VectorString schemaPaths, size_t numThreads=0) -> CPHDWriter
        __init__(cphd::CPHDWriter self, Metadata metadata, std::string const & pathname, VectorString schemaPaths) -> CPHDWriter
        __init__(cphd::CPHDWriter self, Metadata metadata, std::string const & pathname) -> CPHDWriter
        """
        this = _cphd.new_CPHDWriter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def writeMetadata(self, pvpBlock: 'PVPBlock') -> "void":
        """writeMetadata(CPHDWriter self, PVPBlock pvpBlock)"""
        return _cphd.CPHDWriter_writeMetadata(self, pvpBlock)


    def writePVPData(self, PVPBlock: 'PVPBlock') -> "void":
        """writePVPData(CPHDWriter self, PVPBlock PVPBlock)"""
        return _cphd.CPHDWriter_writePVPData(self, PVPBlock)


    def close(self) -> "void":
        """close(CPHDWriter self)"""
        return _cphd.CPHDWriter_close(self)


    def write(self, pvpBlock: 'PVPBlock', widebandData: 'std::complex< float > const *', supportData: 'sys::ubyte const *'=None) -> "void":
        """
        write(CPHDWriter self, PVPBlock pvpBlock, std::complex< float > const * widebandData, sys::ubyte const * supportData=None)
        write(CPHDWriter self, PVPBlock pvpBlock, std::complex< float > const * widebandData)
        """
        return _cphd.CPHDWriter_write(self, pvpBlock, widebandData, supportData)


    def __del__(self):
        self.close()


    def writeWideband(self, pvpBlock: 'PVPBlock', widebandArray: 'PyObject *', rows: 'size_t', cols: 'size_t') -> "void":
        """writeWideband(CPHDWriter self, PVPBlock pvpBlock, PyObject * widebandArray, size_t rows, size_t cols)"""
        return _cphd.CPHDWriter_writeWideband(self, pvpBlock, widebandArray, rows, cols)

    __swig_destroy__ = _cphd.delete_CPHDWriter
    __del__ = lambda self: None
CPHDWriter_swigregister = _cphd.CPHDWriter_swigregister
CPHDWriter_swigregister(CPHDWriter)

class MapStringAPVPType(_object):
    """Proxy of C++ std::map<(std::string,cphd::APVPType)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapStringAPVPType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MapStringAPVPType, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(MapStringAPVPType self) -> SwigPyIterator"""
        return _cphd.MapStringAPVPType_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(MapStringAPVPType self) -> bool"""
        return _cphd.MapStringAPVPType___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(MapStringAPVPType self) -> bool"""
        return _cphd.MapStringAPVPType___bool__(self)


    def __len__(self) -> "std::map< std::string,cphd::APVPType >::size_type":
        """__len__(MapStringAPVPType self) -> std::map< std::string,cphd::APVPType >::size_type"""
        return _cphd.MapStringAPVPType___len__(self)

    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: 'std::map< std::string,cphd::APVPType >::key_type const &') -> "std::map< std::string,cphd::APVPType >::mapped_type const &":
        """__getitem__(MapStringAPVPType self, std::map< std::string,cphd::APVPType >::key_type const & key) -> APVPType"""
        return _cphd.MapStringAPVPType___getitem__(self, key)


    def __delitem__(self, key: 'std::map< std::string,cphd::APVPType >::key_type const &') -> "void":
        """__delitem__(MapStringAPVPType self, std::map< std::string,cphd::APVPType >::key_type const & key)"""
        return _cphd.MapStringAPVPType___delitem__(self, key)


    def has_key(self, key: 'std::map< std::string,cphd::APVPType >::key_type const &') -> "bool":
        """has_key(MapStringAPVPType self, std::map< std::string,cphd::APVPType >::key_type const & key) -> bool"""
        return _cphd.MapStringAPVPType_has_key(self, key)


    def keys(self) -> "PyObject *":
        """keys(MapStringAPVPType self) -> PyObject *"""
        return _cphd.MapStringAPVPType_keys(self)


    def values(self) -> "PyObject *":
        """values(MapStringAPVPType self) -> PyObject *"""
        return _cphd.MapStringAPVPType_values(self)


    def items(self) -> "PyObject *":
        """items(MapStringAPVPType self) -> PyObject *"""
        return _cphd.MapStringAPVPType_items(self)


    def __contains__(self, key: 'std::map< std::string,cphd::APVPType >::key_type const &') -> "bool":
        """__contains__(MapStringAPVPType self, std::map< std::string,cphd::APVPType >::key_type const & key) -> bool"""
        return _cphd.MapStringAPVPType___contains__(self, key)


    def key_iterator(self) -> "swig::SwigPyIterator *":
        """key_iterator(MapStringAPVPType self) -> SwigPyIterator"""
        return _cphd.MapStringAPVPType_key_iterator(self)


    def value_iterator(self) -> "swig::SwigPyIterator *":
        """value_iterator(MapStringAPVPType self) -> SwigPyIterator"""
        return _cphd.MapStringAPVPType_value_iterator(self)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(MapStringAPVPType self, std::map< std::string,cphd::APVPType >::key_type const & key)
        __setitem__(MapStringAPVPType self, std::map< std::string,cphd::APVPType >::key_type const & key, APVPType x)
        """
        return _cphd.MapStringAPVPType___setitem__(self, *args)


    def asdict(self) -> "PyObject *":
        """asdict(MapStringAPVPType self) -> PyObject *"""
        return _cphd.MapStringAPVPType_asdict(self)


    def __init__(self, *args):
        """
        __init__(std::map<(std::string,cphd::APVPType)> self, std::less< std::string > const & arg2) -> MapStringAPVPType
        __init__(std::map<(std::string,cphd::APVPType)> self) -> MapStringAPVPType
        __init__(std::map<(std::string,cphd::APVPType)> self, MapStringAPVPType arg2) -> MapStringAPVPType
        """
        this = _cphd.new_MapStringAPVPType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self) -> "bool":
        """empty(MapStringAPVPType self) -> bool"""
        return _cphd.MapStringAPVPType_empty(self)


    def size(self) -> "std::map< std::string,cphd::APVPType >::size_type":
        """size(MapStringAPVPType self) -> std::map< std::string,cphd::APVPType >::size_type"""
        return _cphd.MapStringAPVPType_size(self)


    def swap(self, v: 'MapStringAPVPType') -> "void":
        """swap(MapStringAPVPType self, MapStringAPVPType v)"""
        return _cphd.MapStringAPVPType_swap(self, v)


    def begin(self) -> "std::map< std::string,cphd::APVPType >::iterator":
        """begin(MapStringAPVPType self) -> std::map< std::string,cphd::APVPType >::iterator"""
        return _cphd.MapStringAPVPType_begin(self)


    def end(self) -> "std::map< std::string,cphd::APVPType >::iterator":
        """end(MapStringAPVPType self) -> std::map< std::string,cphd::APVPType >::iterator"""
        return _cphd.MapStringAPVPType_end(self)


    def rbegin(self) -> "std::map< std::string,cphd::APVPType >::reverse_iterator":
        """rbegin(MapStringAPVPType self) -> std::map< std::string,cphd::APVPType >::reverse_iterator"""
        return _cphd.MapStringAPVPType_rbegin(self)


    def rend(self) -> "std::map< std::string,cphd::APVPType >::reverse_iterator":
        """rend(MapStringAPVPType self) -> std::map< std::string,cphd::APVPType >::reverse_iterator"""
        return _cphd.MapStringAPVPType_rend(self)


    def clear(self) -> "void":
        """clear(MapStringAPVPType self)"""
        return _cphd.MapStringAPVPType_clear(self)


    def get_allocator(self) -> "std::map< std::string,cphd::APVPType >::allocator_type":
        """get_allocator(MapStringAPVPType self) -> std::map< std::string,cphd::APVPType >::allocator_type"""
        return _cphd.MapStringAPVPType_get_allocator(self)


    def count(self, x: 'std::map< std::string,cphd::APVPType >::key_type const &') -> "std::map< std::string,cphd::APVPType >::size_type":
        """count(MapStringAPVPType self, std::map< std::string,cphd::APVPType >::key_type const & x) -> std::map< std::string,cphd::APVPType >::size_type"""
        return _cphd.MapStringAPVPType_count(self, x)


    def erase(self, *args) -> "void":
        """
        erase(MapStringAPVPType self, std::map< std::string,cphd::APVPType >::key_type const & x) -> std::map< std::string,cphd::APVPType >::size_type
        erase(MapStringAPVPType self, std::map< std::string,cphd::APVPType >::iterator position)
        erase(MapStringAPVPType self, std::map< std::string,cphd::APVPType >::iterator first, std::map< std::string,cphd::APVPType >::iterator last)
        """
        return _cphd.MapStringAPVPType_erase(self, *args)


    def find(self, x: 'std::map< std::string,cphd::APVPType >::key_type const &') -> "std::map< std::string,cphd::APVPType >::iterator":
        """find(MapStringAPVPType self, std::map< std::string,cphd::APVPType >::key_type const & x) -> std::map< std::string,cphd::APVPType >::iterator"""
        return _cphd.MapStringAPVPType_find(self, x)


    def lower_bound(self, x: 'std::map< std::string,cphd::APVPType >::key_type const &') -> "std::map< std::string,cphd::APVPType >::iterator":
        """lower_bound(MapStringAPVPType self, std::map< std::string,cphd::APVPType >::key_type const & x) -> std::map< std::string,cphd::APVPType >::iterator"""
        return _cphd.MapStringAPVPType_lower_bound(self, x)


    def upper_bound(self, x: 'std::map< std::string,cphd::APVPType >::key_type const &') -> "std::map< std::string,cphd::APVPType >::iterator":
        """upper_bound(MapStringAPVPType self, std::map< std::string,cphd::APVPType >::key_type const & x) -> std::map< std::string,cphd::APVPType >::iterator"""
        return _cphd.MapStringAPVPType_upper_bound(self, x)

    __swig_destroy__ = _cphd.delete_MapStringAPVPType
    __del__ = lambda self: None
MapStringAPVPType_swigregister = _cphd.MapStringAPVPType_swigregister
MapStringAPVPType_swigregister(MapStringAPVPType)


import numpy
import multiprocessing
from coda.coda_types import RowColSizeT

def read(self,
         channel = 0,
         firstVector = 0,
         lastVector = Wideband.ALL,
         firstSample = 0,
         lastSample = Wideband.ALL,
         numThreads = multiprocessing.cpu_count()):

    dims = self.getBufferDims(channel, firstVector, lastVector, firstSample, lastSample)
    sampleTypeSize = self.getElementSize()

# RF32F_IM32F
    if sampleTypeSize == 8:
        dtype = 'complex64'
    else:
        raise Exception('Unknown element type')

    numpyArray = numpy.empty(shape = (dims.row, dims.col), dtype = dtype)
    pointer, ro = numpyArray.__array_interface__['data']
    self.readImpl(channel, firstVector, lastVector, firstSample, lastSample, numThreads, dims, pointer)
    return numpyArray

Wideband.read = read

class VectorVector2(_object):
    """Proxy of C++ std::vector<(math::linear::VectorN<(2,double)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorVector2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorVector2, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(VectorVector2 self) -> SwigPyIterator"""
        return _cphd.VectorVector2_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(VectorVector2 self) -> bool"""
        return _cphd.VectorVector2___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(VectorVector2 self) -> bool"""
        return _cphd.VectorVector2___bool__(self)


    def __len__(self) -> "std::vector< math::linear::VectorN< 2,double > >::size_type":
        """__len__(VectorVector2 self) -> std::vector< math::linear::VectorN< 2,double > >::size_type"""
        return _cphd.VectorVector2___len__(self)


    def __getslice__(self, i: 'std::vector< math::linear::VectorN< 2,double > >::difference_type', j: 'std::vector< math::linear::VectorN< 2,double > >::difference_type') -> "std::vector< math::linear::VectorN< 2,double >,std::allocator< math::linear::VectorN< 2,double > > > *":
        """__getslice__(VectorVector2 self, std::vector< math::linear::VectorN< 2,double > >::difference_type i, std::vector< math::linear::VectorN< 2,double > >::difference_type j) -> VectorVector2"""
        return _cphd.VectorVector2___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(VectorVector2 self, std::vector< math::linear::VectorN< 2,double > >::difference_type i, std::vector< math::linear::VectorN< 2,double > >::difference_type j)
        __setslice__(VectorVector2 self, std::vector< math::linear::VectorN< 2,double > >::difference_type i, std::vector< math::linear::VectorN< 2,double > >::difference_type j, VectorVector2 v)
        """
        return _cphd.VectorVector2___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< math::linear::VectorN< 2,double > >::difference_type', j: 'std::vector< math::linear::VectorN< 2,double > >::difference_type') -> "void":
        """__delslice__(VectorVector2 self, std::vector< math::linear::VectorN< 2,double > >::difference_type i, std::vector< math::linear::VectorN< 2,double > >::difference_type j)"""
        return _cphd.VectorVector2___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(VectorVector2 self, std::vector< math::linear::VectorN< 2,double > >::difference_type i)
        __delitem__(VectorVector2 self, PySliceObject * slice)
        """
        return _cphd.VectorVector2___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< math::linear::VectorN< 2,double > >::value_type const &":
        """
        __getitem__(VectorVector2 self, PySliceObject * slice) -> VectorVector2
        __getitem__(VectorVector2 self, std::vector< math::linear::VectorN< 2,double > >::difference_type i) -> Vector2
        """
        return _cphd.VectorVector2___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(VectorVector2 self, PySliceObject * slice, VectorVector2 v)
        __setitem__(VectorVector2 self, PySliceObject * slice)
        __setitem__(VectorVector2 self, std::vector< math::linear::VectorN< 2,double > >::difference_type i, Vector2 x)
        """
        return _cphd.VectorVector2___setitem__(self, *args)


    def pop(self) -> "std::vector< math::linear::VectorN< 2,double > >::value_type":
        """pop(VectorVector2 self) -> Vector2"""
        return _cphd.VectorVector2_pop(self)


    def append(self, x: 'Vector2') -> "void":
        """append(VectorVector2 self, Vector2 x)"""
        return _cphd.VectorVector2_append(self, x)


    def empty(self) -> "bool":
        """empty(VectorVector2 self) -> bool"""
        return _cphd.VectorVector2_empty(self)


    def size(self) -> "std::vector< math::linear::VectorN< 2,double > >::size_type":
        """size(VectorVector2 self) -> std::vector< math::linear::VectorN< 2,double > >::size_type"""
        return _cphd.VectorVector2_size(self)


    def swap(self, v: 'VectorVector2') -> "void":
        """swap(VectorVector2 self, VectorVector2 v)"""
        return _cphd.VectorVector2_swap(self, v)


    def begin(self) -> "std::vector< math::linear::VectorN< 2,double > >::iterator":
        """begin(VectorVector2 self) -> std::vector< math::linear::VectorN< 2,double > >::iterator"""
        return _cphd.VectorVector2_begin(self)


    def end(self) -> "std::vector< math::linear::VectorN< 2,double > >::iterator":
        """end(VectorVector2 self) -> std::vector< math::linear::VectorN< 2,double > >::iterator"""
        return _cphd.VectorVector2_end(self)


    def rbegin(self) -> "std::vector< math::linear::VectorN< 2,double > >::reverse_iterator":
        """rbegin(VectorVector2 self) -> std::vector< math::linear::VectorN< 2,double > >::reverse_iterator"""
        return _cphd.VectorVector2_rbegin(self)


    def rend(self) -> "std::vector< math::linear::VectorN< 2,double > >::reverse_iterator":
        """rend(VectorVector2 self) -> std::vector< math::linear::VectorN< 2,double > >::reverse_iterator"""
        return _cphd.VectorVector2_rend(self)


    def clear(self) -> "void":
        """clear(VectorVector2 self)"""
        return _cphd.VectorVector2_clear(self)


    def get_allocator(self) -> "std::vector< math::linear::VectorN< 2,double > >::allocator_type":
        """get_allocator(VectorVector2 self) -> std::vector< math::linear::VectorN< 2,double > >::allocator_type"""
        return _cphd.VectorVector2_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(VectorVector2 self)"""
        return _cphd.VectorVector2_pop_back(self)


    def erase(self, *args) -> "std::vector< math::linear::VectorN< 2,double > >::iterator":
        """
        erase(VectorVector2 self, std::vector< math::linear::VectorN< 2,double > >::iterator pos) -> std::vector< math::linear::VectorN< 2,double > >::iterator
        erase(VectorVector2 self, std::vector< math::linear::VectorN< 2,double > >::iterator first, std::vector< math::linear::VectorN< 2,double > >::iterator last) -> std::vector< math::linear::VectorN< 2,double > >::iterator
        """
        return _cphd.VectorVector2_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(math::linear::VectorN<(2,double)>)> self) -> VectorVector2
        __init__(std::vector<(math::linear::VectorN<(2,double)>)> self, VectorVector2 arg2) -> VectorVector2
        __init__(std::vector<(math::linear::VectorN<(2,double)>)> self, std::vector< math::linear::VectorN< 2,double > >::size_type size) -> VectorVector2
        __init__(std::vector<(math::linear::VectorN<(2,double)>)> self, std::vector< math::linear::VectorN< 2,double > >::size_type size, Vector2 value) -> VectorVector2
        """
        this = _cphd.new_VectorVector2(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'Vector2') -> "void":
        """push_back(VectorVector2 self, Vector2 x)"""
        return _cphd.VectorVector2_push_back(self, x)


    def front(self) -> "std::vector< math::linear::VectorN< 2,double > >::value_type const &":
        """front(VectorVector2 self) -> Vector2"""
        return _cphd.VectorVector2_front(self)


    def back(self) -> "std::vector< math::linear::VectorN< 2,double > >::value_type const &":
        """back(VectorVector2 self) -> Vector2"""
        return _cphd.VectorVector2_back(self)


    def assign(self, n: 'std::vector< math::linear::VectorN< 2,double > >::size_type', x: 'Vector2') -> "void":
        """assign(VectorVector2 self, std::vector< math::linear::VectorN< 2,double > >::size_type n, Vector2 x)"""
        return _cphd.VectorVector2_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(VectorVector2 self, std::vector< math::linear::VectorN< 2,double > >::size_type new_size)
        resize(VectorVector2 self, std::vector< math::linear::VectorN< 2,double > >::size_type new_size, Vector2 x)
        """
        return _cphd.VectorVector2_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(VectorVector2 self, std::vector< math::linear::VectorN< 2,double > >::iterator pos, Vector2 x) -> std::vector< math::linear::VectorN< 2,double > >::iterator
        insert(VectorVector2 self, std::vector< math::linear::VectorN< 2,double > >::iterator pos, std::vector< math::linear::VectorN< 2,double > >::size_type n, Vector2 x)
        """
        return _cphd.VectorVector2_insert(self, *args)


    def reserve(self, n: 'std::vector< math::linear::VectorN< 2,double > >::size_type') -> "void":
        """reserve(VectorVector2 self, std::vector< math::linear::VectorN< 2,double > >::size_type n)"""
        return _cphd.VectorVector2_reserve(self, n)


    def capacity(self) -> "std::vector< math::linear::VectorN< 2,double > >::size_type":
        """capacity(VectorVector2 self) -> std::vector< math::linear::VectorN< 2,double > >::size_type"""
        return _cphd.VectorVector2_capacity(self)


    def __getstate__(self):
    # Return a nonempty (thus non-false) tuple with dummy value in first position
        return (-1, tuple(pickle.dumps(elem) for elem in self))

    def __setstate__(self, state):
        self.__init__()
    # State will have a dummy entry in the first position
        for elem in state[1]:
            self.push_back(pickle.loads(elem))

    __swig_destroy__ = _cphd.delete_VectorVector2
    __del__ = lambda self: None
VectorVector2_swigregister = _cphd.VectorVector2_swigregister
VectorVector2_swigregister(VectorVector2)

class VectorVector3(_object):
    """Proxy of C++ std::vector<(math::linear::VectorN<(3,double)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorVector3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorVector3, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(VectorVector3 self) -> SwigPyIterator"""
        return _cphd.VectorVector3_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(VectorVector3 self) -> bool"""
        return _cphd.VectorVector3___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(VectorVector3 self) -> bool"""
        return _cphd.VectorVector3___bool__(self)


    def __len__(self) -> "std::vector< math::linear::VectorN< 3,double > >::size_type":
        """__len__(VectorVector3 self) -> std::vector< math::linear::VectorN< 3,double > >::size_type"""
        return _cphd.VectorVector3___len__(self)


    def __getslice__(self, i: 'std::vector< math::linear::VectorN< 3,double > >::difference_type', j: 'std::vector< math::linear::VectorN< 3,double > >::difference_type') -> "std::vector< math::linear::VectorN< 3,double >,std::allocator< math::linear::VectorN< 3,double > > > *":
        """__getslice__(VectorVector3 self, std::vector< math::linear::VectorN< 3,double > >::difference_type i, std::vector< math::linear::VectorN< 3,double > >::difference_type j) -> Vector3Coefficients"""
        return _cphd.VectorVector3___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(VectorVector3 self, std::vector< math::linear::VectorN< 3,double > >::difference_type i, std::vector< math::linear::VectorN< 3,double > >::difference_type j)
        __setslice__(VectorVector3 self, std::vector< math::linear::VectorN< 3,double > >::difference_type i, std::vector< math::linear::VectorN< 3,double > >::difference_type j, Vector3Coefficients v)
        """
        return _cphd.VectorVector3___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< math::linear::VectorN< 3,double > >::difference_type', j: 'std::vector< math::linear::VectorN< 3,double > >::difference_type') -> "void":
        """__delslice__(VectorVector3 self, std::vector< math::linear::VectorN< 3,double > >::difference_type i, std::vector< math::linear::VectorN< 3,double > >::difference_type j)"""
        return _cphd.VectorVector3___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(VectorVector3 self, std::vector< math::linear::VectorN< 3,double > >::difference_type i)
        __delitem__(VectorVector3 self, PySliceObject * slice)
        """
        return _cphd.VectorVector3___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< math::linear::VectorN< 3,double > >::value_type const &":
        """
        __getitem__(VectorVector3 self, PySliceObject * slice) -> Vector3Coefficients
        __getitem__(VectorVector3 self, std::vector< math::linear::VectorN< 3,double > >::difference_type i) -> Vector3
        """
        return _cphd.VectorVector3___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(VectorVector3 self, PySliceObject * slice, Vector3Coefficients v)
        __setitem__(VectorVector3 self, PySliceObject * slice)
        __setitem__(VectorVector3 self, std::vector< math::linear::VectorN< 3,double > >::difference_type i, Vector3 x)
        """
        return _cphd.VectorVector3___setitem__(self, *args)


    def pop(self) -> "std::vector< math::linear::VectorN< 3,double > >::value_type":
        """pop(VectorVector3 self) -> Vector3"""
        return _cphd.VectorVector3_pop(self)


    def append(self, x: 'Vector3') -> "void":
        """append(VectorVector3 self, Vector3 x)"""
        return _cphd.VectorVector3_append(self, x)


    def empty(self) -> "bool":
        """empty(VectorVector3 self) -> bool"""
        return _cphd.VectorVector3_empty(self)


    def size(self) -> "std::vector< math::linear::VectorN< 3,double > >::size_type":
        """size(VectorVector3 self) -> std::vector< math::linear::VectorN< 3,double > >::size_type"""
        return _cphd.VectorVector3_size(self)


    def swap(self, v: 'Vector3Coefficients') -> "void":
        """swap(VectorVector3 self, Vector3Coefficients v)"""
        return _cphd.VectorVector3_swap(self, v)


    def begin(self) -> "std::vector< math::linear::VectorN< 3,double > >::iterator":
        """begin(VectorVector3 self) -> std::vector< math::linear::VectorN< 3,double > >::iterator"""
        return _cphd.VectorVector3_begin(self)


    def end(self) -> "std::vector< math::linear::VectorN< 3,double > >::iterator":
        """end(VectorVector3 self) -> std::vector< math::linear::VectorN< 3,double > >::iterator"""
        return _cphd.VectorVector3_end(self)


    def rbegin(self) -> "std::vector< math::linear::VectorN< 3,double > >::reverse_iterator":
        """rbegin(VectorVector3 self) -> std::vector< math::linear::VectorN< 3,double > >::reverse_iterator"""
        return _cphd.VectorVector3_rbegin(self)


    def rend(self) -> "std::vector< math::linear::VectorN< 3,double > >::reverse_iterator":
        """rend(VectorVector3 self) -> std::vector< math::linear::VectorN< 3,double > >::reverse_iterator"""
        return _cphd.VectorVector3_rend(self)


    def clear(self) -> "void":
        """clear(VectorVector3 self)"""
        return _cphd.VectorVector3_clear(self)


    def get_allocator(self) -> "std::vector< math::linear::VectorN< 3,double > >::allocator_type":
        """get_allocator(VectorVector3 self) -> std::vector< math::linear::VectorN< 3,double > >::allocator_type"""
        return _cphd.VectorVector3_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(VectorVector3 self)"""
        return _cphd.VectorVector3_pop_back(self)


    def erase(self, *args) -> "std::vector< math::linear::VectorN< 3,double > >::iterator":
        """
        erase(VectorVector3 self, std::vector< math::linear::VectorN< 3,double > >::iterator pos) -> std::vector< math::linear::VectorN< 3,double > >::iterator
        erase(VectorVector3 self, std::vector< math::linear::VectorN< 3,double > >::iterator first, std::vector< math::linear::VectorN< 3,double > >::iterator last) -> std::vector< math::linear::VectorN< 3,double > >::iterator
        """
        return _cphd.VectorVector3_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(math::linear::VectorN<(3,double)>)> self) -> VectorVector3
        __init__(std::vector<(math::linear::VectorN<(3,double)>)> self, Vector3Coefficients arg2) -> VectorVector3
        __init__(std::vector<(math::linear::VectorN<(3,double)>)> self, std::vector< math::linear::VectorN< 3,double > >::size_type size) -> VectorVector3
        __init__(std::vector<(math::linear::VectorN<(3,double)>)> self, std::vector< math::linear::VectorN< 3,double > >::size_type size, Vector3 value) -> VectorVector3
        """
        this = _cphd.new_VectorVector3(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'Vector3') -> "void":
        """push_back(VectorVector3 self, Vector3 x)"""
        return _cphd.VectorVector3_push_back(self, x)


    def front(self) -> "std::vector< math::linear::VectorN< 3,double > >::value_type const &":
        """front(VectorVector3 self) -> Vector3"""
        return _cphd.VectorVector3_front(self)


    def back(self) -> "std::vector< math::linear::VectorN< 3,double > >::value_type const &":
        """back(VectorVector3 self) -> Vector3"""
        return _cphd.VectorVector3_back(self)


    def assign(self, n: 'std::vector< math::linear::VectorN< 3,double > >::size_type', x: 'Vector3') -> "void":
        """assign(VectorVector3 self, std::vector< math::linear::VectorN< 3,double > >::size_type n, Vector3 x)"""
        return _cphd.VectorVector3_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(VectorVector3 self, std::vector< math::linear::VectorN< 3,double > >::size_type new_size)
        resize(VectorVector3 self, std::vector< math::linear::VectorN< 3,double > >::size_type new_size, Vector3 x)
        """
        return _cphd.VectorVector3_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(VectorVector3 self, std::vector< math::linear::VectorN< 3,double > >::iterator pos, Vector3 x) -> std::vector< math::linear::VectorN< 3,double > >::iterator
        insert(VectorVector3 self, std::vector< math::linear::VectorN< 3,double > >::iterator pos, std::vector< math::linear::VectorN< 3,double > >::size_type n, Vector3 x)
        """
        return _cphd.VectorVector3_insert(self, *args)


    def reserve(self, n: 'std::vector< math::linear::VectorN< 3,double > >::size_type') -> "void":
        """reserve(VectorVector3 self, std::vector< math::linear::VectorN< 3,double > >::size_type n)"""
        return _cphd.VectorVector3_reserve(self, n)


    def capacity(self) -> "std::vector< math::linear::VectorN< 3,double > >::size_type":
        """capacity(VectorVector3 self) -> std::vector< math::linear::VectorN< 3,double > >::size_type"""
        return _cphd.VectorVector3_capacity(self)


    def __getstate__(self):
    # Return a nonempty (thus non-false) tuple with dummy value in first position
        return (-1, tuple(pickle.dumps(elem) for elem in self))

    def __setstate__(self, state):
        self.__init__()
    # State will have a dummy entry in the first position
        for elem in state[1]:
            self.push_back(pickle.loads(elem))

    __swig_destroy__ = _cphd.delete_VectorVector3
    __del__ = lambda self: None
VectorVector3_swigregister = _cphd.VectorVector3_swigregister
VectorVector3_swigregister(VectorVector3)

class VectorLineSample(_object):
    """Proxy of C++ std::vector<(cphd::LineSample)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorLineSample, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorLineSample, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(VectorLineSample self) -> SwigPyIterator"""
        return _cphd.VectorLineSample_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(VectorLineSample self) -> bool"""
        return _cphd.VectorLineSample___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(VectorLineSample self) -> bool"""
        return _cphd.VectorLineSample___bool__(self)


    def __len__(self) -> "std::vector< cphd::LineSample >::size_type":
        """__len__(VectorLineSample self) -> std::vector< cphd::LineSample >::size_type"""
        return _cphd.VectorLineSample___len__(self)


    def __getslice__(self, i: 'std::vector< cphd::LineSample >::difference_type', j: 'std::vector< cphd::LineSample >::difference_type') -> "std::vector< cphd::LineSample,std::allocator< cphd::LineSample > > *":
        """__getslice__(VectorLineSample self, std::vector< cphd::LineSample >::difference_type i, std::vector< cphd::LineSample >::difference_type j) -> VectorLineSample"""
        return _cphd.VectorLineSample___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(VectorLineSample self, std::vector< cphd::LineSample >::difference_type i, std::vector< cphd::LineSample >::difference_type j)
        __setslice__(VectorLineSample self, std::vector< cphd::LineSample >::difference_type i, std::vector< cphd::LineSample >::difference_type j, VectorLineSample v)
        """
        return _cphd.VectorLineSample___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< cphd::LineSample >::difference_type', j: 'std::vector< cphd::LineSample >::difference_type') -> "void":
        """__delslice__(VectorLineSample self, std::vector< cphd::LineSample >::difference_type i, std::vector< cphd::LineSample >::difference_type j)"""
        return _cphd.VectorLineSample___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(VectorLineSample self, std::vector< cphd::LineSample >::difference_type i)
        __delitem__(VectorLineSample self, PySliceObject * slice)
        """
        return _cphd.VectorLineSample___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< cphd::LineSample >::value_type const &":
        """
        __getitem__(VectorLineSample self, PySliceObject * slice) -> VectorLineSample
        __getitem__(VectorLineSample self, std::vector< cphd::LineSample >::difference_type i) -> LineSample
        """
        return _cphd.VectorLineSample___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(VectorLineSample self, PySliceObject * slice, VectorLineSample v)
        __setitem__(VectorLineSample self, PySliceObject * slice)
        __setitem__(VectorLineSample self, std::vector< cphd::LineSample >::difference_type i, LineSample x)
        """
        return _cphd.VectorLineSample___setitem__(self, *args)


    def pop(self) -> "std::vector< cphd::LineSample >::value_type":
        """pop(VectorLineSample self) -> LineSample"""
        return _cphd.VectorLineSample_pop(self)


    def append(self, x: 'LineSample') -> "void":
        """append(VectorLineSample self, LineSample x)"""
        return _cphd.VectorLineSample_append(self, x)


    def empty(self) -> "bool":
        """empty(VectorLineSample self) -> bool"""
        return _cphd.VectorLineSample_empty(self)


    def size(self) -> "std::vector< cphd::LineSample >::size_type":
        """size(VectorLineSample self) -> std::vector< cphd::LineSample >::size_type"""
        return _cphd.VectorLineSample_size(self)


    def swap(self, v: 'VectorLineSample') -> "void":
        """swap(VectorLineSample self, VectorLineSample v)"""
        return _cphd.VectorLineSample_swap(self, v)


    def begin(self) -> "std::vector< cphd::LineSample >::iterator":
        """begin(VectorLineSample self) -> std::vector< cphd::LineSample >::iterator"""
        return _cphd.VectorLineSample_begin(self)


    def end(self) -> "std::vector< cphd::LineSample >::iterator":
        """end(VectorLineSample self) -> std::vector< cphd::LineSample >::iterator"""
        return _cphd.VectorLineSample_end(self)


    def rbegin(self) -> "std::vector< cphd::LineSample >::reverse_iterator":
        """rbegin(VectorLineSample self) -> std::vector< cphd::LineSample >::reverse_iterator"""
        return _cphd.VectorLineSample_rbegin(self)


    def rend(self) -> "std::vector< cphd::LineSample >::reverse_iterator":
        """rend(VectorLineSample self) -> std::vector< cphd::LineSample >::reverse_iterator"""
        return _cphd.VectorLineSample_rend(self)


    def clear(self) -> "void":
        """clear(VectorLineSample self)"""
        return _cphd.VectorLineSample_clear(self)


    def get_allocator(self) -> "std::vector< cphd::LineSample >::allocator_type":
        """get_allocator(VectorLineSample self) -> std::vector< cphd::LineSample >::allocator_type"""
        return _cphd.VectorLineSample_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(VectorLineSample self)"""
        return _cphd.VectorLineSample_pop_back(self)


    def erase(self, *args) -> "std::vector< cphd::LineSample >::iterator":
        """
        erase(VectorLineSample self, std::vector< cphd::LineSample >::iterator pos) -> std::vector< cphd::LineSample >::iterator
        erase(VectorLineSample self, std::vector< cphd::LineSample >::iterator first, std::vector< cphd::LineSample >::iterator last) -> std::vector< cphd::LineSample >::iterator
        """
        return _cphd.VectorLineSample_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(cphd::LineSample)> self) -> VectorLineSample
        __init__(std::vector<(cphd::LineSample)> self, VectorLineSample arg2) -> VectorLineSample
        __init__(std::vector<(cphd::LineSample)> self, std::vector< cphd::LineSample >::size_type size) -> VectorLineSample
        __init__(std::vector<(cphd::LineSample)> self, std::vector< cphd::LineSample >::size_type size, LineSample value) -> VectorLineSample
        """
        this = _cphd.new_VectorLineSample(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'LineSample') -> "void":
        """push_back(VectorLineSample self, LineSample x)"""
        return _cphd.VectorLineSample_push_back(self, x)


    def front(self) -> "std::vector< cphd::LineSample >::value_type const &":
        """front(VectorLineSample self) -> LineSample"""
        return _cphd.VectorLineSample_front(self)


    def back(self) -> "std::vector< cphd::LineSample >::value_type const &":
        """back(VectorLineSample self) -> LineSample"""
        return _cphd.VectorLineSample_back(self)


    def assign(self, n: 'std::vector< cphd::LineSample >::size_type', x: 'LineSample') -> "void":
        """assign(VectorLineSample self, std::vector< cphd::LineSample >::size_type n, LineSample x)"""
        return _cphd.VectorLineSample_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(VectorLineSample self, std::vector< cphd::LineSample >::size_type new_size)
        resize(VectorLineSample self, std::vector< cphd::LineSample >::size_type new_size, LineSample x)
        """
        return _cphd.VectorLineSample_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(VectorLineSample self, std::vector< cphd::LineSample >::iterator pos, LineSample x) -> std::vector< cphd::LineSample >::iterator
        insert(VectorLineSample self, std::vector< cphd::LineSample >::iterator pos, std::vector< cphd::LineSample >::size_type n, LineSample x)
        """
        return _cphd.VectorLineSample_insert(self, *args)


    def reserve(self, n: 'std::vector< cphd::LineSample >::size_type') -> "void":
        """reserve(VectorLineSample self, std::vector< cphd::LineSample >::size_type n)"""
        return _cphd.VectorLineSample_reserve(self, n)


    def capacity(self) -> "std::vector< cphd::LineSample >::size_type":
        """capacity(VectorLineSample self) -> std::vector< cphd::LineSample >::size_type"""
        return _cphd.VectorLineSample_capacity(self)


    def __getstate__(self):
    # Return a nonempty (thus non-false) tuple with dummy value in first position
        return (-1, tuple(pickle.dumps(elem) for elem in self))

    def __setstate__(self, state):
        self.__init__()
    # State will have a dummy entry in the first position
        for elem in state[1]:
            self.push_back(pickle.loads(elem))

    __swig_destroy__ = _cphd.delete_VectorLineSample
    __del__ = lambda self: None
VectorLineSample_swigregister = _cphd.VectorLineSample_swigregister
VectorLineSample_swigregister(VectorLineSample)

class VectorSegment(_object):
    """Proxy of C++ std::vector<(cphd::Segment)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorSegment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorSegment, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(VectorSegment self) -> SwigPyIterator"""
        return _cphd.VectorSegment_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(VectorSegment self) -> bool"""
        return _cphd.VectorSegment___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(VectorSegment self) -> bool"""
        return _cphd.VectorSegment___bool__(self)


    def __len__(self) -> "std::vector< cphd::Segment >::size_type":
        """__len__(VectorSegment self) -> std::vector< cphd::Segment >::size_type"""
        return _cphd.VectorSegment___len__(self)


    def __getslice__(self, i: 'std::vector< cphd::Segment >::difference_type', j: 'std::vector< cphd::Segment >::difference_type') -> "std::vector< cphd::Segment,std::allocator< cphd::Segment > > *":
        """__getslice__(VectorSegment self, std::vector< cphd::Segment >::difference_type i, std::vector< cphd::Segment >::difference_type j) -> VectorSegment"""
        return _cphd.VectorSegment___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(VectorSegment self, std::vector< cphd::Segment >::difference_type i, std::vector< cphd::Segment >::difference_type j)
        __setslice__(VectorSegment self, std::vector< cphd::Segment >::difference_type i, std::vector< cphd::Segment >::difference_type j, VectorSegment v)
        """
        return _cphd.VectorSegment___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< cphd::Segment >::difference_type', j: 'std::vector< cphd::Segment >::difference_type') -> "void":
        """__delslice__(VectorSegment self, std::vector< cphd::Segment >::difference_type i, std::vector< cphd::Segment >::difference_type j)"""
        return _cphd.VectorSegment___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(VectorSegment self, std::vector< cphd::Segment >::difference_type i)
        __delitem__(VectorSegment self, PySliceObject * slice)
        """
        return _cphd.VectorSegment___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< cphd::Segment >::value_type const &":
        """
        __getitem__(VectorSegment self, PySliceObject * slice) -> VectorSegment
        __getitem__(VectorSegment self, std::vector< cphd::Segment >::difference_type i) -> Segment
        """
        return _cphd.VectorSegment___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(VectorSegment self, PySliceObject * slice, VectorSegment v)
        __setitem__(VectorSegment self, PySliceObject * slice)
        __setitem__(VectorSegment self, std::vector< cphd::Segment >::difference_type i, Segment x)
        """
        return _cphd.VectorSegment___setitem__(self, *args)


    def pop(self) -> "std::vector< cphd::Segment >::value_type":
        """pop(VectorSegment self) -> Segment"""
        return _cphd.VectorSegment_pop(self)


    def append(self, x: 'Segment') -> "void":
        """append(VectorSegment self, Segment x)"""
        return _cphd.VectorSegment_append(self, x)


    def empty(self) -> "bool":
        """empty(VectorSegment self) -> bool"""
        return _cphd.VectorSegment_empty(self)


    def size(self) -> "std::vector< cphd::Segment >::size_type":
        """size(VectorSegment self) -> std::vector< cphd::Segment >::size_type"""
        return _cphd.VectorSegment_size(self)


    def swap(self, v: 'VectorSegment') -> "void":
        """swap(VectorSegment self, VectorSegment v)"""
        return _cphd.VectorSegment_swap(self, v)


    def begin(self) -> "std::vector< cphd::Segment >::iterator":
        """begin(VectorSegment self) -> std::vector< cphd::Segment >::iterator"""
        return _cphd.VectorSegment_begin(self)


    def end(self) -> "std::vector< cphd::Segment >::iterator":
        """end(VectorSegment self) -> std::vector< cphd::Segment >::iterator"""
        return _cphd.VectorSegment_end(self)


    def rbegin(self) -> "std::vector< cphd::Segment >::reverse_iterator":
        """rbegin(VectorSegment self) -> std::vector< cphd::Segment >::reverse_iterator"""
        return _cphd.VectorSegment_rbegin(self)


    def rend(self) -> "std::vector< cphd::Segment >::reverse_iterator":
        """rend(VectorSegment self) -> std::vector< cphd::Segment >::reverse_iterator"""
        return _cphd.VectorSegment_rend(self)


    def clear(self) -> "void":
        """clear(VectorSegment self)"""
        return _cphd.VectorSegment_clear(self)


    def get_allocator(self) -> "std::vector< cphd::Segment >::allocator_type":
        """get_allocator(VectorSegment self) -> std::vector< cphd::Segment >::allocator_type"""
        return _cphd.VectorSegment_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(VectorSegment self)"""
        return _cphd.VectorSegment_pop_back(self)


    def erase(self, *args) -> "std::vector< cphd::Segment >::iterator":
        """
        erase(VectorSegment self, std::vector< cphd::Segment >::iterator pos) -> std::vector< cphd::Segment >::iterator
        erase(VectorSegment self, std::vector< cphd::Segment >::iterator first, std::vector< cphd::Segment >::iterator last) -> std::vector< cphd::Segment >::iterator
        """
        return _cphd.VectorSegment_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(cphd::Segment)> self) -> VectorSegment
        __init__(std::vector<(cphd::Segment)> self, VectorSegment arg2) -> VectorSegment
        __init__(std::vector<(cphd::Segment)> self, std::vector< cphd::Segment >::size_type size) -> VectorSegment
        __init__(std::vector<(cphd::Segment)> self, std::vector< cphd::Segment >::size_type size, Segment value) -> VectorSegment
        """
        this = _cphd.new_VectorSegment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'Segment') -> "void":
        """push_back(VectorSegment self, Segment x)"""
        return _cphd.VectorSegment_push_back(self, x)


    def front(self) -> "std::vector< cphd::Segment >::value_type const &":
        """front(VectorSegment self) -> Segment"""
        return _cphd.VectorSegment_front(self)


    def back(self) -> "std::vector< cphd::Segment >::value_type const &":
        """back(VectorSegment self) -> Segment"""
        return _cphd.VectorSegment_back(self)


    def assign(self, n: 'std::vector< cphd::Segment >::size_type', x: 'Segment') -> "void":
        """assign(VectorSegment self, std::vector< cphd::Segment >::size_type n, Segment x)"""
        return _cphd.VectorSegment_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(VectorSegment self, std::vector< cphd::Segment >::size_type new_size)
        resize(VectorSegment self, std::vector< cphd::Segment >::size_type new_size, Segment x)
        """
        return _cphd.VectorSegment_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(VectorSegment self, std::vector< cphd::Segment >::iterator pos, Segment x) -> std::vector< cphd::Segment >::iterator
        insert(VectorSegment self, std::vector< cphd::Segment >::iterator pos, std::vector< cphd::Segment >::size_type n, Segment x)
        """
        return _cphd.VectorSegment_insert(self, *args)


    def reserve(self, n: 'std::vector< cphd::Segment >::size_type') -> "void":
        """reserve(VectorSegment self, std::vector< cphd::Segment >::size_type n)"""
        return _cphd.VectorSegment_reserve(self, n)


    def capacity(self) -> "std::vector< cphd::Segment >::size_type":
        """capacity(VectorSegment self) -> std::vector< cphd::Segment >::size_type"""
        return _cphd.VectorSegment_capacity(self)


    def __getstate__(self):
    # Return a nonempty (thus non-false) tuple with dummy value in first position
        return (-1, tuple(pickle.dumps(elem) for elem in self))

    def __setstate__(self, state):
        self.__init__()
    # State will have a dummy entry in the first position
        for elem in state[1]:
            self.push_back(pickle.loads(elem))

    __swig_destroy__ = _cphd.delete_VectorSegment
    __del__ = lambda self: None
VectorSegment_swigregister = _cphd.VectorSegment_swigregister
VectorSegment_swigregister(VectorSegment)

class VectorChannelParameters(_object):
    """Proxy of C++ std::vector<(cphd::ChannelParameter)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorChannelParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorChannelParameters, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(VectorChannelParameters self) -> SwigPyIterator"""
        return _cphd.VectorChannelParameters_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(VectorChannelParameters self) -> bool"""
        return _cphd.VectorChannelParameters___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(VectorChannelParameters self) -> bool"""
        return _cphd.VectorChannelParameters___bool__(self)


    def __len__(self) -> "std::vector< cphd::ChannelParameter >::size_type":
        """__len__(VectorChannelParameters self) -> std::vector< cphd::ChannelParameter >::size_type"""
        return _cphd.VectorChannelParameters___len__(self)


    def __getslice__(self, i: 'std::vector< cphd::ChannelParameter >::difference_type', j: 'std::vector< cphd::ChannelParameter >::difference_type') -> "std::vector< cphd::ChannelParameter,std::allocator< cphd::ChannelParameter > > *":
        """__getslice__(VectorChannelParameters self, std::vector< cphd::ChannelParameter >::difference_type i, std::vector< cphd::ChannelParameter >::difference_type j) -> VectorChannelParameters"""
        return _cphd.VectorChannelParameters___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(VectorChannelParameters self, std::vector< cphd::ChannelParameter >::difference_type i, std::vector< cphd::ChannelParameter >::difference_type j)
        __setslice__(VectorChannelParameters self, std::vector< cphd::ChannelParameter >::difference_type i, std::vector< cphd::ChannelParameter >::difference_type j, VectorChannelParameters v)
        """
        return _cphd.VectorChannelParameters___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< cphd::ChannelParameter >::difference_type', j: 'std::vector< cphd::ChannelParameter >::difference_type') -> "void":
        """__delslice__(VectorChannelParameters self, std::vector< cphd::ChannelParameter >::difference_type i, std::vector< cphd::ChannelParameter >::difference_type j)"""
        return _cphd.VectorChannelParameters___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(VectorChannelParameters self, std::vector< cphd::ChannelParameter >::difference_type i)
        __delitem__(VectorChannelParameters self, PySliceObject * slice)
        """
        return _cphd.VectorChannelParameters___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< cphd::ChannelParameter >::value_type const &":
        """
        __getitem__(VectorChannelParameters self, PySliceObject * slice) -> VectorChannelParameters
        __getitem__(VectorChannelParameters self, std::vector< cphd::ChannelParameter >::difference_type i) -> ChannelParameter
        """
        return _cphd.VectorChannelParameters___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(VectorChannelParameters self, PySliceObject * slice, VectorChannelParameters v)
        __setitem__(VectorChannelParameters self, PySliceObject * slice)
        __setitem__(VectorChannelParameters self, std::vector< cphd::ChannelParameter >::difference_type i, ChannelParameter x)
        """
        return _cphd.VectorChannelParameters___setitem__(self, *args)


    def pop(self) -> "std::vector< cphd::ChannelParameter >::value_type":
        """pop(VectorChannelParameters self) -> ChannelParameter"""
        return _cphd.VectorChannelParameters_pop(self)


    def append(self, x: 'ChannelParameter') -> "void":
        """append(VectorChannelParameters self, ChannelParameter x)"""
        return _cphd.VectorChannelParameters_append(self, x)


    def empty(self) -> "bool":
        """empty(VectorChannelParameters self) -> bool"""
        return _cphd.VectorChannelParameters_empty(self)


    def size(self) -> "std::vector< cphd::ChannelParameter >::size_type":
        """size(VectorChannelParameters self) -> std::vector< cphd::ChannelParameter >::size_type"""
        return _cphd.VectorChannelParameters_size(self)


    def swap(self, v: 'VectorChannelParameters') -> "void":
        """swap(VectorChannelParameters self, VectorChannelParameters v)"""
        return _cphd.VectorChannelParameters_swap(self, v)


    def begin(self) -> "std::vector< cphd::ChannelParameter >::iterator":
        """begin(VectorChannelParameters self) -> std::vector< cphd::ChannelParameter >::iterator"""
        return _cphd.VectorChannelParameters_begin(self)


    def end(self) -> "std::vector< cphd::ChannelParameter >::iterator":
        """end(VectorChannelParameters self) -> std::vector< cphd::ChannelParameter >::iterator"""
        return _cphd.VectorChannelParameters_end(self)


    def rbegin(self) -> "std::vector< cphd::ChannelParameter >::reverse_iterator":
        """rbegin(VectorChannelParameters self) -> std::vector< cphd::ChannelParameter >::reverse_iterator"""
        return _cphd.VectorChannelParameters_rbegin(self)


    def rend(self) -> "std::vector< cphd::ChannelParameter >::reverse_iterator":
        """rend(VectorChannelParameters self) -> std::vector< cphd::ChannelParameter >::reverse_iterator"""
        return _cphd.VectorChannelParameters_rend(self)


    def clear(self) -> "void":
        """clear(VectorChannelParameters self)"""
        return _cphd.VectorChannelParameters_clear(self)


    def get_allocator(self) -> "std::vector< cphd::ChannelParameter >::allocator_type":
        """get_allocator(VectorChannelParameters self) -> std::vector< cphd::ChannelParameter >::allocator_type"""
        return _cphd.VectorChannelParameters_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(VectorChannelParameters self)"""
        return _cphd.VectorChannelParameters_pop_back(self)


    def erase(self, *args) -> "std::vector< cphd::ChannelParameter >::iterator":
        """
        erase(VectorChannelParameters self, std::vector< cphd::ChannelParameter >::iterator pos) -> std::vector< cphd::ChannelParameter >::iterator
        erase(VectorChannelParameters self, std::vector< cphd::ChannelParameter >::iterator first, std::vector< cphd::ChannelParameter >::iterator last) -> std::vector< cphd::ChannelParameter >::iterator
        """
        return _cphd.VectorChannelParameters_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(cphd::ChannelParameter)> self) -> VectorChannelParameters
        __init__(std::vector<(cphd::ChannelParameter)> self, VectorChannelParameters arg2) -> VectorChannelParameters
        __init__(std::vector<(cphd::ChannelParameter)> self, std::vector< cphd::ChannelParameter >::size_type size) -> VectorChannelParameters
        __init__(std::vector<(cphd::ChannelParameter)> self, std::vector< cphd::ChannelParameter >::size_type size, ChannelParameter value) -> VectorChannelParameters
        """
        this = _cphd.new_VectorChannelParameters(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'ChannelParameter') -> "void":
        """push_back(VectorChannelParameters self, ChannelParameter x)"""
        return _cphd.VectorChannelParameters_push_back(self, x)


    def front(self) -> "std::vector< cphd::ChannelParameter >::value_type const &":
        """front(VectorChannelParameters self) -> ChannelParameter"""
        return _cphd.VectorChannelParameters_front(self)


    def back(self) -> "std::vector< cphd::ChannelParameter >::value_type const &":
        """back(VectorChannelParameters self) -> ChannelParameter"""
        return _cphd.VectorChannelParameters_back(self)


    def assign(self, n: 'std::vector< cphd::ChannelParameter >::size_type', x: 'ChannelParameter') -> "void":
        """assign(VectorChannelParameters self, std::vector< cphd::ChannelParameter >::size_type n, ChannelParameter x)"""
        return _cphd.VectorChannelParameters_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(VectorChannelParameters self, std::vector< cphd::ChannelParameter >::size_type new_size)
        resize(VectorChannelParameters self, std::vector< cphd::ChannelParameter >::size_type new_size, ChannelParameter x)
        """
        return _cphd.VectorChannelParameters_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(VectorChannelParameters self, std::vector< cphd::ChannelParameter >::iterator pos, ChannelParameter x) -> std::vector< cphd::ChannelParameter >::iterator
        insert(VectorChannelParameters self, std::vector< cphd::ChannelParameter >::iterator pos, std::vector< cphd::ChannelParameter >::size_type n, ChannelParameter x)
        """
        return _cphd.VectorChannelParameters_insert(self, *args)


    def reserve(self, n: 'std::vector< cphd::ChannelParameter >::size_type') -> "void":
        """reserve(VectorChannelParameters self, std::vector< cphd::ChannelParameter >::size_type n)"""
        return _cphd.VectorChannelParameters_reserve(self, n)


    def capacity(self) -> "std::vector< cphd::ChannelParameter >::size_type":
        """capacity(VectorChannelParameters self) -> std::vector< cphd::ChannelParameter >::size_type"""
        return _cphd.VectorChannelParameters_capacity(self)


    def __getstate__(self):
    # Return a nonempty (thus non-false) tuple with dummy value in first position
        return (-1, tuple(pickle.dumps(elem) for elem in self))

    def __setstate__(self, state):
        self.__init__()
    # State will have a dummy entry in the first position
        for elem in state[1]:
            self.push_back(pickle.loads(elem))

    __swig_destroy__ = _cphd.delete_VectorChannelParameters
    __del__ = lambda self: None
VectorChannelParameters_swigregister = _cphd.VectorChannelParameters_swigregister
VectorChannelParameters_swigregister(VectorChannelParameters)

class VectorPoint(_object):
    """Proxy of C++ std::vector<(cphd::Point)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorPoint, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(VectorPoint self) -> SwigPyIterator"""
        return _cphd.VectorPoint_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(VectorPoint self) -> bool"""
        return _cphd.VectorPoint___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(VectorPoint self) -> bool"""
        return _cphd.VectorPoint___bool__(self)


    def __len__(self) -> "std::vector< cphd::Point >::size_type":
        """__len__(VectorPoint self) -> std::vector< cphd::Point >::size_type"""
        return _cphd.VectorPoint___len__(self)


    def __getslice__(self, i: 'std::vector< cphd::Point >::difference_type', j: 'std::vector< cphd::Point >::difference_type') -> "std::vector< cphd::Point,std::allocator< cphd::Point > > *":
        """__getslice__(VectorPoint self, std::vector< cphd::Point >::difference_type i, std::vector< cphd::Point >::difference_type j) -> VectorPoint"""
        return _cphd.VectorPoint___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(VectorPoint self, std::vector< cphd::Point >::difference_type i, std::vector< cphd::Point >::difference_type j)
        __setslice__(VectorPoint self, std::vector< cphd::Point >::difference_type i, std::vector< cphd::Point >::difference_type j, VectorPoint v)
        """
        return _cphd.VectorPoint___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< cphd::Point >::difference_type', j: 'std::vector< cphd::Point >::difference_type') -> "void":
        """__delslice__(VectorPoint self, std::vector< cphd::Point >::difference_type i, std::vector< cphd::Point >::difference_type j)"""
        return _cphd.VectorPoint___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(VectorPoint self, std::vector< cphd::Point >::difference_type i)
        __delitem__(VectorPoint self, PySliceObject * slice)
        """
        return _cphd.VectorPoint___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< cphd::Point >::value_type const &":
        """
        __getitem__(VectorPoint self, PySliceObject * slice) -> VectorPoint
        __getitem__(VectorPoint self, std::vector< cphd::Point >::difference_type i) -> Point
        """
        return _cphd.VectorPoint___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(VectorPoint self, PySliceObject * slice, VectorPoint v)
        __setitem__(VectorPoint self, PySliceObject * slice)
        __setitem__(VectorPoint self, std::vector< cphd::Point >::difference_type i, Point x)
        """
        return _cphd.VectorPoint___setitem__(self, *args)


    def pop(self) -> "std::vector< cphd::Point >::value_type":
        """pop(VectorPoint self) -> Point"""
        return _cphd.VectorPoint_pop(self)


    def append(self, x: 'Point') -> "void":
        """append(VectorPoint self, Point x)"""
        return _cphd.VectorPoint_append(self, x)


    def empty(self) -> "bool":
        """empty(VectorPoint self) -> bool"""
        return _cphd.VectorPoint_empty(self)


    def size(self) -> "std::vector< cphd::Point >::size_type":
        """size(VectorPoint self) -> std::vector< cphd::Point >::size_type"""
        return _cphd.VectorPoint_size(self)


    def swap(self, v: 'VectorPoint') -> "void":
        """swap(VectorPoint self, VectorPoint v)"""
        return _cphd.VectorPoint_swap(self, v)


    def begin(self) -> "std::vector< cphd::Point >::iterator":
        """begin(VectorPoint self) -> std::vector< cphd::Point >::iterator"""
        return _cphd.VectorPoint_begin(self)


    def end(self) -> "std::vector< cphd::Point >::iterator":
        """end(VectorPoint self) -> std::vector< cphd::Point >::iterator"""
        return _cphd.VectorPoint_end(self)


    def rbegin(self) -> "std::vector< cphd::Point >::reverse_iterator":
        """rbegin(VectorPoint self) -> std::vector< cphd::Point >::reverse_iterator"""
        return _cphd.VectorPoint_rbegin(self)


    def rend(self) -> "std::vector< cphd::Point >::reverse_iterator":
        """rend(VectorPoint self) -> std::vector< cphd::Point >::reverse_iterator"""
        return _cphd.VectorPoint_rend(self)


    def clear(self) -> "void":
        """clear(VectorPoint self)"""
        return _cphd.VectorPoint_clear(self)


    def get_allocator(self) -> "std::vector< cphd::Point >::allocator_type":
        """get_allocator(VectorPoint self) -> std::vector< cphd::Point >::allocator_type"""
        return _cphd.VectorPoint_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(VectorPoint self)"""
        return _cphd.VectorPoint_pop_back(self)


    def erase(self, *args) -> "std::vector< cphd::Point >::iterator":
        """
        erase(VectorPoint self, std::vector< cphd::Point >::iterator pos) -> std::vector< cphd::Point >::iterator
        erase(VectorPoint self, std::vector< cphd::Point >::iterator first, std::vector< cphd::Point >::iterator last) -> std::vector< cphd::Point >::iterator
        """
        return _cphd.VectorPoint_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(cphd::Point)> self) -> VectorPoint
        __init__(std::vector<(cphd::Point)> self, VectorPoint arg2) -> VectorPoint
        __init__(std::vector<(cphd::Point)> self, std::vector< cphd::Point >::size_type size) -> VectorPoint
        __init__(std::vector<(cphd::Point)> self, std::vector< cphd::Point >::size_type size, Point value) -> VectorPoint
        """
        this = _cphd.new_VectorPoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'Point') -> "void":
        """push_back(VectorPoint self, Point x)"""
        return _cphd.VectorPoint_push_back(self, x)


    def front(self) -> "std::vector< cphd::Point >::value_type const &":
        """front(VectorPoint self) -> Point"""
        return _cphd.VectorPoint_front(self)


    def back(self) -> "std::vector< cphd::Point >::value_type const &":
        """back(VectorPoint self) -> Point"""
        return _cphd.VectorPoint_back(self)


    def assign(self, n: 'std::vector< cphd::Point >::size_type', x: 'Point') -> "void":
        """assign(VectorPoint self, std::vector< cphd::Point >::size_type n, Point x)"""
        return _cphd.VectorPoint_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(VectorPoint self, std::vector< cphd::Point >::size_type new_size)
        resize(VectorPoint self, std::vector< cphd::Point >::size_type new_size, Point x)
        """
        return _cphd.VectorPoint_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(VectorPoint self, std::vector< cphd::Point >::iterator pos, Point x) -> std::vector< cphd::Point >::iterator
        insert(VectorPoint self, std::vector< cphd::Point >::iterator pos, std::vector< cphd::Point >::size_type n, Point x)
        """
        return _cphd.VectorPoint_insert(self, *args)


    def reserve(self, n: 'std::vector< cphd::Point >::size_type') -> "void":
        """reserve(VectorPoint self, std::vector< cphd::Point >::size_type n)"""
        return _cphd.VectorPoint_reserve(self, n)


    def capacity(self) -> "std::vector< cphd::Point >::size_type":
        """capacity(VectorPoint self) -> std::vector< cphd::Point >::size_type"""
        return _cphd.VectorPoint_capacity(self)


    def __getstate__(self):
    # Return a nonempty (thus non-false) tuple with dummy value in first position
        return (-1, tuple(pickle.dumps(elem) for elem in self))

    def __setstate__(self, state):
        self.__init__()
    # State will have a dummy entry in the first position
        for elem in state[1]:
            self.push_back(pickle.loads(elem))

    __swig_destroy__ = _cphd.delete_VectorPoint
    __del__ = lambda self: None
VectorPoint_swigregister = _cphd.VectorPoint_swigregister
VectorPoint_swigregister(VectorPoint)

class VectorDataChannel(_object):
    """Proxy of C++ std::vector<(cphd::Data::Channel)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorDataChannel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorDataChannel, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(VectorDataChannel self) -> SwigPyIterator"""
        return _cphd.VectorDataChannel_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(VectorDataChannel self) -> bool"""
        return _cphd.VectorDataChannel___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(VectorDataChannel self) -> bool"""
        return _cphd.VectorDataChannel___bool__(self)


    def __len__(self) -> "std::vector< cphd::Data::Channel >::size_type":
        """__len__(VectorDataChannel self) -> std::vector< cphd::Data::Channel >::size_type"""
        return _cphd.VectorDataChannel___len__(self)


    def __getslice__(self, i: 'std::vector< cphd::Data::Channel >::difference_type', j: 'std::vector< cphd::Data::Channel >::difference_type') -> "std::vector< cphd::Data::Channel,std::allocator< cphd::Data::Channel > > *":
        """__getslice__(VectorDataChannel self, std::vector< cphd::Data::Channel >::difference_type i, std::vector< cphd::Data::Channel >::difference_type j) -> VectorDataChannel"""
        return _cphd.VectorDataChannel___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(VectorDataChannel self, std::vector< cphd::Data::Channel >::difference_type i, std::vector< cphd::Data::Channel >::difference_type j)
        __setslice__(VectorDataChannel self, std::vector< cphd::Data::Channel >::difference_type i, std::vector< cphd::Data::Channel >::difference_type j, VectorDataChannel v)
        """
        return _cphd.VectorDataChannel___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< cphd::Data::Channel >::difference_type', j: 'std::vector< cphd::Data::Channel >::difference_type') -> "void":
        """__delslice__(VectorDataChannel self, std::vector< cphd::Data::Channel >::difference_type i, std::vector< cphd::Data::Channel >::difference_type j)"""
        return _cphd.VectorDataChannel___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(VectorDataChannel self, std::vector< cphd::Data::Channel >::difference_type i)
        __delitem__(VectorDataChannel self, PySliceObject * slice)
        """
        return _cphd.VectorDataChannel___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< cphd::Data::Channel >::value_type const &":
        """
        __getitem__(VectorDataChannel self, PySliceObject * slice) -> VectorDataChannel
        __getitem__(VectorDataChannel self, std::vector< cphd::Data::Channel >::difference_type i) -> DataChannel
        """
        return _cphd.VectorDataChannel___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(VectorDataChannel self, PySliceObject * slice, VectorDataChannel v)
        __setitem__(VectorDataChannel self, PySliceObject * slice)
        __setitem__(VectorDataChannel self, std::vector< cphd::Data::Channel >::difference_type i, DataChannel x)
        """
        return _cphd.VectorDataChannel___setitem__(self, *args)


    def pop(self) -> "std::vector< cphd::Data::Channel >::value_type":
        """pop(VectorDataChannel self) -> DataChannel"""
        return _cphd.VectorDataChannel_pop(self)


    def append(self, x: 'DataChannel') -> "void":
        """append(VectorDataChannel self, DataChannel x)"""
        return _cphd.VectorDataChannel_append(self, x)


    def empty(self) -> "bool":
        """empty(VectorDataChannel self) -> bool"""
        return _cphd.VectorDataChannel_empty(self)


    def size(self) -> "std::vector< cphd::Data::Channel >::size_type":
        """size(VectorDataChannel self) -> std::vector< cphd::Data::Channel >::size_type"""
        return _cphd.VectorDataChannel_size(self)


    def swap(self, v: 'VectorDataChannel') -> "void":
        """swap(VectorDataChannel self, VectorDataChannel v)"""
        return _cphd.VectorDataChannel_swap(self, v)


    def begin(self) -> "std::vector< cphd::Data::Channel >::iterator":
        """begin(VectorDataChannel self) -> std::vector< cphd::Data::Channel >::iterator"""
        return _cphd.VectorDataChannel_begin(self)


    def end(self) -> "std::vector< cphd::Data::Channel >::iterator":
        """end(VectorDataChannel self) -> std::vector< cphd::Data::Channel >::iterator"""
        return _cphd.VectorDataChannel_end(self)


    def rbegin(self) -> "std::vector< cphd::Data::Channel >::reverse_iterator":
        """rbegin(VectorDataChannel self) -> std::vector< cphd::Data::Channel >::reverse_iterator"""
        return _cphd.VectorDataChannel_rbegin(self)


    def rend(self) -> "std::vector< cphd::Data::Channel >::reverse_iterator":
        """rend(VectorDataChannel self) -> std::vector< cphd::Data::Channel >::reverse_iterator"""
        return _cphd.VectorDataChannel_rend(self)


    def clear(self) -> "void":
        """clear(VectorDataChannel self)"""
        return _cphd.VectorDataChannel_clear(self)


    def get_allocator(self) -> "std::vector< cphd::Data::Channel >::allocator_type":
        """get_allocator(VectorDataChannel self) -> std::vector< cphd::Data::Channel >::allocator_type"""
        return _cphd.VectorDataChannel_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(VectorDataChannel self)"""
        return _cphd.VectorDataChannel_pop_back(self)


    def erase(self, *args) -> "std::vector< cphd::Data::Channel >::iterator":
        """
        erase(VectorDataChannel self, std::vector< cphd::Data::Channel >::iterator pos) -> std::vector< cphd::Data::Channel >::iterator
        erase(VectorDataChannel self, std::vector< cphd::Data::Channel >::iterator first, std::vector< cphd::Data::Channel >::iterator last) -> std::vector< cphd::Data::Channel >::iterator
        """
        return _cphd.VectorDataChannel_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(cphd::Data::Channel)> self) -> VectorDataChannel
        __init__(std::vector<(cphd::Data::Channel)> self, VectorDataChannel arg2) -> VectorDataChannel
        __init__(std::vector<(cphd::Data::Channel)> self, std::vector< cphd::Data::Channel >::size_type size) -> VectorDataChannel
        __init__(std::vector<(cphd::Data::Channel)> self, std::vector< cphd::Data::Channel >::size_type size, DataChannel value) -> VectorDataChannel
        """
        this = _cphd.new_VectorDataChannel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'DataChannel') -> "void":
        """push_back(VectorDataChannel self, DataChannel x)"""
        return _cphd.VectorDataChannel_push_back(self, x)


    def front(self) -> "std::vector< cphd::Data::Channel >::value_type const &":
        """front(VectorDataChannel self) -> DataChannel"""
        return _cphd.VectorDataChannel_front(self)


    def back(self) -> "std::vector< cphd::Data::Channel >::value_type const &":
        """back(VectorDataChannel self) -> DataChannel"""
        return _cphd.VectorDataChannel_back(self)


    def assign(self, n: 'std::vector< cphd::Data::Channel >::size_type', x: 'DataChannel') -> "void":
        """assign(VectorDataChannel self, std::vector< cphd::Data::Channel >::size_type n, DataChannel x)"""
        return _cphd.VectorDataChannel_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(VectorDataChannel self, std::vector< cphd::Data::Channel >::size_type new_size)
        resize(VectorDataChannel self, std::vector< cphd::Data::Channel >::size_type new_size, DataChannel x)
        """
        return _cphd.VectorDataChannel_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(VectorDataChannel self, std::vector< cphd::Data::Channel >::iterator pos, DataChannel x) -> std::vector< cphd::Data::Channel >::iterator
        insert(VectorDataChannel self, std::vector< cphd::Data::Channel >::iterator pos, std::vector< cphd::Data::Channel >::size_type n, DataChannel x)
        """
        return _cphd.VectorDataChannel_insert(self, *args)


    def reserve(self, n: 'std::vector< cphd::Data::Channel >::size_type') -> "void":
        """reserve(VectorDataChannel self, std::vector< cphd::Data::Channel >::size_type n)"""
        return _cphd.VectorDataChannel_reserve(self, n)


    def capacity(self) -> "std::vector< cphd::Data::Channel >::size_type":
        """capacity(VectorDataChannel self) -> std::vector< cphd::Data::Channel >::size_type"""
        return _cphd.VectorDataChannel_capacity(self)


    def __getstate__(self):
    # Return a nonempty (thus non-false) tuple with dummy value in first position
        return (-1, tuple(pickle.dumps(elem) for elem in self))

    def __setstate__(self, state):
        self.__init__()
    # State will have a dummy entry in the first position
        for elem in state[1]:
            self.push_back(pickle.loads(elem))

    __swig_destroy__ = _cphd.delete_VectorDataChannel
    __del__ = lambda self: None
VectorDataChannel_swigregister = _cphd.VectorDataChannel_swigregister
VectorDataChannel_swigregister(VectorDataChannel)

class VectorAntennaParameters(_object):
    """Proxy of C++ std::vector<(six::sicd::AntennaParameters)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorAntennaParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorAntennaParameters, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(VectorAntennaParameters self) -> SwigPyIterator"""
        return _cphd.VectorAntennaParameters_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(VectorAntennaParameters self) -> bool"""
        return _cphd.VectorAntennaParameters___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(VectorAntennaParameters self) -> bool"""
        return _cphd.VectorAntennaParameters___bool__(self)


    def __len__(self) -> "std::vector< six::sicd::AntennaParameters >::size_type":
        """__len__(VectorAntennaParameters self) -> std::vector< six::sicd::AntennaParameters >::size_type"""
        return _cphd.VectorAntennaParameters___len__(self)


    def __getslice__(self, i: 'std::vector< six::sicd::AntennaParameters >::difference_type', j: 'std::vector< six::sicd::AntennaParameters >::difference_type') -> "std::vector< six::sicd::AntennaParameters,std::allocator< six::sicd::AntennaParameters > > *":
        """__getslice__(VectorAntennaParameters self, std::vector< six::sicd::AntennaParameters >::difference_type i, std::vector< six::sicd::AntennaParameters >::difference_type j) -> VectorAntennaParameters"""
        return _cphd.VectorAntennaParameters___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(VectorAntennaParameters self, std::vector< six::sicd::AntennaParameters >::difference_type i, std::vector< six::sicd::AntennaParameters >::difference_type j)
        __setslice__(VectorAntennaParameters self, std::vector< six::sicd::AntennaParameters >::difference_type i, std::vector< six::sicd::AntennaParameters >::difference_type j, VectorAntennaParameters v)
        """
        return _cphd.VectorAntennaParameters___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< six::sicd::AntennaParameters >::difference_type', j: 'std::vector< six::sicd::AntennaParameters >::difference_type') -> "void":
        """__delslice__(VectorAntennaParameters self, std::vector< six::sicd::AntennaParameters >::difference_type i, std::vector< six::sicd::AntennaParameters >::difference_type j)"""
        return _cphd.VectorAntennaParameters___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(VectorAntennaParameters self, std::vector< six::sicd::AntennaParameters >::difference_type i)
        __delitem__(VectorAntennaParameters self, PySliceObject * slice)
        """
        return _cphd.VectorAntennaParameters___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< six::sicd::AntennaParameters >::value_type const &":
        """
        __getitem__(VectorAntennaParameters self, PySliceObject * slice) -> VectorAntennaParameters
        __getitem__(VectorAntennaParameters self, std::vector< six::sicd::AntennaParameters >::difference_type i) -> AntennaParameters
        """
        return _cphd.VectorAntennaParameters___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(VectorAntennaParameters self, PySliceObject * slice, VectorAntennaParameters v)
        __setitem__(VectorAntennaParameters self, PySliceObject * slice)
        __setitem__(VectorAntennaParameters self, std::vector< six::sicd::AntennaParameters >::difference_type i, AntennaParameters x)
        """
        return _cphd.VectorAntennaParameters___setitem__(self, *args)


    def pop(self) -> "std::vector< six::sicd::AntennaParameters >::value_type":
        """pop(VectorAntennaParameters self) -> AntennaParameters"""
        return _cphd.VectorAntennaParameters_pop(self)


    def append(self, x: 'AntennaParameters') -> "void":
        """append(VectorAntennaParameters self, AntennaParameters x)"""
        return _cphd.VectorAntennaParameters_append(self, x)


    def empty(self) -> "bool":
        """empty(VectorAntennaParameters self) -> bool"""
        return _cphd.VectorAntennaParameters_empty(self)


    def size(self) -> "std::vector< six::sicd::AntennaParameters >::size_type":
        """size(VectorAntennaParameters self) -> std::vector< six::sicd::AntennaParameters >::size_type"""
        return _cphd.VectorAntennaParameters_size(self)


    def swap(self, v: 'VectorAntennaParameters') -> "void":
        """swap(VectorAntennaParameters self, VectorAntennaParameters v)"""
        return _cphd.VectorAntennaParameters_swap(self, v)


    def begin(self) -> "std::vector< six::sicd::AntennaParameters >::iterator":
        """begin(VectorAntennaParameters self) -> std::vector< six::sicd::AntennaParameters >::iterator"""
        return _cphd.VectorAntennaParameters_begin(self)


    def end(self) -> "std::vector< six::sicd::AntennaParameters >::iterator":
        """end(VectorAntennaParameters self) -> std::vector< six::sicd::AntennaParameters >::iterator"""
        return _cphd.VectorAntennaParameters_end(self)


    def rbegin(self) -> "std::vector< six::sicd::AntennaParameters >::reverse_iterator":
        """rbegin(VectorAntennaParameters self) -> std::vector< six::sicd::AntennaParameters >::reverse_iterator"""
        return _cphd.VectorAntennaParameters_rbegin(self)


    def rend(self) -> "std::vector< six::sicd::AntennaParameters >::reverse_iterator":
        """rend(VectorAntennaParameters self) -> std::vector< six::sicd::AntennaParameters >::reverse_iterator"""
        return _cphd.VectorAntennaParameters_rend(self)


    def clear(self) -> "void":
        """clear(VectorAntennaParameters self)"""
        return _cphd.VectorAntennaParameters_clear(self)


    def get_allocator(self) -> "std::vector< six::sicd::AntennaParameters >::allocator_type":
        """get_allocator(VectorAntennaParameters self) -> std::vector< six::sicd::AntennaParameters >::allocator_type"""
        return _cphd.VectorAntennaParameters_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(VectorAntennaParameters self)"""
        return _cphd.VectorAntennaParameters_pop_back(self)


    def erase(self, *args) -> "std::vector< six::sicd::AntennaParameters >::iterator":
        """
        erase(VectorAntennaParameters self, std::vector< six::sicd::AntennaParameters >::iterator pos) -> std::vector< six::sicd::AntennaParameters >::iterator
        erase(VectorAntennaParameters self, std::vector< six::sicd::AntennaParameters >::iterator first, std::vector< six::sicd::AntennaParameters >::iterator last) -> std::vector< six::sicd::AntennaParameters >::iterator
        """
        return _cphd.VectorAntennaParameters_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(six::sicd::AntennaParameters)> self) -> VectorAntennaParameters
        __init__(std::vector<(six::sicd::AntennaParameters)> self, VectorAntennaParameters arg2) -> VectorAntennaParameters
        __init__(std::vector<(six::sicd::AntennaParameters)> self, std::vector< six::sicd::AntennaParameters >::size_type size) -> VectorAntennaParameters
        __init__(std::vector<(six::sicd::AntennaParameters)> self, std::vector< six::sicd::AntennaParameters >::size_type size, AntennaParameters value) -> VectorAntennaParameters
        """
        this = _cphd.new_VectorAntennaParameters(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'AntennaParameters') -> "void":
        """push_back(VectorAntennaParameters self, AntennaParameters x)"""
        return _cphd.VectorAntennaParameters_push_back(self, x)


    def front(self) -> "std::vector< six::sicd::AntennaParameters >::value_type const &":
        """front(VectorAntennaParameters self) -> AntennaParameters"""
        return _cphd.VectorAntennaParameters_front(self)


    def back(self) -> "std::vector< six::sicd::AntennaParameters >::value_type const &":
        """back(VectorAntennaParameters self) -> AntennaParameters"""
        return _cphd.VectorAntennaParameters_back(self)


    def assign(self, n: 'std::vector< six::sicd::AntennaParameters >::size_type', x: 'AntennaParameters') -> "void":
        """assign(VectorAntennaParameters self, std::vector< six::sicd::AntennaParameters >::size_type n, AntennaParameters x)"""
        return _cphd.VectorAntennaParameters_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(VectorAntennaParameters self, std::vector< six::sicd::AntennaParameters >::size_type new_size)
        resize(VectorAntennaParameters self, std::vector< six::sicd::AntennaParameters >::size_type new_size, AntennaParameters x)
        """
        return _cphd.VectorAntennaParameters_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(VectorAntennaParameters self, std::vector< six::sicd::AntennaParameters >::iterator pos, AntennaParameters x) -> std::vector< six::sicd::AntennaParameters >::iterator
        insert(VectorAntennaParameters self, std::vector< six::sicd::AntennaParameters >::iterator pos, std::vector< six::sicd::AntennaParameters >::size_type n, AntennaParameters x)
        """
        return _cphd.VectorAntennaParameters_insert(self, *args)


    def reserve(self, n: 'std::vector< six::sicd::AntennaParameters >::size_type') -> "void":
        """reserve(VectorAntennaParameters self, std::vector< six::sicd::AntennaParameters >::size_type n)"""
        return _cphd.VectorAntennaParameters_reserve(self, n)


    def capacity(self) -> "std::vector< six::sicd::AntennaParameters >::size_type":
        """capacity(VectorAntennaParameters self) -> std::vector< six::sicd::AntennaParameters >::size_type"""
        return _cphd.VectorAntennaParameters_capacity(self)


    def __getstate__(self):
    # Return a nonempty (thus non-false) tuple with dummy value in first position
        return (-1, tuple(pickle.dumps(elem) for elem in self))

    def __setstate__(self, state):
        self.__init__()
    # State will have a dummy entry in the first position
        for elem in state[1]:
            self.push_back(pickle.loads(elem))

    __swig_destroy__ = _cphd.delete_VectorAntennaParameters
    __del__ = lambda self: None
VectorAntennaParameters_swigregister = _cphd.VectorAntennaParameters_swigregister
VectorAntennaParameters_swigregister(VectorAntennaParameters)

class VectorSupportArrayParameter(_object):
    """Proxy of C++ std::vector<(cphd::SupportArrayParameter)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorSupportArrayParameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorSupportArrayParameter, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(VectorSupportArrayParameter self) -> SwigPyIterator"""
        return _cphd.VectorSupportArrayParameter_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(VectorSupportArrayParameter self) -> bool"""
        return _cphd.VectorSupportArrayParameter___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(VectorSupportArrayParameter self) -> bool"""
        return _cphd.VectorSupportArrayParameter___bool__(self)


    def __len__(self) -> "std::vector< cphd::SupportArrayParameter >::size_type":
        """__len__(VectorSupportArrayParameter self) -> std::vector< cphd::SupportArrayParameter >::size_type"""
        return _cphd.VectorSupportArrayParameter___len__(self)


    def __getslice__(self, i: 'std::vector< cphd::SupportArrayParameter >::difference_type', j: 'std::vector< cphd::SupportArrayParameter >::difference_type') -> "std::vector< cphd::SupportArrayParameter,std::allocator< cphd::SupportArrayParameter > > *":
        """__getslice__(VectorSupportArrayParameter self, std::vector< cphd::SupportArrayParameter >::difference_type i, std::vector< cphd::SupportArrayParameter >::difference_type j) -> VectorSupportArrayParameter"""
        return _cphd.VectorSupportArrayParameter___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(VectorSupportArrayParameter self, std::vector< cphd::SupportArrayParameter >::difference_type i, std::vector< cphd::SupportArrayParameter >::difference_type j)
        __setslice__(VectorSupportArrayParameter self, std::vector< cphd::SupportArrayParameter >::difference_type i, std::vector< cphd::SupportArrayParameter >::difference_type j, VectorSupportArrayParameter v)
        """
        return _cphd.VectorSupportArrayParameter___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< cphd::SupportArrayParameter >::difference_type', j: 'std::vector< cphd::SupportArrayParameter >::difference_type') -> "void":
        """__delslice__(VectorSupportArrayParameter self, std::vector< cphd::SupportArrayParameter >::difference_type i, std::vector< cphd::SupportArrayParameter >::difference_type j)"""
        return _cphd.VectorSupportArrayParameter___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(VectorSupportArrayParameter self, std::vector< cphd::SupportArrayParameter >::difference_type i)
        __delitem__(VectorSupportArrayParameter self, PySliceObject * slice)
        """
        return _cphd.VectorSupportArrayParameter___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< cphd::SupportArrayParameter >::value_type const &":
        """
        __getitem__(VectorSupportArrayParameter self, PySliceObject * slice) -> VectorSupportArrayParameter
        __getitem__(VectorSupportArrayParameter self, std::vector< cphd::SupportArrayParameter >::difference_type i) -> SupportArrayParameter
        """
        return _cphd.VectorSupportArrayParameter___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(VectorSupportArrayParameter self, PySliceObject * slice, VectorSupportArrayParameter v)
        __setitem__(VectorSupportArrayParameter self, PySliceObject * slice)
        __setitem__(VectorSupportArrayParameter self, std::vector< cphd::SupportArrayParameter >::difference_type i, SupportArrayParameter x)
        """
        return _cphd.VectorSupportArrayParameter___setitem__(self, *args)


    def pop(self) -> "std::vector< cphd::SupportArrayParameter >::value_type":
        """pop(VectorSupportArrayParameter self) -> SupportArrayParameter"""
        return _cphd.VectorSupportArrayParameter_pop(self)


    def append(self, x: 'SupportArrayParameter') -> "void":
        """append(VectorSupportArrayParameter self, SupportArrayParameter x)"""
        return _cphd.VectorSupportArrayParameter_append(self, x)


    def empty(self) -> "bool":
        """empty(VectorSupportArrayParameter self) -> bool"""
        return _cphd.VectorSupportArrayParameter_empty(self)


    def size(self) -> "std::vector< cphd::SupportArrayParameter >::size_type":
        """size(VectorSupportArrayParameter self) -> std::vector< cphd::SupportArrayParameter >::size_type"""
        return _cphd.VectorSupportArrayParameter_size(self)


    def swap(self, v: 'VectorSupportArrayParameter') -> "void":
        """swap(VectorSupportArrayParameter self, VectorSupportArrayParameter v)"""
        return _cphd.VectorSupportArrayParameter_swap(self, v)


    def begin(self) -> "std::vector< cphd::SupportArrayParameter >::iterator":
        """begin(VectorSupportArrayParameter self) -> std::vector< cphd::SupportArrayParameter >::iterator"""
        return _cphd.VectorSupportArrayParameter_begin(self)


    def end(self) -> "std::vector< cphd::SupportArrayParameter >::iterator":
        """end(VectorSupportArrayParameter self) -> std::vector< cphd::SupportArrayParameter >::iterator"""
        return _cphd.VectorSupportArrayParameter_end(self)


    def rbegin(self) -> "std::vector< cphd::SupportArrayParameter >::reverse_iterator":
        """rbegin(VectorSupportArrayParameter self) -> std::vector< cphd::SupportArrayParameter >::reverse_iterator"""
        return _cphd.VectorSupportArrayParameter_rbegin(self)


    def rend(self) -> "std::vector< cphd::SupportArrayParameter >::reverse_iterator":
        """rend(VectorSupportArrayParameter self) -> std::vector< cphd::SupportArrayParameter >::reverse_iterator"""
        return _cphd.VectorSupportArrayParameter_rend(self)


    def clear(self) -> "void":
        """clear(VectorSupportArrayParameter self)"""
        return _cphd.VectorSupportArrayParameter_clear(self)


    def get_allocator(self) -> "std::vector< cphd::SupportArrayParameter >::allocator_type":
        """get_allocator(VectorSupportArrayParameter self) -> std::vector< cphd::SupportArrayParameter >::allocator_type"""
        return _cphd.VectorSupportArrayParameter_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(VectorSupportArrayParameter self)"""
        return _cphd.VectorSupportArrayParameter_pop_back(self)


    def erase(self, *args) -> "std::vector< cphd::SupportArrayParameter >::iterator":
        """
        erase(VectorSupportArrayParameter self, std::vector< cphd::SupportArrayParameter >::iterator pos) -> std::vector< cphd::SupportArrayParameter >::iterator
        erase(VectorSupportArrayParameter self, std::vector< cphd::SupportArrayParameter >::iterator first, std::vector< cphd::SupportArrayParameter >::iterator last) -> std::vector< cphd::SupportArrayParameter >::iterator
        """
        return _cphd.VectorSupportArrayParameter_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(cphd::SupportArrayParameter)> self) -> VectorSupportArrayParameter
        __init__(std::vector<(cphd::SupportArrayParameter)> self, VectorSupportArrayParameter arg2) -> VectorSupportArrayParameter
        __init__(std::vector<(cphd::SupportArrayParameter)> self, std::vector< cphd::SupportArrayParameter >::size_type size) -> VectorSupportArrayParameter
        __init__(std::vector<(cphd::SupportArrayParameter)> self, std::vector< cphd::SupportArrayParameter >::size_type size, SupportArrayParameter value) -> VectorSupportArrayParameter
        """
        this = _cphd.new_VectorSupportArrayParameter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'SupportArrayParameter') -> "void":
        """push_back(VectorSupportArrayParameter self, SupportArrayParameter x)"""
        return _cphd.VectorSupportArrayParameter_push_back(self, x)


    def front(self) -> "std::vector< cphd::SupportArrayParameter >::value_type const &":
        """front(VectorSupportArrayParameter self) -> SupportArrayParameter"""
        return _cphd.VectorSupportArrayParameter_front(self)


    def back(self) -> "std::vector< cphd::SupportArrayParameter >::value_type const &":
        """back(VectorSupportArrayParameter self) -> SupportArrayParameter"""
        return _cphd.VectorSupportArrayParameter_back(self)


    def assign(self, n: 'std::vector< cphd::SupportArrayParameter >::size_type', x: 'SupportArrayParameter') -> "void":
        """assign(VectorSupportArrayParameter self, std::vector< cphd::SupportArrayParameter >::size_type n, SupportArrayParameter x)"""
        return _cphd.VectorSupportArrayParameter_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(VectorSupportArrayParameter self, std::vector< cphd::SupportArrayParameter >::size_type new_size)
        resize(VectorSupportArrayParameter self, std::vector< cphd::SupportArrayParameter >::size_type new_size, SupportArrayParameter x)
        """
        return _cphd.VectorSupportArrayParameter_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(VectorSupportArrayParameter self, std::vector< cphd::SupportArrayParameter >::iterator pos, SupportArrayParameter x) -> std::vector< cphd::SupportArrayParameter >::iterator
        insert(VectorSupportArrayParameter self, std::vector< cphd::SupportArrayParameter >::iterator pos, std::vector< cphd::SupportArrayParameter >::size_type n, SupportArrayParameter x)
        """
        return _cphd.VectorSupportArrayParameter_insert(self, *args)


    def reserve(self, n: 'std::vector< cphd::SupportArrayParameter >::size_type') -> "void":
        """reserve(VectorSupportArrayParameter self, std::vector< cphd::SupportArrayParameter >::size_type n)"""
        return _cphd.VectorSupportArrayParameter_reserve(self, n)


    def capacity(self) -> "std::vector< cphd::SupportArrayParameter >::size_type":
        """capacity(VectorSupportArrayParameter self) -> std::vector< cphd::SupportArrayParameter >::size_type"""
        return _cphd.VectorSupportArrayParameter_capacity(self)


    def __getstate__(self):
    # Return a nonempty (thus non-false) tuple with dummy value in first position
        return (-1, tuple(pickle.dumps(elem) for elem in self))

    def __setstate__(self, state):
        self.__init__()
    # State will have a dummy entry in the first position
        for elem in state[1]:
            self.push_back(pickle.loads(elem))

    __swig_destroy__ = _cphd.delete_VectorSupportArrayParameter
    __del__ = lambda self: None
VectorSupportArrayParameter_swigregister = _cphd.VectorSupportArrayParameter_swigregister
VectorSupportArrayParameter_swigregister(VectorSupportArrayParameter)

class VectorCOD(_object):
    """Proxy of C++ std::vector<(cphd::COD)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorCOD, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorCOD, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(VectorCOD self) -> SwigPyIterator"""
        return _cphd.VectorCOD_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(VectorCOD self) -> bool"""
        return _cphd.VectorCOD___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(VectorCOD self) -> bool"""
        return _cphd.VectorCOD___bool__(self)


    def __len__(self) -> "std::vector< cphd::COD >::size_type":
        """__len__(VectorCOD self) -> std::vector< cphd::COD >::size_type"""
        return _cphd.VectorCOD___len__(self)


    def __getslice__(self, i: 'std::vector< cphd::COD >::difference_type', j: 'std::vector< cphd::COD >::difference_type') -> "std::vector< cphd::COD,std::allocator< cphd::COD > > *":
        """__getslice__(VectorCOD self, std::vector< cphd::COD >::difference_type i, std::vector< cphd::COD >::difference_type j) -> VectorCOD"""
        return _cphd.VectorCOD___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(VectorCOD self, std::vector< cphd::COD >::difference_type i, std::vector< cphd::COD >::difference_type j)
        __setslice__(VectorCOD self, std::vector< cphd::COD >::difference_type i, std::vector< cphd::COD >::difference_type j, VectorCOD v)
        """
        return _cphd.VectorCOD___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< cphd::COD >::difference_type', j: 'std::vector< cphd::COD >::difference_type') -> "void":
        """__delslice__(VectorCOD self, std::vector< cphd::COD >::difference_type i, std::vector< cphd::COD >::difference_type j)"""
        return _cphd.VectorCOD___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(VectorCOD self, std::vector< cphd::COD >::difference_type i)
        __delitem__(VectorCOD self, PySliceObject * slice)
        """
        return _cphd.VectorCOD___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< cphd::COD >::value_type const &":
        """
        __getitem__(VectorCOD self, PySliceObject * slice) -> VectorCOD
        __getitem__(VectorCOD self, std::vector< cphd::COD >::difference_type i) -> COD
        """
        return _cphd.VectorCOD___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(VectorCOD self, PySliceObject * slice, VectorCOD v)
        __setitem__(VectorCOD self, PySliceObject * slice)
        __setitem__(VectorCOD self, std::vector< cphd::COD >::difference_type i, COD x)
        """
        return _cphd.VectorCOD___setitem__(self, *args)


    def pop(self) -> "std::vector< cphd::COD >::value_type":
        """pop(VectorCOD self) -> COD"""
        return _cphd.VectorCOD_pop(self)


    def append(self, x: 'COD') -> "void":
        """append(VectorCOD self, COD x)"""
        return _cphd.VectorCOD_append(self, x)


    def empty(self) -> "bool":
        """empty(VectorCOD self) -> bool"""
        return _cphd.VectorCOD_empty(self)


    def size(self) -> "std::vector< cphd::COD >::size_type":
        """size(VectorCOD self) -> std::vector< cphd::COD >::size_type"""
        return _cphd.VectorCOD_size(self)


    def swap(self, v: 'VectorCOD') -> "void":
        """swap(VectorCOD self, VectorCOD v)"""
        return _cphd.VectorCOD_swap(self, v)


    def begin(self) -> "std::vector< cphd::COD >::iterator":
        """begin(VectorCOD self) -> std::vector< cphd::COD >::iterator"""
        return _cphd.VectorCOD_begin(self)


    def end(self) -> "std::vector< cphd::COD >::iterator":
        """end(VectorCOD self) -> std::vector< cphd::COD >::iterator"""
        return _cphd.VectorCOD_end(self)


    def rbegin(self) -> "std::vector< cphd::COD >::reverse_iterator":
        """rbegin(VectorCOD self) -> std::vector< cphd::COD >::reverse_iterator"""
        return _cphd.VectorCOD_rbegin(self)


    def rend(self) -> "std::vector< cphd::COD >::reverse_iterator":
        """rend(VectorCOD self) -> std::vector< cphd::COD >::reverse_iterator"""
        return _cphd.VectorCOD_rend(self)


    def clear(self) -> "void":
        """clear(VectorCOD self)"""
        return _cphd.VectorCOD_clear(self)


    def get_allocator(self) -> "std::vector< cphd::COD >::allocator_type":
        """get_allocator(VectorCOD self) -> std::vector< cphd::COD >::allocator_type"""
        return _cphd.VectorCOD_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(VectorCOD self)"""
        return _cphd.VectorCOD_pop_back(self)


    def erase(self, *args) -> "std::vector< cphd::COD >::iterator":
        """
        erase(VectorCOD self, std::vector< cphd::COD >::iterator pos) -> std::vector< cphd::COD >::iterator
        erase(VectorCOD self, std::vector< cphd::COD >::iterator first, std::vector< cphd::COD >::iterator last) -> std::vector< cphd::COD >::iterator
        """
        return _cphd.VectorCOD_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(cphd::COD)> self) -> VectorCOD
        __init__(std::vector<(cphd::COD)> self, VectorCOD arg2) -> VectorCOD
        __init__(std::vector<(cphd::COD)> self, std::vector< cphd::COD >::size_type size) -> VectorCOD
        __init__(std::vector<(cphd::COD)> self, std::vector< cphd::COD >::size_type size, COD value) -> VectorCOD
        """
        this = _cphd.new_VectorCOD(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'COD') -> "void":
        """push_back(VectorCOD self, COD x)"""
        return _cphd.VectorCOD_push_back(self, x)


    def front(self) -> "std::vector< cphd::COD >::value_type const &":
        """front(VectorCOD self) -> COD"""
        return _cphd.VectorCOD_front(self)


    def back(self) -> "std::vector< cphd::COD >::value_type const &":
        """back(VectorCOD self) -> COD"""
        return _cphd.VectorCOD_back(self)


    def assign(self, n: 'std::vector< cphd::COD >::size_type', x: 'COD') -> "void":
        """assign(VectorCOD self, std::vector< cphd::COD >::size_type n, COD x)"""
        return _cphd.VectorCOD_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(VectorCOD self, std::vector< cphd::COD >::size_type new_size)
        resize(VectorCOD self, std::vector< cphd::COD >::size_type new_size, COD x)
        """
        return _cphd.VectorCOD_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(VectorCOD self, std::vector< cphd::COD >::iterator pos, COD x) -> std::vector< cphd::COD >::iterator
        insert(VectorCOD self, std::vector< cphd::COD >::iterator pos, std::vector< cphd::COD >::size_type n, COD x)
        """
        return _cphd.VectorCOD_insert(self, *args)


    def reserve(self, n: 'std::vector< cphd::COD >::size_type') -> "void":
        """reserve(VectorCOD self, std::vector< cphd::COD >::size_type n)"""
        return _cphd.VectorCOD_reserve(self, n)


    def capacity(self) -> "std::vector< cphd::COD >::size_type":
        """capacity(VectorCOD self) -> std::vector< cphd::COD >::size_type"""
        return _cphd.VectorCOD_capacity(self)


    def __getstate__(self):
    # Return a nonempty (thus non-false) tuple with dummy value in first position
        return (-1, tuple(pickle.dumps(elem) for elem in self))

    def __setstate__(self, state):
        self.__init__()
    # State will have a dummy entry in the first position
        for elem in state[1]:
            self.push_back(pickle.loads(elem))

    __swig_destroy__ = _cphd.delete_VectorCOD
    __del__ = lambda self: None
VectorCOD_swigregister = _cphd.VectorCOD_swigregister
VectorCOD_swigregister(VectorCOD)

class VectorDwellTime(_object):
    """Proxy of C++ std::vector<(cphd::DwellTime)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorDwellTime, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorDwellTime, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(VectorDwellTime self) -> SwigPyIterator"""
        return _cphd.VectorDwellTime_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(VectorDwellTime self) -> bool"""
        return _cphd.VectorDwellTime___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(VectorDwellTime self) -> bool"""
        return _cphd.VectorDwellTime___bool__(self)


    def __len__(self) -> "std::vector< cphd::DwellTime >::size_type":
        """__len__(VectorDwellTime self) -> std::vector< cphd::DwellTime >::size_type"""
        return _cphd.VectorDwellTime___len__(self)


    def __getslice__(self, i: 'std::vector< cphd::DwellTime >::difference_type', j: 'std::vector< cphd::DwellTime >::difference_type') -> "std::vector< cphd::DwellTime,std::allocator< cphd::DwellTime > > *":
        """__getslice__(VectorDwellTime self, std::vector< cphd::DwellTime >::difference_type i, std::vector< cphd::DwellTime >::difference_type j) -> VectorDwellTime"""
        return _cphd.VectorDwellTime___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(VectorDwellTime self, std::vector< cphd::DwellTime >::difference_type i, std::vector< cphd::DwellTime >::difference_type j)
        __setslice__(VectorDwellTime self, std::vector< cphd::DwellTime >::difference_type i, std::vector< cphd::DwellTime >::difference_type j, VectorDwellTime v)
        """
        return _cphd.VectorDwellTime___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< cphd::DwellTime >::difference_type', j: 'std::vector< cphd::DwellTime >::difference_type') -> "void":
        """__delslice__(VectorDwellTime self, std::vector< cphd::DwellTime >::difference_type i, std::vector< cphd::DwellTime >::difference_type j)"""
        return _cphd.VectorDwellTime___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(VectorDwellTime self, std::vector< cphd::DwellTime >::difference_type i)
        __delitem__(VectorDwellTime self, PySliceObject * slice)
        """
        return _cphd.VectorDwellTime___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< cphd::DwellTime >::value_type const &":
        """
        __getitem__(VectorDwellTime self, PySliceObject * slice) -> VectorDwellTime
        __getitem__(VectorDwellTime self, std::vector< cphd::DwellTime >::difference_type i) -> DwellTime
        """
        return _cphd.VectorDwellTime___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(VectorDwellTime self, PySliceObject * slice, VectorDwellTime v)
        __setitem__(VectorDwellTime self, PySliceObject * slice)
        __setitem__(VectorDwellTime self, std::vector< cphd::DwellTime >::difference_type i, DwellTime x)
        """
        return _cphd.VectorDwellTime___setitem__(self, *args)


    def pop(self) -> "std::vector< cphd::DwellTime >::value_type":
        """pop(VectorDwellTime self) -> DwellTime"""
        return _cphd.VectorDwellTime_pop(self)


    def append(self, x: 'DwellTime') -> "void":
        """append(VectorDwellTime self, DwellTime x)"""
        return _cphd.VectorDwellTime_append(self, x)


    def empty(self) -> "bool":
        """empty(VectorDwellTime self) -> bool"""
        return _cphd.VectorDwellTime_empty(self)


    def size(self) -> "std::vector< cphd::DwellTime >::size_type":
        """size(VectorDwellTime self) -> std::vector< cphd::DwellTime >::size_type"""
        return _cphd.VectorDwellTime_size(self)


    def swap(self, v: 'VectorDwellTime') -> "void":
        """swap(VectorDwellTime self, VectorDwellTime v)"""
        return _cphd.VectorDwellTime_swap(self, v)


    def begin(self) -> "std::vector< cphd::DwellTime >::iterator":
        """begin(VectorDwellTime self) -> std::vector< cphd::DwellTime >::iterator"""
        return _cphd.VectorDwellTime_begin(self)


    def end(self) -> "std::vector< cphd::DwellTime >::iterator":
        """end(VectorDwellTime self) -> std::vector< cphd::DwellTime >::iterator"""
        return _cphd.VectorDwellTime_end(self)


    def rbegin(self) -> "std::vector< cphd::DwellTime >::reverse_iterator":
        """rbegin(VectorDwellTime self) -> std::vector< cphd::DwellTime >::reverse_iterator"""
        return _cphd.VectorDwellTime_rbegin(self)


    def rend(self) -> "std::vector< cphd::DwellTime >::reverse_iterator":
        """rend(VectorDwellTime self) -> std::vector< cphd::DwellTime >::reverse_iterator"""
        return _cphd.VectorDwellTime_rend(self)


    def clear(self) -> "void":
        """clear(VectorDwellTime self)"""
        return _cphd.VectorDwellTime_clear(self)


    def get_allocator(self) -> "std::vector< cphd::DwellTime >::allocator_type":
        """get_allocator(VectorDwellTime self) -> std::vector< cphd::DwellTime >::allocator_type"""
        return _cphd.VectorDwellTime_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(VectorDwellTime self)"""
        return _cphd.VectorDwellTime_pop_back(self)


    def erase(self, *args) -> "std::vector< cphd::DwellTime >::iterator":
        """
        erase(VectorDwellTime self, std::vector< cphd::DwellTime >::iterator pos) -> std::vector< cphd::DwellTime >::iterator
        erase(VectorDwellTime self, std::vector< cphd::DwellTime >::iterator first, std::vector< cphd::DwellTime >::iterator last) -> std::vector< cphd::DwellTime >::iterator
        """
        return _cphd.VectorDwellTime_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(cphd::DwellTime)> self) -> VectorDwellTime
        __init__(std::vector<(cphd::DwellTime)> self, VectorDwellTime arg2) -> VectorDwellTime
        __init__(std::vector<(cphd::DwellTime)> self, std::vector< cphd::DwellTime >::size_type size) -> VectorDwellTime
        __init__(std::vector<(cphd::DwellTime)> self, std::vector< cphd::DwellTime >::size_type size, DwellTime value) -> VectorDwellTime
        """
        this = _cphd.new_VectorDwellTime(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'DwellTime') -> "void":
        """push_back(VectorDwellTime self, DwellTime x)"""
        return _cphd.VectorDwellTime_push_back(self, x)


    def front(self) -> "std::vector< cphd::DwellTime >::value_type const &":
        """front(VectorDwellTime self) -> DwellTime"""
        return _cphd.VectorDwellTime_front(self)


    def back(self) -> "std::vector< cphd::DwellTime >::value_type const &":
        """back(VectorDwellTime self) -> DwellTime"""
        return _cphd.VectorDwellTime_back(self)


    def assign(self, n: 'std::vector< cphd::DwellTime >::size_type', x: 'DwellTime') -> "void":
        """assign(VectorDwellTime self, std::vector< cphd::DwellTime >::size_type n, DwellTime x)"""
        return _cphd.VectorDwellTime_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(VectorDwellTime self, std::vector< cphd::DwellTime >::size_type new_size)
        resize(VectorDwellTime self, std::vector< cphd::DwellTime >::size_type new_size, DwellTime x)
        """
        return _cphd.VectorDwellTime_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(VectorDwellTime self, std::vector< cphd::DwellTime >::iterator pos, DwellTime x) -> std::vector< cphd::DwellTime >::iterator
        insert(VectorDwellTime self, std::vector< cphd::DwellTime >::iterator pos, std::vector< cphd::DwellTime >::size_type n, DwellTime x)
        """
        return _cphd.VectorDwellTime_insert(self, *args)


    def reserve(self, n: 'std::vector< cphd::DwellTime >::size_type') -> "void":
        """reserve(VectorDwellTime self, std::vector< cphd::DwellTime >::size_type n)"""
        return _cphd.VectorDwellTime_reserve(self, n)


    def capacity(self) -> "std::vector< cphd::DwellTime >::size_type":
        """capacity(VectorDwellTime self) -> std::vector< cphd::DwellTime >::size_type"""
        return _cphd.VectorDwellTime_capacity(self)


    def __getstate__(self):
    # Return a nonempty (thus non-false) tuple with dummy value in first position
        return (-1, tuple(pickle.dumps(elem) for elem in self))

    def __setstate__(self, state):
        self.__init__()
    # State will have a dummy entry in the first position
        for elem in state[1]:
            self.push_back(pickle.loads(elem))

    __swig_destroy__ = _cphd.delete_VectorDwellTime
    __del__ = lambda self: None
VectorDwellTime_swigregister = _cphd.VectorDwellTime_swigregister
VectorDwellTime_swigregister(VectorDwellTime)

class VectorAntCoordFrame(_object):
    """Proxy of C++ std::vector<(cphd::AntCoordFrame)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorAntCoordFrame, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorAntCoordFrame, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(VectorAntCoordFrame self) -> SwigPyIterator"""
        return _cphd.VectorAntCoordFrame_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(VectorAntCoordFrame self) -> bool"""
        return _cphd.VectorAntCoordFrame___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(VectorAntCoordFrame self) -> bool"""
        return _cphd.VectorAntCoordFrame___bool__(self)


    def __len__(self) -> "std::vector< cphd::AntCoordFrame >::size_type":
        """__len__(VectorAntCoordFrame self) -> std::vector< cphd::AntCoordFrame >::size_type"""
        return _cphd.VectorAntCoordFrame___len__(self)


    def __getslice__(self, i: 'std::vector< cphd::AntCoordFrame >::difference_type', j: 'std::vector< cphd::AntCoordFrame >::difference_type') -> "std::vector< cphd::AntCoordFrame,std::allocator< cphd::AntCoordFrame > > *":
        """__getslice__(VectorAntCoordFrame self, std::vector< cphd::AntCoordFrame >::difference_type i, std::vector< cphd::AntCoordFrame >::difference_type j) -> VectorAntCoordFrame"""
        return _cphd.VectorAntCoordFrame___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(VectorAntCoordFrame self, std::vector< cphd::AntCoordFrame >::difference_type i, std::vector< cphd::AntCoordFrame >::difference_type j)
        __setslice__(VectorAntCoordFrame self, std::vector< cphd::AntCoordFrame >::difference_type i, std::vector< cphd::AntCoordFrame >::difference_type j, VectorAntCoordFrame v)
        """
        return _cphd.VectorAntCoordFrame___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< cphd::AntCoordFrame >::difference_type', j: 'std::vector< cphd::AntCoordFrame >::difference_type') -> "void":
        """__delslice__(VectorAntCoordFrame self, std::vector< cphd::AntCoordFrame >::difference_type i, std::vector< cphd::AntCoordFrame >::difference_type j)"""
        return _cphd.VectorAntCoordFrame___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(VectorAntCoordFrame self, std::vector< cphd::AntCoordFrame >::difference_type i)
        __delitem__(VectorAntCoordFrame self, PySliceObject * slice)
        """
        return _cphd.VectorAntCoordFrame___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< cphd::AntCoordFrame >::value_type const &":
        """
        __getitem__(VectorAntCoordFrame self, PySliceObject * slice) -> VectorAntCoordFrame
        __getitem__(VectorAntCoordFrame self, std::vector< cphd::AntCoordFrame >::difference_type i) -> AntCoordFrame
        """
        return _cphd.VectorAntCoordFrame___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(VectorAntCoordFrame self, PySliceObject * slice, VectorAntCoordFrame v)
        __setitem__(VectorAntCoordFrame self, PySliceObject * slice)
        __setitem__(VectorAntCoordFrame self, std::vector< cphd::AntCoordFrame >::difference_type i, AntCoordFrame x)
        """
        return _cphd.VectorAntCoordFrame___setitem__(self, *args)


    def pop(self) -> "std::vector< cphd::AntCoordFrame >::value_type":
        """pop(VectorAntCoordFrame self) -> AntCoordFrame"""
        return _cphd.VectorAntCoordFrame_pop(self)


    def append(self, x: 'AntCoordFrame') -> "void":
        """append(VectorAntCoordFrame self, AntCoordFrame x)"""
        return _cphd.VectorAntCoordFrame_append(self, x)


    def empty(self) -> "bool":
        """empty(VectorAntCoordFrame self) -> bool"""
        return _cphd.VectorAntCoordFrame_empty(self)


    def size(self) -> "std::vector< cphd::AntCoordFrame >::size_type":
        """size(VectorAntCoordFrame self) -> std::vector< cphd::AntCoordFrame >::size_type"""
        return _cphd.VectorAntCoordFrame_size(self)


    def swap(self, v: 'VectorAntCoordFrame') -> "void":
        """swap(VectorAntCoordFrame self, VectorAntCoordFrame v)"""
        return _cphd.VectorAntCoordFrame_swap(self, v)


    def begin(self) -> "std::vector< cphd::AntCoordFrame >::iterator":
        """begin(VectorAntCoordFrame self) -> std::vector< cphd::AntCoordFrame >::iterator"""
        return _cphd.VectorAntCoordFrame_begin(self)


    def end(self) -> "std::vector< cphd::AntCoordFrame >::iterator":
        """end(VectorAntCoordFrame self) -> std::vector< cphd::AntCoordFrame >::iterator"""
        return _cphd.VectorAntCoordFrame_end(self)


    def rbegin(self) -> "std::vector< cphd::AntCoordFrame >::reverse_iterator":
        """rbegin(VectorAntCoordFrame self) -> std::vector< cphd::AntCoordFrame >::reverse_iterator"""
        return _cphd.VectorAntCoordFrame_rbegin(self)


    def rend(self) -> "std::vector< cphd::AntCoordFrame >::reverse_iterator":
        """rend(VectorAntCoordFrame self) -> std::vector< cphd::AntCoordFrame >::reverse_iterator"""
        return _cphd.VectorAntCoordFrame_rend(self)


    def clear(self) -> "void":
        """clear(VectorAntCoordFrame self)"""
        return _cphd.VectorAntCoordFrame_clear(self)


    def get_allocator(self) -> "std::vector< cphd::AntCoordFrame >::allocator_type":
        """get_allocator(VectorAntCoordFrame self) -> std::vector< cphd::AntCoordFrame >::allocator_type"""
        return _cphd.VectorAntCoordFrame_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(VectorAntCoordFrame self)"""
        return _cphd.VectorAntCoordFrame_pop_back(self)


    def erase(self, *args) -> "std::vector< cphd::AntCoordFrame >::iterator":
        """
        erase(VectorAntCoordFrame self, std::vector< cphd::AntCoordFrame >::iterator pos) -> std::vector< cphd::AntCoordFrame >::iterator
        erase(VectorAntCoordFrame self, std::vector< cphd::AntCoordFrame >::iterator first, std::vector< cphd::AntCoordFrame >::iterator last) -> std::vector< cphd::AntCoordFrame >::iterator
        """
        return _cphd.VectorAntCoordFrame_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(cphd::AntCoordFrame)> self) -> VectorAntCoordFrame
        __init__(std::vector<(cphd::AntCoordFrame)> self, VectorAntCoordFrame arg2) -> VectorAntCoordFrame
        __init__(std::vector<(cphd::AntCoordFrame)> self, std::vector< cphd::AntCoordFrame >::size_type size) -> VectorAntCoordFrame
        __init__(std::vector<(cphd::AntCoordFrame)> self, std::vector< cphd::AntCoordFrame >::size_type size, AntCoordFrame value) -> VectorAntCoordFrame
        """
        this = _cphd.new_VectorAntCoordFrame(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'AntCoordFrame') -> "void":
        """push_back(VectorAntCoordFrame self, AntCoordFrame x)"""
        return _cphd.VectorAntCoordFrame_push_back(self, x)


    def front(self) -> "std::vector< cphd::AntCoordFrame >::value_type const &":
        """front(VectorAntCoordFrame self) -> AntCoordFrame"""
        return _cphd.VectorAntCoordFrame_front(self)


    def back(self) -> "std::vector< cphd::AntCoordFrame >::value_type const &":
        """back(VectorAntCoordFrame self) -> AntCoordFrame"""
        return _cphd.VectorAntCoordFrame_back(self)


    def assign(self, n: 'std::vector< cphd::AntCoordFrame >::size_type', x: 'AntCoordFrame') -> "void":
        """assign(VectorAntCoordFrame self, std::vector< cphd::AntCoordFrame >::size_type n, AntCoordFrame x)"""
        return _cphd.VectorAntCoordFrame_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(VectorAntCoordFrame self, std::vector< cphd::AntCoordFrame >::size_type new_size)
        resize(VectorAntCoordFrame self, std::vector< cphd::AntCoordFrame >::size_type new_size, AntCoordFrame x)
        """
        return _cphd.VectorAntCoordFrame_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(VectorAntCoordFrame self, std::vector< cphd::AntCoordFrame >::iterator pos, AntCoordFrame x) -> std::vector< cphd::AntCoordFrame >::iterator
        insert(VectorAntCoordFrame self, std::vector< cphd::AntCoordFrame >::iterator pos, std::vector< cphd::AntCoordFrame >::size_type n, AntCoordFrame x)
        """
        return _cphd.VectorAntCoordFrame_insert(self, *args)


    def reserve(self, n: 'std::vector< cphd::AntCoordFrame >::size_type') -> "void":
        """reserve(VectorAntCoordFrame self, std::vector< cphd::AntCoordFrame >::size_type n)"""
        return _cphd.VectorAntCoordFrame_reserve(self, n)


    def capacity(self) -> "std::vector< cphd::AntCoordFrame >::size_type":
        """capacity(VectorAntCoordFrame self) -> std::vector< cphd::AntCoordFrame >::size_type"""
        return _cphd.VectorAntCoordFrame_capacity(self)


    def __getstate__(self):
    # Return a nonempty (thus non-false) tuple with dummy value in first position
        return (-1, tuple(pickle.dumps(elem) for elem in self))

    def __setstate__(self, state):
        self.__init__()
    # State will have a dummy entry in the first position
        for elem in state[1]:
            self.push_back(pickle.loads(elem))

    __swig_destroy__ = _cphd.delete_VectorAntCoordFrame
    __del__ = lambda self: None
VectorAntCoordFrame_swigregister = _cphd.VectorAntCoordFrame_swigregister
VectorAntCoordFrame_swigregister(VectorAntCoordFrame)

class VectorAntPhaseCenter(_object):
    """Proxy of C++ std::vector<(cphd::AntPhaseCenter)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorAntPhaseCenter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorAntPhaseCenter, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(VectorAntPhaseCenter self) -> SwigPyIterator"""
        return _cphd.VectorAntPhaseCenter_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(VectorAntPhaseCenter self) -> bool"""
        return _cphd.VectorAntPhaseCenter___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(VectorAntPhaseCenter self) -> bool"""
        return _cphd.VectorAntPhaseCenter___bool__(self)


    def __len__(self) -> "std::vector< cphd::AntPhaseCenter >::size_type":
        """__len__(VectorAntPhaseCenter self) -> std::vector< cphd::AntPhaseCenter >::size_type"""
        return _cphd.VectorAntPhaseCenter___len__(self)


    def __getslice__(self, i: 'std::vector< cphd::AntPhaseCenter >::difference_type', j: 'std::vector< cphd::AntPhaseCenter >::difference_type') -> "std::vector< cphd::AntPhaseCenter,std::allocator< cphd::AntPhaseCenter > > *":
        """__getslice__(VectorAntPhaseCenter self, std::vector< cphd::AntPhaseCenter >::difference_type i, std::vector< cphd::AntPhaseCenter >::difference_type j) -> VectorAntPhaseCenter"""
        return _cphd.VectorAntPhaseCenter___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(VectorAntPhaseCenter self, std::vector< cphd::AntPhaseCenter >::difference_type i, std::vector< cphd::AntPhaseCenter >::difference_type j)
        __setslice__(VectorAntPhaseCenter self, std::vector< cphd::AntPhaseCenter >::difference_type i, std::vector< cphd::AntPhaseCenter >::difference_type j, VectorAntPhaseCenter v)
        """
        return _cphd.VectorAntPhaseCenter___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< cphd::AntPhaseCenter >::difference_type', j: 'std::vector< cphd::AntPhaseCenter >::difference_type') -> "void":
        """__delslice__(VectorAntPhaseCenter self, std::vector< cphd::AntPhaseCenter >::difference_type i, std::vector< cphd::AntPhaseCenter >::difference_type j)"""
        return _cphd.VectorAntPhaseCenter___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(VectorAntPhaseCenter self, std::vector< cphd::AntPhaseCenter >::difference_type i)
        __delitem__(VectorAntPhaseCenter self, PySliceObject * slice)
        """
        return _cphd.VectorAntPhaseCenter___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< cphd::AntPhaseCenter >::value_type const &":
        """
        __getitem__(VectorAntPhaseCenter self, PySliceObject * slice) -> VectorAntPhaseCenter
        __getitem__(VectorAntPhaseCenter self, std::vector< cphd::AntPhaseCenter >::difference_type i) -> AntPhaseCenter
        """
        return _cphd.VectorAntPhaseCenter___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(VectorAntPhaseCenter self, PySliceObject * slice, VectorAntPhaseCenter v)
        __setitem__(VectorAntPhaseCenter self, PySliceObject * slice)
        __setitem__(VectorAntPhaseCenter self, std::vector< cphd::AntPhaseCenter >::difference_type i, AntPhaseCenter x)
        """
        return _cphd.VectorAntPhaseCenter___setitem__(self, *args)


    def pop(self) -> "std::vector< cphd::AntPhaseCenter >::value_type":
        """pop(VectorAntPhaseCenter self) -> AntPhaseCenter"""
        return _cphd.VectorAntPhaseCenter_pop(self)


    def append(self, x: 'AntPhaseCenter') -> "void":
        """append(VectorAntPhaseCenter self, AntPhaseCenter x)"""
        return _cphd.VectorAntPhaseCenter_append(self, x)


    def empty(self) -> "bool":
        """empty(VectorAntPhaseCenter self) -> bool"""
        return _cphd.VectorAntPhaseCenter_empty(self)


    def size(self) -> "std::vector< cphd::AntPhaseCenter >::size_type":
        """size(VectorAntPhaseCenter self) -> std::vector< cphd::AntPhaseCenter >::size_type"""
        return _cphd.VectorAntPhaseCenter_size(self)


    def swap(self, v: 'VectorAntPhaseCenter') -> "void":
        """swap(VectorAntPhaseCenter self, VectorAntPhaseCenter v)"""
        return _cphd.VectorAntPhaseCenter_swap(self, v)


    def begin(self) -> "std::vector< cphd::AntPhaseCenter >::iterator":
        """begin(VectorAntPhaseCenter self) -> std::vector< cphd::AntPhaseCenter >::iterator"""
        return _cphd.VectorAntPhaseCenter_begin(self)


    def end(self) -> "std::vector< cphd::AntPhaseCenter >::iterator":
        """end(VectorAntPhaseCenter self) -> std::vector< cphd::AntPhaseCenter >::iterator"""
        return _cphd.VectorAntPhaseCenter_end(self)


    def rbegin(self) -> "std::vector< cphd::AntPhaseCenter >::reverse_iterator":
        """rbegin(VectorAntPhaseCenter self) -> std::vector< cphd::AntPhaseCenter >::reverse_iterator"""
        return _cphd.VectorAntPhaseCenter_rbegin(self)


    def rend(self) -> "std::vector< cphd::AntPhaseCenter >::reverse_iterator":
        """rend(VectorAntPhaseCenter self) -> std::vector< cphd::AntPhaseCenter >::reverse_iterator"""
        return _cphd.VectorAntPhaseCenter_rend(self)


    def clear(self) -> "void":
        """clear(VectorAntPhaseCenter self)"""
        return _cphd.VectorAntPhaseCenter_clear(self)


    def get_allocator(self) -> "std::vector< cphd::AntPhaseCenter >::allocator_type":
        """get_allocator(VectorAntPhaseCenter self) -> std::vector< cphd::AntPhaseCenter >::allocator_type"""
        return _cphd.VectorAntPhaseCenter_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(VectorAntPhaseCenter self)"""
        return _cphd.VectorAntPhaseCenter_pop_back(self)


    def erase(self, *args) -> "std::vector< cphd::AntPhaseCenter >::iterator":
        """
        erase(VectorAntPhaseCenter self, std::vector< cphd::AntPhaseCenter >::iterator pos) -> std::vector< cphd::AntPhaseCenter >::iterator
        erase(VectorAntPhaseCenter self, std::vector< cphd::AntPhaseCenter >::iterator first, std::vector< cphd::AntPhaseCenter >::iterator last) -> std::vector< cphd::AntPhaseCenter >::iterator
        """
        return _cphd.VectorAntPhaseCenter_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(cphd::AntPhaseCenter)> self) -> VectorAntPhaseCenter
        __init__(std::vector<(cphd::AntPhaseCenter)> self, VectorAntPhaseCenter arg2) -> VectorAntPhaseCenter
        __init__(std::vector<(cphd::AntPhaseCenter)> self, std::vector< cphd::AntPhaseCenter >::size_type size) -> VectorAntPhaseCenter
        __init__(std::vector<(cphd::AntPhaseCenter)> self, std::vector< cphd::AntPhaseCenter >::size_type size, AntPhaseCenter value) -> VectorAntPhaseCenter
        """
        this = _cphd.new_VectorAntPhaseCenter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'AntPhaseCenter') -> "void":
        """push_back(VectorAntPhaseCenter self, AntPhaseCenter x)"""
        return _cphd.VectorAntPhaseCenter_push_back(self, x)


    def front(self) -> "std::vector< cphd::AntPhaseCenter >::value_type const &":
        """front(VectorAntPhaseCenter self) -> AntPhaseCenter"""
        return _cphd.VectorAntPhaseCenter_front(self)


    def back(self) -> "std::vector< cphd::AntPhaseCenter >::value_type const &":
        """back(VectorAntPhaseCenter self) -> AntPhaseCenter"""
        return _cphd.VectorAntPhaseCenter_back(self)


    def assign(self, n: 'std::vector< cphd::AntPhaseCenter >::size_type', x: 'AntPhaseCenter') -> "void":
        """assign(VectorAntPhaseCenter self, std::vector< cphd::AntPhaseCenter >::size_type n, AntPhaseCenter x)"""
        return _cphd.VectorAntPhaseCenter_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(VectorAntPhaseCenter self, std::vector< cphd::AntPhaseCenter >::size_type new_size)
        resize(VectorAntPhaseCenter self, std::vector< cphd::AntPhaseCenter >::size_type new_size, AntPhaseCenter x)
        """
        return _cphd.VectorAntPhaseCenter_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(VectorAntPhaseCenter self, std::vector< cphd::AntPhaseCenter >::iterator pos, AntPhaseCenter x) -> std::vector< cphd::AntPhaseCenter >::iterator
        insert(VectorAntPhaseCenter self, std::vector< cphd::AntPhaseCenter >::iterator pos, std::vector< cphd::AntPhaseCenter >::size_type n, AntPhaseCenter x)
        """
        return _cphd.VectorAntPhaseCenter_insert(self, *args)


    def reserve(self, n: 'std::vector< cphd::AntPhaseCenter >::size_type') -> "void":
        """reserve(VectorAntPhaseCenter self, std::vector< cphd::AntPhaseCenter >::size_type n)"""
        return _cphd.VectorAntPhaseCenter_reserve(self, n)


    def capacity(self) -> "std::vector< cphd::AntPhaseCenter >::size_type":
        """capacity(VectorAntPhaseCenter self) -> std::vector< cphd::AntPhaseCenter >::size_type"""
        return _cphd.VectorAntPhaseCenter_capacity(self)


    def __getstate__(self):
    # Return a nonempty (thus non-false) tuple with dummy value in first position
        return (-1, tuple(pickle.dumps(elem) for elem in self))

    def __setstate__(self, state):
        self.__init__()
    # State will have a dummy entry in the first position
        for elem in state[1]:
            self.push_back(pickle.loads(elem))

    __swig_destroy__ = _cphd.delete_VectorAntPhaseCenter
    __del__ = lambda self: None
VectorAntPhaseCenter_swigregister = _cphd.VectorAntPhaseCenter_swigregister
VectorAntPhaseCenter_swigregister(VectorAntPhaseCenter)

class VectorAntPattern(_object):
    """Proxy of C++ std::vector<(cphd::AntPattern)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorAntPattern, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorAntPattern, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(VectorAntPattern self) -> SwigPyIterator"""
        return _cphd.VectorAntPattern_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(VectorAntPattern self) -> bool"""
        return _cphd.VectorAntPattern___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(VectorAntPattern self) -> bool"""
        return _cphd.VectorAntPattern___bool__(self)


    def __len__(self) -> "std::vector< cphd::AntPattern >::size_type":
        """__len__(VectorAntPattern self) -> std::vector< cphd::AntPattern >::size_type"""
        return _cphd.VectorAntPattern___len__(self)


    def __getslice__(self, i: 'std::vector< cphd::AntPattern >::difference_type', j: 'std::vector< cphd::AntPattern >::difference_type') -> "std::vector< cphd::AntPattern,std::allocator< cphd::AntPattern > > *":
        """__getslice__(VectorAntPattern self, std::vector< cphd::AntPattern >::difference_type i, std::vector< cphd::AntPattern >::difference_type j) -> VectorAntPattern"""
        return _cphd.VectorAntPattern___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(VectorAntPattern self, std::vector< cphd::AntPattern >::difference_type i, std::vector< cphd::AntPattern >::difference_type j)
        __setslice__(VectorAntPattern self, std::vector< cphd::AntPattern >::difference_type i, std::vector< cphd::AntPattern >::difference_type j, VectorAntPattern v)
        """
        return _cphd.VectorAntPattern___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< cphd::AntPattern >::difference_type', j: 'std::vector< cphd::AntPattern >::difference_type') -> "void":
        """__delslice__(VectorAntPattern self, std::vector< cphd::AntPattern >::difference_type i, std::vector< cphd::AntPattern >::difference_type j)"""
        return _cphd.VectorAntPattern___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(VectorAntPattern self, std::vector< cphd::AntPattern >::difference_type i)
        __delitem__(VectorAntPattern self, PySliceObject * slice)
        """
        return _cphd.VectorAntPattern___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< cphd::AntPattern >::value_type const &":
        """
        __getitem__(VectorAntPattern self, PySliceObject * slice) -> VectorAntPattern
        __getitem__(VectorAntPattern self, std::vector< cphd::AntPattern >::difference_type i) -> AntPattern
        """
        return _cphd.VectorAntPattern___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(VectorAntPattern self, PySliceObject * slice, VectorAntPattern v)
        __setitem__(VectorAntPattern self, PySliceObject * slice)
        __setitem__(VectorAntPattern self, std::vector< cphd::AntPattern >::difference_type i, AntPattern x)
        """
        return _cphd.VectorAntPattern___setitem__(self, *args)


    def pop(self) -> "std::vector< cphd::AntPattern >::value_type":
        """pop(VectorAntPattern self) -> AntPattern"""
        return _cphd.VectorAntPattern_pop(self)


    def append(self, x: 'AntPattern') -> "void":
        """append(VectorAntPattern self, AntPattern x)"""
        return _cphd.VectorAntPattern_append(self, x)


    def empty(self) -> "bool":
        """empty(VectorAntPattern self) -> bool"""
        return _cphd.VectorAntPattern_empty(self)


    def size(self) -> "std::vector< cphd::AntPattern >::size_type":
        """size(VectorAntPattern self) -> std::vector< cphd::AntPattern >::size_type"""
        return _cphd.VectorAntPattern_size(self)


    def swap(self, v: 'VectorAntPattern') -> "void":
        """swap(VectorAntPattern self, VectorAntPattern v)"""
        return _cphd.VectorAntPattern_swap(self, v)


    def begin(self) -> "std::vector< cphd::AntPattern >::iterator":
        """begin(VectorAntPattern self) -> std::vector< cphd::AntPattern >::iterator"""
        return _cphd.VectorAntPattern_begin(self)


    def end(self) -> "std::vector< cphd::AntPattern >::iterator":
        """end(VectorAntPattern self) -> std::vector< cphd::AntPattern >::iterator"""
        return _cphd.VectorAntPattern_end(self)


    def rbegin(self) -> "std::vector< cphd::AntPattern >::reverse_iterator":
        """rbegin(VectorAntPattern self) -> std::vector< cphd::AntPattern >::reverse_iterator"""
        return _cphd.VectorAntPattern_rbegin(self)


    def rend(self) -> "std::vector< cphd::AntPattern >::reverse_iterator":
        """rend(VectorAntPattern self) -> std::vector< cphd::AntPattern >::reverse_iterator"""
        return _cphd.VectorAntPattern_rend(self)


    def clear(self) -> "void":
        """clear(VectorAntPattern self)"""
        return _cphd.VectorAntPattern_clear(self)


    def get_allocator(self) -> "std::vector< cphd::AntPattern >::allocator_type":
        """get_allocator(VectorAntPattern self) -> std::vector< cphd::AntPattern >::allocator_type"""
        return _cphd.VectorAntPattern_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(VectorAntPattern self)"""
        return _cphd.VectorAntPattern_pop_back(self)


    def erase(self, *args) -> "std::vector< cphd::AntPattern >::iterator":
        """
        erase(VectorAntPattern self, std::vector< cphd::AntPattern >::iterator pos) -> std::vector< cphd::AntPattern >::iterator
        erase(VectorAntPattern self, std::vector< cphd::AntPattern >::iterator first, std::vector< cphd::AntPattern >::iterator last) -> std::vector< cphd::AntPattern >::iterator
        """
        return _cphd.VectorAntPattern_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(cphd::AntPattern)> self) -> VectorAntPattern
        __init__(std::vector<(cphd::AntPattern)> self, VectorAntPattern arg2) -> VectorAntPattern
        __init__(std::vector<(cphd::AntPattern)> self, std::vector< cphd::AntPattern >::size_type size) -> VectorAntPattern
        __init__(std::vector<(cphd::AntPattern)> self, std::vector< cphd::AntPattern >::size_type size, AntPattern value) -> VectorAntPattern
        """
        this = _cphd.new_VectorAntPattern(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'AntPattern') -> "void":
        """push_back(VectorAntPattern self, AntPattern x)"""
        return _cphd.VectorAntPattern_push_back(self, x)


    def front(self) -> "std::vector< cphd::AntPattern >::value_type const &":
        """front(VectorAntPattern self) -> AntPattern"""
        return _cphd.VectorAntPattern_front(self)


    def back(self) -> "std::vector< cphd::AntPattern >::value_type const &":
        """back(VectorAntPattern self) -> AntPattern"""
        return _cphd.VectorAntPattern_back(self)


    def assign(self, n: 'std::vector< cphd::AntPattern >::size_type', x: 'AntPattern') -> "void":
        """assign(VectorAntPattern self, std::vector< cphd::AntPattern >::size_type n, AntPattern x)"""
        return _cphd.VectorAntPattern_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(VectorAntPattern self, std::vector< cphd::AntPattern >::size_type new_size)
        resize(VectorAntPattern self, std::vector< cphd::AntPattern >::size_type new_size, AntPattern x)
        """
        return _cphd.VectorAntPattern_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(VectorAntPattern self, std::vector< cphd::AntPattern >::iterator pos, AntPattern x) -> std::vector< cphd::AntPattern >::iterator
        insert(VectorAntPattern self, std::vector< cphd::AntPattern >::iterator pos, std::vector< cphd::AntPattern >::size_type n, AntPattern x)
        """
        return _cphd.VectorAntPattern_insert(self, *args)


    def reserve(self, n: 'std::vector< cphd::AntPattern >::size_type') -> "void":
        """reserve(VectorAntPattern self, std::vector< cphd::AntPattern >::size_type n)"""
        return _cphd.VectorAntPattern_reserve(self, n)


    def capacity(self) -> "std::vector< cphd::AntPattern >::size_type":
        """capacity(VectorAntPattern self) -> std::vector< cphd::AntPattern >::size_type"""
        return _cphd.VectorAntPattern_capacity(self)


    def __getstate__(self):
    # Return a nonempty (thus non-false) tuple with dummy value in first position
        return (-1, tuple(pickle.dumps(elem) for elem in self))

    def __setstate__(self, state):
        self.__init__()
    # State will have a dummy entry in the first position
        for elem in state[1]:
            self.push_back(pickle.loads(elem))

    __swig_destroy__ = _cphd.delete_VectorAntPattern
    __del__ = lambda self: None
VectorAntPattern_swigregister = _cphd.VectorAntPattern_swigregister
VectorAntPattern_swigregister(VectorAntPattern)

class VectorGainPhaseArray(_object):
    """Proxy of C++ std::vector<(cphd::AntPattern::GainPhaseArray)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorGainPhaseArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorGainPhaseArray, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(VectorGainPhaseArray self) -> SwigPyIterator"""
        return _cphd.VectorGainPhaseArray_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(VectorGainPhaseArray self) -> bool"""
        return _cphd.VectorGainPhaseArray___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(VectorGainPhaseArray self) -> bool"""
        return _cphd.VectorGainPhaseArray___bool__(self)


    def __len__(self) -> "std::vector< cphd::AntPattern::GainPhaseArray >::size_type":
        """__len__(VectorGainPhaseArray self) -> std::vector< cphd::AntPattern::GainPhaseArray >::size_type"""
        return _cphd.VectorGainPhaseArray___len__(self)


    def __getslice__(self, i: 'std::vector< cphd::AntPattern::GainPhaseArray >::difference_type', j: 'std::vector< cphd::AntPattern::GainPhaseArray >::difference_type') -> "std::vector< cphd::AntPattern::GainPhaseArray,std::allocator< cphd::AntPattern::GainPhaseArray > > *":
        """__getslice__(VectorGainPhaseArray self, std::vector< cphd::AntPattern::GainPhaseArray >::difference_type i, std::vector< cphd::AntPattern::GainPhaseArray >::difference_type j) -> VectorGainPhaseArray"""
        return _cphd.VectorGainPhaseArray___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(VectorGainPhaseArray self, std::vector< cphd::AntPattern::GainPhaseArray >::difference_type i, std::vector< cphd::AntPattern::GainPhaseArray >::difference_type j)
        __setslice__(VectorGainPhaseArray self, std::vector< cphd::AntPattern::GainPhaseArray >::difference_type i, std::vector< cphd::AntPattern::GainPhaseArray >::difference_type j, VectorGainPhaseArray v)
        """
        return _cphd.VectorGainPhaseArray___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< cphd::AntPattern::GainPhaseArray >::difference_type', j: 'std::vector< cphd::AntPattern::GainPhaseArray >::difference_type') -> "void":
        """__delslice__(VectorGainPhaseArray self, std::vector< cphd::AntPattern::GainPhaseArray >::difference_type i, std::vector< cphd::AntPattern::GainPhaseArray >::difference_type j)"""
        return _cphd.VectorGainPhaseArray___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(VectorGainPhaseArray self, std::vector< cphd::AntPattern::GainPhaseArray >::difference_type i)
        __delitem__(VectorGainPhaseArray self, PySliceObject * slice)
        """
        return _cphd.VectorGainPhaseArray___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< cphd::AntPattern::GainPhaseArray >::value_type const &":
        """
        __getitem__(VectorGainPhaseArray self, PySliceObject * slice) -> VectorGainPhaseArray
        __getitem__(VectorGainPhaseArray self, std::vector< cphd::AntPattern::GainPhaseArray >::difference_type i) -> GainPhaseArray
        """
        return _cphd.VectorGainPhaseArray___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(VectorGainPhaseArray self, PySliceObject * slice, VectorGainPhaseArray v)
        __setitem__(VectorGainPhaseArray self, PySliceObject * slice)
        __setitem__(VectorGainPhaseArray self, std::vector< cphd::AntPattern::GainPhaseArray >::difference_type i, GainPhaseArray x)
        """
        return _cphd.VectorGainPhaseArray___setitem__(self, *args)


    def pop(self) -> "std::vector< cphd::AntPattern::GainPhaseArray >::value_type":
        """pop(VectorGainPhaseArray self) -> GainPhaseArray"""
        return _cphd.VectorGainPhaseArray_pop(self)


    def append(self, x: 'GainPhaseArray') -> "void":
        """append(VectorGainPhaseArray self, GainPhaseArray x)"""
        return _cphd.VectorGainPhaseArray_append(self, x)


    def empty(self) -> "bool":
        """empty(VectorGainPhaseArray self) -> bool"""
        return _cphd.VectorGainPhaseArray_empty(self)


    def size(self) -> "std::vector< cphd::AntPattern::GainPhaseArray >::size_type":
        """size(VectorGainPhaseArray self) -> std::vector< cphd::AntPattern::GainPhaseArray >::size_type"""
        return _cphd.VectorGainPhaseArray_size(self)


    def swap(self, v: 'VectorGainPhaseArray') -> "void":
        """swap(VectorGainPhaseArray self, VectorGainPhaseArray v)"""
        return _cphd.VectorGainPhaseArray_swap(self, v)


    def begin(self) -> "std::vector< cphd::AntPattern::GainPhaseArray >::iterator":
        """begin(VectorGainPhaseArray self) -> std::vector< cphd::AntPattern::GainPhaseArray >::iterator"""
        return _cphd.VectorGainPhaseArray_begin(self)


    def end(self) -> "std::vector< cphd::AntPattern::GainPhaseArray >::iterator":
        """end(VectorGainPhaseArray self) -> std::vector< cphd::AntPattern::GainPhaseArray >::iterator"""
        return _cphd.VectorGainPhaseArray_end(self)


    def rbegin(self) -> "std::vector< cphd::AntPattern::GainPhaseArray >::reverse_iterator":
        """rbegin(VectorGainPhaseArray self) -> std::vector< cphd::AntPattern::GainPhaseArray >::reverse_iterator"""
        return _cphd.VectorGainPhaseArray_rbegin(self)


    def rend(self) -> "std::vector< cphd::AntPattern::GainPhaseArray >::reverse_iterator":
        """rend(VectorGainPhaseArray self) -> std::vector< cphd::AntPattern::GainPhaseArray >::reverse_iterator"""
        return _cphd.VectorGainPhaseArray_rend(self)


    def clear(self) -> "void":
        """clear(VectorGainPhaseArray self)"""
        return _cphd.VectorGainPhaseArray_clear(self)


    def get_allocator(self) -> "std::vector< cphd::AntPattern::GainPhaseArray >::allocator_type":
        """get_allocator(VectorGainPhaseArray self) -> std::vector< cphd::AntPattern::GainPhaseArray >::allocator_type"""
        return _cphd.VectorGainPhaseArray_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(VectorGainPhaseArray self)"""
        return _cphd.VectorGainPhaseArray_pop_back(self)


    def erase(self, *args) -> "std::vector< cphd::AntPattern::GainPhaseArray >::iterator":
        """
        erase(VectorGainPhaseArray self, std::vector< cphd::AntPattern::GainPhaseArray >::iterator pos) -> std::vector< cphd::AntPattern::GainPhaseArray >::iterator
        erase(VectorGainPhaseArray self, std::vector< cphd::AntPattern::GainPhaseArray >::iterator first, std::vector< cphd::AntPattern::GainPhaseArray >::iterator last) -> std::vector< cphd::AntPattern::GainPhaseArray >::iterator
        """
        return _cphd.VectorGainPhaseArray_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(cphd::AntPattern::GainPhaseArray)> self) -> VectorGainPhaseArray
        __init__(std::vector<(cphd::AntPattern::GainPhaseArray)> self, VectorGainPhaseArray arg2) -> VectorGainPhaseArray
        __init__(std::vector<(cphd::AntPattern::GainPhaseArray)> self, std::vector< cphd::AntPattern::GainPhaseArray >::size_type size) -> VectorGainPhaseArray
        __init__(std::vector<(cphd::AntPattern::GainPhaseArray)> self, std::vector< cphd::AntPattern::GainPhaseArray >::size_type size, GainPhaseArray value) -> VectorGainPhaseArray
        """
        this = _cphd.new_VectorGainPhaseArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'GainPhaseArray') -> "void":
        """push_back(VectorGainPhaseArray self, GainPhaseArray x)"""
        return _cphd.VectorGainPhaseArray_push_back(self, x)


    def front(self) -> "std::vector< cphd::AntPattern::GainPhaseArray >::value_type const &":
        """front(VectorGainPhaseArray self) -> GainPhaseArray"""
        return _cphd.VectorGainPhaseArray_front(self)


    def back(self) -> "std::vector< cphd::AntPattern::GainPhaseArray >::value_type const &":
        """back(VectorGainPhaseArray self) -> GainPhaseArray"""
        return _cphd.VectorGainPhaseArray_back(self)


    def assign(self, n: 'std::vector< cphd::AntPattern::GainPhaseArray >::size_type', x: 'GainPhaseArray') -> "void":
        """assign(VectorGainPhaseArray self, std::vector< cphd::AntPattern::GainPhaseArray >::size_type n, GainPhaseArray x)"""
        return _cphd.VectorGainPhaseArray_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(VectorGainPhaseArray self, std::vector< cphd::AntPattern::GainPhaseArray >::size_type new_size)
        resize(VectorGainPhaseArray self, std::vector< cphd::AntPattern::GainPhaseArray >::size_type new_size, GainPhaseArray x)
        """
        return _cphd.VectorGainPhaseArray_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(VectorGainPhaseArray self, std::vector< cphd::AntPattern::GainPhaseArray >::iterator pos, GainPhaseArray x) -> std::vector< cphd::AntPattern::GainPhaseArray >::iterator
        insert(VectorGainPhaseArray self, std::vector< cphd::AntPattern::GainPhaseArray >::iterator pos, std::vector< cphd::AntPattern::GainPhaseArray >::size_type n, GainPhaseArray x)
        """
        return _cphd.VectorGainPhaseArray_insert(self, *args)


    def reserve(self, n: 'std::vector< cphd::AntPattern::GainPhaseArray >::size_type') -> "void":
        """reserve(VectorGainPhaseArray self, std::vector< cphd::AntPattern::GainPhaseArray >::size_type n)"""
        return _cphd.VectorGainPhaseArray_reserve(self, n)


    def capacity(self) -> "std::vector< cphd::AntPattern::GainPhaseArray >::size_type":
        """capacity(VectorGainPhaseArray self) -> std::vector< cphd::AntPattern::GainPhaseArray >::size_type"""
        return _cphd.VectorGainPhaseArray_capacity(self)


    def __getstate__(self):
    # Return a nonempty (thus non-false) tuple with dummy value in first position
        return (-1, tuple(pickle.dumps(elem) for elem in self))

    def __setstate__(self, state):
        self.__init__()
    # State will have a dummy entry in the first position
        for elem in state[1]:
            self.push_back(pickle.loads(elem))

    __swig_destroy__ = _cphd.delete_VectorGainPhaseArray
    __del__ = lambda self: None
VectorGainPhaseArray_swigregister = _cphd.VectorGainPhaseArray_swigregister
VectorGainPhaseArray_swigregister(VectorGainPhaseArray)

class VectorTxParams(_object):
    """Proxy of C++ std::vector<(cphd::TxWFParameters)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorTxParams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorTxParams, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(VectorTxParams self) -> SwigPyIterator"""
        return _cphd.VectorTxParams_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(VectorTxParams self) -> bool"""
        return _cphd.VectorTxParams___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(VectorTxParams self) -> bool"""
        return _cphd.VectorTxParams___bool__(self)


    def __len__(self) -> "std::vector< cphd::TxWFParameters >::size_type":
        """__len__(VectorTxParams self) -> std::vector< cphd::TxWFParameters >::size_type"""
        return _cphd.VectorTxParams___len__(self)


    def __getslice__(self, i: 'std::vector< cphd::TxWFParameters >::difference_type', j: 'std::vector< cphd::TxWFParameters >::difference_type') -> "std::vector< cphd::TxWFParameters,std::allocator< cphd::TxWFParameters > > *":
        """__getslice__(VectorTxParams self, std::vector< cphd::TxWFParameters >::difference_type i, std::vector< cphd::TxWFParameters >::difference_type j) -> VectorTxParams"""
        return _cphd.VectorTxParams___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(VectorTxParams self, std::vector< cphd::TxWFParameters >::difference_type i, std::vector< cphd::TxWFParameters >::difference_type j)
        __setslice__(VectorTxParams self, std::vector< cphd::TxWFParameters >::difference_type i, std::vector< cphd::TxWFParameters >::difference_type j, VectorTxParams v)
        """
        return _cphd.VectorTxParams___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< cphd::TxWFParameters >::difference_type', j: 'std::vector< cphd::TxWFParameters >::difference_type') -> "void":
        """__delslice__(VectorTxParams self, std::vector< cphd::TxWFParameters >::difference_type i, std::vector< cphd::TxWFParameters >::difference_type j)"""
        return _cphd.VectorTxParams___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(VectorTxParams self, std::vector< cphd::TxWFParameters >::difference_type i)
        __delitem__(VectorTxParams self, PySliceObject * slice)
        """
        return _cphd.VectorTxParams___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< cphd::TxWFParameters >::value_type const &":
        """
        __getitem__(VectorTxParams self, PySliceObject * slice) -> VectorTxParams
        __getitem__(VectorTxParams self, std::vector< cphd::TxWFParameters >::difference_type i) -> TxWFParameters
        """
        return _cphd.VectorTxParams___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(VectorTxParams self, PySliceObject * slice, VectorTxParams v)
        __setitem__(VectorTxParams self, PySliceObject * slice)
        __setitem__(VectorTxParams self, std::vector< cphd::TxWFParameters >::difference_type i, TxWFParameters x)
        """
        return _cphd.VectorTxParams___setitem__(self, *args)


    def pop(self) -> "std::vector< cphd::TxWFParameters >::value_type":
        """pop(VectorTxParams self) -> TxWFParameters"""
        return _cphd.VectorTxParams_pop(self)


    def append(self, x: 'TxWFParameters') -> "void":
        """append(VectorTxParams self, TxWFParameters x)"""
        return _cphd.VectorTxParams_append(self, x)


    def empty(self) -> "bool":
        """empty(VectorTxParams self) -> bool"""
        return _cphd.VectorTxParams_empty(self)


    def size(self) -> "std::vector< cphd::TxWFParameters >::size_type":
        """size(VectorTxParams self) -> std::vector< cphd::TxWFParameters >::size_type"""
        return _cphd.VectorTxParams_size(self)


    def swap(self, v: 'VectorTxParams') -> "void":
        """swap(VectorTxParams self, VectorTxParams v)"""
        return _cphd.VectorTxParams_swap(self, v)


    def begin(self) -> "std::vector< cphd::TxWFParameters >::iterator":
        """begin(VectorTxParams self) -> std::vector< cphd::TxWFParameters >::iterator"""
        return _cphd.VectorTxParams_begin(self)


    def end(self) -> "std::vector< cphd::TxWFParameters >::iterator":
        """end(VectorTxParams self) -> std::vector< cphd::TxWFParameters >::iterator"""
        return _cphd.VectorTxParams_end(self)


    def rbegin(self) -> "std::vector< cphd::TxWFParameters >::reverse_iterator":
        """rbegin(VectorTxParams self) -> std::vector< cphd::TxWFParameters >::reverse_iterator"""
        return _cphd.VectorTxParams_rbegin(self)


    def rend(self) -> "std::vector< cphd::TxWFParameters >::reverse_iterator":
        """rend(VectorTxParams self) -> std::vector< cphd::TxWFParameters >::reverse_iterator"""
        return _cphd.VectorTxParams_rend(self)


    def clear(self) -> "void":
        """clear(VectorTxParams self)"""
        return _cphd.VectorTxParams_clear(self)


    def get_allocator(self) -> "std::vector< cphd::TxWFParameters >::allocator_type":
        """get_allocator(VectorTxParams self) -> std::vector< cphd::TxWFParameters >::allocator_type"""
        return _cphd.VectorTxParams_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(VectorTxParams self)"""
        return _cphd.VectorTxParams_pop_back(self)


    def erase(self, *args) -> "std::vector< cphd::TxWFParameters >::iterator":
        """
        erase(VectorTxParams self, std::vector< cphd::TxWFParameters >::iterator pos) -> std::vector< cphd::TxWFParameters >::iterator
        erase(VectorTxParams self, std::vector< cphd::TxWFParameters >::iterator first, std::vector< cphd::TxWFParameters >::iterator last) -> std::vector< cphd::TxWFParameters >::iterator
        """
        return _cphd.VectorTxParams_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(cphd::TxWFParameters)> self) -> VectorTxParams
        __init__(std::vector<(cphd::TxWFParameters)> self, VectorTxParams arg2) -> VectorTxParams
        __init__(std::vector<(cphd::TxWFParameters)> self, std::vector< cphd::TxWFParameters >::size_type size) -> VectorTxParams
        __init__(std::vector<(cphd::TxWFParameters)> self, std::vector< cphd::TxWFParameters >::size_type size, TxWFParameters value) -> VectorTxParams
        """
        this = _cphd.new_VectorTxParams(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'TxWFParameters') -> "void":
        """push_back(VectorTxParams self, TxWFParameters x)"""
        return _cphd.VectorTxParams_push_back(self, x)


    def front(self) -> "std::vector< cphd::TxWFParameters >::value_type const &":
        """front(VectorTxParams self) -> TxWFParameters"""
        return _cphd.VectorTxParams_front(self)


    def back(self) -> "std::vector< cphd::TxWFParameters >::value_type const &":
        """back(VectorTxParams self) -> TxWFParameters"""
        return _cphd.VectorTxParams_back(self)


    def assign(self, n: 'std::vector< cphd::TxWFParameters >::size_type', x: 'TxWFParameters') -> "void":
        """assign(VectorTxParams self, std::vector< cphd::TxWFParameters >::size_type n, TxWFParameters x)"""
        return _cphd.VectorTxParams_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(VectorTxParams self, std::vector< cphd::TxWFParameters >::size_type new_size)
        resize(VectorTxParams self, std::vector< cphd::TxWFParameters >::size_type new_size, TxWFParameters x)
        """
        return _cphd.VectorTxParams_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(VectorTxParams self, std::vector< cphd::TxWFParameters >::iterator pos, TxWFParameters x) -> std::vector< cphd::TxWFParameters >::iterator
        insert(VectorTxParams self, std::vector< cphd::TxWFParameters >::iterator pos, std::vector< cphd::TxWFParameters >::size_type n, TxWFParameters x)
        """
        return _cphd.VectorTxParams_insert(self, *args)


    def reserve(self, n: 'std::vector< cphd::TxWFParameters >::size_type') -> "void":
        """reserve(VectorTxParams self, std::vector< cphd::TxWFParameters >::size_type n)"""
        return _cphd.VectorTxParams_reserve(self, n)


    def capacity(self) -> "std::vector< cphd::TxWFParameters >::size_type":
        """capacity(VectorTxParams self) -> std::vector< cphd::TxWFParameters >::size_type"""
        return _cphd.VectorTxParams_capacity(self)


    def __getstate__(self):
    # Return a nonempty (thus non-false) tuple with dummy value in first position
        return (-1, tuple(pickle.dumps(elem) for elem in self))

    def __setstate__(self, state):
        self.__init__()
    # State will have a dummy entry in the first position
        for elem in state[1]:
            self.push_back(pickle.loads(elem))

    __swig_destroy__ = _cphd.delete_VectorTxParams
    __del__ = lambda self: None
VectorTxParams_swigregister = _cphd.VectorTxParams_swigregister
VectorTxParams_swigregister(VectorTxParams)

class VectorRcvParams(_object):
    """Proxy of C++ std::vector<(cphd::RcvParameters)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorRcvParams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorRcvParams, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(VectorRcvParams self) -> SwigPyIterator"""
        return _cphd.VectorRcvParams_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(VectorRcvParams self) -> bool"""
        return _cphd.VectorRcvParams___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(VectorRcvParams self) -> bool"""
        return _cphd.VectorRcvParams___bool__(self)


    def __len__(self) -> "std::vector< cphd::RcvParameters >::size_type":
        """__len__(VectorRcvParams self) -> std::vector< cphd::RcvParameters >::size_type"""
        return _cphd.VectorRcvParams___len__(self)


    def __getslice__(self, i: 'std::vector< cphd::RcvParameters >::difference_type', j: 'std::vector< cphd::RcvParameters >::difference_type') -> "std::vector< cphd::RcvParameters,std::allocator< cphd::RcvParameters > > *":
        """__getslice__(VectorRcvParams self, std::vector< cphd::RcvParameters >::difference_type i, std::vector< cphd::RcvParameters >::difference_type j) -> VectorRcvParams"""
        return _cphd.VectorRcvParams___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(VectorRcvParams self, std::vector< cphd::RcvParameters >::difference_type i, std::vector< cphd::RcvParameters >::difference_type j)
        __setslice__(VectorRcvParams self, std::vector< cphd::RcvParameters >::difference_type i, std::vector< cphd::RcvParameters >::difference_type j, VectorRcvParams v)
        """
        return _cphd.VectorRcvParams___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< cphd::RcvParameters >::difference_type', j: 'std::vector< cphd::RcvParameters >::difference_type') -> "void":
        """__delslice__(VectorRcvParams self, std::vector< cphd::RcvParameters >::difference_type i, std::vector< cphd::RcvParameters >::difference_type j)"""
        return _cphd.VectorRcvParams___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(VectorRcvParams self, std::vector< cphd::RcvParameters >::difference_type i)
        __delitem__(VectorRcvParams self, PySliceObject * slice)
        """
        return _cphd.VectorRcvParams___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< cphd::RcvParameters >::value_type const &":
        """
        __getitem__(VectorRcvParams self, PySliceObject * slice) -> VectorRcvParams
        __getitem__(VectorRcvParams self, std::vector< cphd::RcvParameters >::difference_type i) -> RcvParameters
        """
        return _cphd.VectorRcvParams___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(VectorRcvParams self, PySliceObject * slice, VectorRcvParams v)
        __setitem__(VectorRcvParams self, PySliceObject * slice)
        __setitem__(VectorRcvParams self, std::vector< cphd::RcvParameters >::difference_type i, RcvParameters x)
        """
        return _cphd.VectorRcvParams___setitem__(self, *args)


    def pop(self) -> "std::vector< cphd::RcvParameters >::value_type":
        """pop(VectorRcvParams self) -> RcvParameters"""
        return _cphd.VectorRcvParams_pop(self)


    def append(self, x: 'RcvParameters') -> "void":
        """append(VectorRcvParams self, RcvParameters x)"""
        return _cphd.VectorRcvParams_append(self, x)


    def empty(self) -> "bool":
        """empty(VectorRcvParams self) -> bool"""
        return _cphd.VectorRcvParams_empty(self)


    def size(self) -> "std::vector< cphd::RcvParameters >::size_type":
        """size(VectorRcvParams self) -> std::vector< cphd::RcvParameters >::size_type"""
        return _cphd.VectorRcvParams_size(self)


    def swap(self, v: 'VectorRcvParams') -> "void":
        """swap(VectorRcvParams self, VectorRcvParams v)"""
        return _cphd.VectorRcvParams_swap(self, v)


    def begin(self) -> "std::vector< cphd::RcvParameters >::iterator":
        """begin(VectorRcvParams self) -> std::vector< cphd::RcvParameters >::iterator"""
        return _cphd.VectorRcvParams_begin(self)


    def end(self) -> "std::vector< cphd::RcvParameters >::iterator":
        """end(VectorRcvParams self) -> std::vector< cphd::RcvParameters >::iterator"""
        return _cphd.VectorRcvParams_end(self)


    def rbegin(self) -> "std::vector< cphd::RcvParameters >::reverse_iterator":
        """rbegin(VectorRcvParams self) -> std::vector< cphd::RcvParameters >::reverse_iterator"""
        return _cphd.VectorRcvParams_rbegin(self)


    def rend(self) -> "std::vector< cphd::RcvParameters >::reverse_iterator":
        """rend(VectorRcvParams self) -> std::vector< cphd::RcvParameters >::reverse_iterator"""
        return _cphd.VectorRcvParams_rend(self)


    def clear(self) -> "void":
        """clear(VectorRcvParams self)"""
        return _cphd.VectorRcvParams_clear(self)


    def get_allocator(self) -> "std::vector< cphd::RcvParameters >::allocator_type":
        """get_allocator(VectorRcvParams self) -> std::vector< cphd::RcvParameters >::allocator_type"""
        return _cphd.VectorRcvParams_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(VectorRcvParams self)"""
        return _cphd.VectorRcvParams_pop_back(self)


    def erase(self, *args) -> "std::vector< cphd::RcvParameters >::iterator":
        """
        erase(VectorRcvParams self, std::vector< cphd::RcvParameters >::iterator pos) -> std::vector< cphd::RcvParameters >::iterator
        erase(VectorRcvParams self, std::vector< cphd::RcvParameters >::iterator first, std::vector< cphd::RcvParameters >::iterator last) -> std::vector< cphd::RcvParameters >::iterator
        """
        return _cphd.VectorRcvParams_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(cphd::RcvParameters)> self) -> VectorRcvParams
        __init__(std::vector<(cphd::RcvParameters)> self, VectorRcvParams arg2) -> VectorRcvParams
        __init__(std::vector<(cphd::RcvParameters)> self, std::vector< cphd::RcvParameters >::size_type size) -> VectorRcvParams
        __init__(std::vector<(cphd::RcvParameters)> self, std::vector< cphd::RcvParameters >::size_type size, RcvParameters value) -> VectorRcvParams
        """
        this = _cphd.new_VectorRcvParams(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'RcvParameters') -> "void":
        """push_back(VectorRcvParams self, RcvParameters x)"""
        return _cphd.VectorRcvParams_push_back(self, x)


    def front(self) -> "std::vector< cphd::RcvParameters >::value_type const &":
        """front(VectorRcvParams self) -> RcvParameters"""
        return _cphd.VectorRcvParams_front(self)


    def back(self) -> "std::vector< cphd::RcvParameters >::value_type const &":
        """back(VectorRcvParams self) -> RcvParameters"""
        return _cphd.VectorRcvParams_back(self)


    def assign(self, n: 'std::vector< cphd::RcvParameters >::size_type', x: 'RcvParameters') -> "void":
        """assign(VectorRcvParams self, std::vector< cphd::RcvParameters >::size_type n, RcvParameters x)"""
        return _cphd.VectorRcvParams_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(VectorRcvParams self, std::vector< cphd::RcvParameters >::size_type new_size)
        resize(VectorRcvParams self, std::vector< cphd::RcvParameters >::size_type new_size, RcvParameters x)
        """
        return _cphd.VectorRcvParams_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(VectorRcvParams self, std::vector< cphd::RcvParameters >::iterator pos, RcvParameters x) -> std::vector< cphd::RcvParameters >::iterator
        insert(VectorRcvParams self, std::vector< cphd::RcvParameters >::iterator pos, std::vector< cphd::RcvParameters >::size_type n, RcvParameters x)
        """
        return _cphd.VectorRcvParams_insert(self, *args)


    def reserve(self, n: 'std::vector< cphd::RcvParameters >::size_type') -> "void":
        """reserve(VectorRcvParams self, std::vector< cphd::RcvParameters >::size_type n)"""
        return _cphd.VectorRcvParams_reserve(self, n)


    def capacity(self) -> "std::vector< cphd::RcvParameters >::size_type":
        """capacity(VectorRcvParams self) -> std::vector< cphd::RcvParameters >::size_type"""
        return _cphd.VectorRcvParams_capacity(self)


    def __getstate__(self):
    # Return a nonempty (thus non-false) tuple with dummy value in first position
        return (-1, tuple(pickle.dumps(elem) for elem in self))

    def __setstate__(self, state):
        self.__init__()
    # State will have a dummy entry in the first position
        for elem in state[1]:
            self.push_back(pickle.loads(elem))

    __swig_destroy__ = _cphd.delete_VectorRcvParams
    __del__ = lambda self: None
VectorRcvParams_swigregister = _cphd.VectorRcvParams_swigregister
VectorRcvParams_swigregister(VectorRcvParams)

class VectorCreationInfo(_object):
    """Proxy of C++ std::vector<(cphd::ProductInfo::CreationInfo)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorCreationInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorCreationInfo, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(VectorCreationInfo self) -> SwigPyIterator"""
        return _cphd.VectorCreationInfo_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(VectorCreationInfo self) -> bool"""
        return _cphd.VectorCreationInfo___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(VectorCreationInfo self) -> bool"""
        return _cphd.VectorCreationInfo___bool__(self)


    def __len__(self) -> "std::vector< cphd::ProductInfo::CreationInfo >::size_type":
        """__len__(VectorCreationInfo self) -> std::vector< cphd::ProductInfo::CreationInfo >::size_type"""
        return _cphd.VectorCreationInfo___len__(self)


    def __getslice__(self, i: 'std::vector< cphd::ProductInfo::CreationInfo >::difference_type', j: 'std::vector< cphd::ProductInfo::CreationInfo >::difference_type') -> "std::vector< cphd::ProductInfo::CreationInfo,std::allocator< cphd::ProductInfo::CreationInfo > > *":
        """__getslice__(VectorCreationInfo self, std::vector< cphd::ProductInfo::CreationInfo >::difference_type i, std::vector< cphd::ProductInfo::CreationInfo >::difference_type j) -> VectorCreationInfo"""
        return _cphd.VectorCreationInfo___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(VectorCreationInfo self, std::vector< cphd::ProductInfo::CreationInfo >::difference_type i, std::vector< cphd::ProductInfo::CreationInfo >::difference_type j)
        __setslice__(VectorCreationInfo self, std::vector< cphd::ProductInfo::CreationInfo >::difference_type i, std::vector< cphd::ProductInfo::CreationInfo >::difference_type j, VectorCreationInfo v)
        """
        return _cphd.VectorCreationInfo___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< cphd::ProductInfo::CreationInfo >::difference_type', j: 'std::vector< cphd::ProductInfo::CreationInfo >::difference_type') -> "void":
        """__delslice__(VectorCreationInfo self, std::vector< cphd::ProductInfo::CreationInfo >::difference_type i, std::vector< cphd::ProductInfo::CreationInfo >::difference_type j)"""
        return _cphd.VectorCreationInfo___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(VectorCreationInfo self, std::vector< cphd::ProductInfo::CreationInfo >::difference_type i)
        __delitem__(VectorCreationInfo self, PySliceObject * slice)
        """
        return _cphd.VectorCreationInfo___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< cphd::ProductInfo::CreationInfo >::value_type const &":
        """
        __getitem__(VectorCreationInfo self, PySliceObject * slice) -> VectorCreationInfo
        __getitem__(VectorCreationInfo self, std::vector< cphd::ProductInfo::CreationInfo >::difference_type i) -> CreationInfo
        """
        return _cphd.VectorCreationInfo___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(VectorCreationInfo self, PySliceObject * slice, VectorCreationInfo v)
        __setitem__(VectorCreationInfo self, PySliceObject * slice)
        __setitem__(VectorCreationInfo self, std::vector< cphd::ProductInfo::CreationInfo >::difference_type i, CreationInfo x)
        """
        return _cphd.VectorCreationInfo___setitem__(self, *args)


    def pop(self) -> "std::vector< cphd::ProductInfo::CreationInfo >::value_type":
        """pop(VectorCreationInfo self) -> CreationInfo"""
        return _cphd.VectorCreationInfo_pop(self)


    def append(self, x: 'CreationInfo') -> "void":
        """append(VectorCreationInfo self, CreationInfo x)"""
        return _cphd.VectorCreationInfo_append(self, x)


    def empty(self) -> "bool":
        """empty(VectorCreationInfo self) -> bool"""
        return _cphd.VectorCreationInfo_empty(self)


    def size(self) -> "std::vector< cphd::ProductInfo::CreationInfo >::size_type":
        """size(VectorCreationInfo self) -> std::vector< cphd::ProductInfo::CreationInfo >::size_type"""
        return _cphd.VectorCreationInfo_size(self)


    def swap(self, v: 'VectorCreationInfo') -> "void":
        """swap(VectorCreationInfo self, VectorCreationInfo v)"""
        return _cphd.VectorCreationInfo_swap(self, v)


    def begin(self) -> "std::vector< cphd::ProductInfo::CreationInfo >::iterator":
        """begin(VectorCreationInfo self) -> std::vector< cphd::ProductInfo::CreationInfo >::iterator"""
        return _cphd.VectorCreationInfo_begin(self)


    def end(self) -> "std::vector< cphd::ProductInfo::CreationInfo >::iterator":
        """end(VectorCreationInfo self) -> std::vector< cphd::ProductInfo::CreationInfo >::iterator"""
        return _cphd.VectorCreationInfo_end(self)


    def rbegin(self) -> "std::vector< cphd::ProductInfo::CreationInfo >::reverse_iterator":
        """rbegin(VectorCreationInfo self) -> std::vector< cphd::ProductInfo::CreationInfo >::reverse_iterator"""
        return _cphd.VectorCreationInfo_rbegin(self)


    def rend(self) -> "std::vector< cphd::ProductInfo::CreationInfo >::reverse_iterator":
        """rend(VectorCreationInfo self) -> std::vector< cphd::ProductInfo::CreationInfo >::reverse_iterator"""
        return _cphd.VectorCreationInfo_rend(self)


    def clear(self) -> "void":
        """clear(VectorCreationInfo self)"""
        return _cphd.VectorCreationInfo_clear(self)


    def get_allocator(self) -> "std::vector< cphd::ProductInfo::CreationInfo >::allocator_type":
        """get_allocator(VectorCreationInfo self) -> std::vector< cphd::ProductInfo::CreationInfo >::allocator_type"""
        return _cphd.VectorCreationInfo_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(VectorCreationInfo self)"""
        return _cphd.VectorCreationInfo_pop_back(self)


    def erase(self, *args) -> "std::vector< cphd::ProductInfo::CreationInfo >::iterator":
        """
        erase(VectorCreationInfo self, std::vector< cphd::ProductInfo::CreationInfo >::iterator pos) -> std::vector< cphd::ProductInfo::CreationInfo >::iterator
        erase(VectorCreationInfo self, std::vector< cphd::ProductInfo::CreationInfo >::iterator first, std::vector< cphd::ProductInfo::CreationInfo >::iterator last) -> std::vector< cphd::ProductInfo::CreationInfo >::iterator
        """
        return _cphd.VectorCreationInfo_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(cphd::ProductInfo::CreationInfo)> self) -> VectorCreationInfo
        __init__(std::vector<(cphd::ProductInfo::CreationInfo)> self, VectorCreationInfo arg2) -> VectorCreationInfo
        __init__(std::vector<(cphd::ProductInfo::CreationInfo)> self, std::vector< cphd::ProductInfo::CreationInfo >::size_type size) -> VectorCreationInfo
        __init__(std::vector<(cphd::ProductInfo::CreationInfo)> self, std::vector< cphd::ProductInfo::CreationInfo >::size_type size, CreationInfo value) -> VectorCreationInfo
        """
        this = _cphd.new_VectorCreationInfo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'CreationInfo') -> "void":
        """push_back(VectorCreationInfo self, CreationInfo x)"""
        return _cphd.VectorCreationInfo_push_back(self, x)


    def front(self) -> "std::vector< cphd::ProductInfo::CreationInfo >::value_type const &":
        """front(VectorCreationInfo self) -> CreationInfo"""
        return _cphd.VectorCreationInfo_front(self)


    def back(self) -> "std::vector< cphd::ProductInfo::CreationInfo >::value_type const &":
        """back(VectorCreationInfo self) -> CreationInfo"""
        return _cphd.VectorCreationInfo_back(self)


    def assign(self, n: 'std::vector< cphd::ProductInfo::CreationInfo >::size_type', x: 'CreationInfo') -> "void":
        """assign(VectorCreationInfo self, std::vector< cphd::ProductInfo::CreationInfo >::size_type n, CreationInfo x)"""
        return _cphd.VectorCreationInfo_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(VectorCreationInfo self, std::vector< cphd::ProductInfo::CreationInfo >::size_type new_size)
        resize(VectorCreationInfo self, std::vector< cphd::ProductInfo::CreationInfo >::size_type new_size, CreationInfo x)
        """
        return _cphd.VectorCreationInfo_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(VectorCreationInfo self, std::vector< cphd::ProductInfo::CreationInfo >::iterator pos, CreationInfo x) -> std::vector< cphd::ProductInfo::CreationInfo >::iterator
        insert(VectorCreationInfo self, std::vector< cphd::ProductInfo::CreationInfo >::iterator pos, std::vector< cphd::ProductInfo::CreationInfo >::size_type n, CreationInfo x)
        """
        return _cphd.VectorCreationInfo_insert(self, *args)


    def reserve(self, n: 'std::vector< cphd::ProductInfo::CreationInfo >::size_type') -> "void":
        """reserve(VectorCreationInfo self, std::vector< cphd::ProductInfo::CreationInfo >::size_type n)"""
        return _cphd.VectorCreationInfo_reserve(self, n)


    def capacity(self) -> "std::vector< cphd::ProductInfo::CreationInfo >::size_type":
        """capacity(VectorCreationInfo self) -> std::vector< cphd::ProductInfo::CreationInfo >::size_type"""
        return _cphd.VectorCreationInfo_capacity(self)


    def __getstate__(self):
    # Return a nonempty (thus non-false) tuple with dummy value in first position
        return (-1, tuple(pickle.dumps(elem) for elem in self))

    def __setstate__(self, state):
        self.__init__()
    # State will have a dummy entry in the first position
        for elem in state[1]:
            self.push_back(pickle.loads(elem))

    __swig_destroy__ = _cphd.delete_VectorCreationInfo
    __del__ = lambda self: None
VectorCreationInfo_swigregister = _cphd.VectorCreationInfo_swigregister
VectorCreationInfo_swigregister(VectorCreationInfo)

class VectorGeoInfo(_object):
    """Proxy of C++ std::vector<(six::GeoInfo)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorGeoInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorGeoInfo, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(VectorGeoInfo self) -> SwigPyIterator"""
        return _cphd.VectorGeoInfo_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(VectorGeoInfo self) -> bool"""
        return _cphd.VectorGeoInfo___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(VectorGeoInfo self) -> bool"""
        return _cphd.VectorGeoInfo___bool__(self)


    def __len__(self) -> "std::vector< six::GeoInfo >::size_type":
        """__len__(VectorGeoInfo self) -> std::vector< six::GeoInfo >::size_type"""
        return _cphd.VectorGeoInfo___len__(self)


    def __getslice__(self, i: 'std::vector< six::GeoInfo >::difference_type', j: 'std::vector< six::GeoInfo >::difference_type') -> "std::vector< six::GeoInfo,std::allocator< six::GeoInfo > > *":
        """__getslice__(VectorGeoInfo self, std::vector< six::GeoInfo >::difference_type i, std::vector< six::GeoInfo >::difference_type j) -> VectorGeoInfo"""
        return _cphd.VectorGeoInfo___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(VectorGeoInfo self, std::vector< six::GeoInfo >::difference_type i, std::vector< six::GeoInfo >::difference_type j)
        __setslice__(VectorGeoInfo self, std::vector< six::GeoInfo >::difference_type i, std::vector< six::GeoInfo >::difference_type j, VectorGeoInfo v)
        """
        return _cphd.VectorGeoInfo___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< six::GeoInfo >::difference_type', j: 'std::vector< six::GeoInfo >::difference_type') -> "void":
        """__delslice__(VectorGeoInfo self, std::vector< six::GeoInfo >::difference_type i, std::vector< six::GeoInfo >::difference_type j)"""
        return _cphd.VectorGeoInfo___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(VectorGeoInfo self, std::vector< six::GeoInfo >::difference_type i)
        __delitem__(VectorGeoInfo self, PySliceObject * slice)
        """
        return _cphd.VectorGeoInfo___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< six::GeoInfo >::value_type const &":
        """
        __getitem__(VectorGeoInfo self, PySliceObject * slice) -> VectorGeoInfo
        __getitem__(VectorGeoInfo self, std::vector< six::GeoInfo >::difference_type i) -> GeoInfo
        """
        return _cphd.VectorGeoInfo___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(VectorGeoInfo self, PySliceObject * slice, VectorGeoInfo v)
        __setitem__(VectorGeoInfo self, PySliceObject * slice)
        __setitem__(VectorGeoInfo self, std::vector< six::GeoInfo >::difference_type i, GeoInfo x)
        """
        return _cphd.VectorGeoInfo___setitem__(self, *args)


    def pop(self) -> "std::vector< six::GeoInfo >::value_type":
        """pop(VectorGeoInfo self) -> GeoInfo"""
        return _cphd.VectorGeoInfo_pop(self)


    def append(self, x: 'GeoInfo') -> "void":
        """append(VectorGeoInfo self, GeoInfo x)"""
        return _cphd.VectorGeoInfo_append(self, x)


    def empty(self) -> "bool":
        """empty(VectorGeoInfo self) -> bool"""
        return _cphd.VectorGeoInfo_empty(self)


    def size(self) -> "std::vector< six::GeoInfo >::size_type":
        """size(VectorGeoInfo self) -> std::vector< six::GeoInfo >::size_type"""
        return _cphd.VectorGeoInfo_size(self)


    def swap(self, v: 'VectorGeoInfo') -> "void":
        """swap(VectorGeoInfo self, VectorGeoInfo v)"""
        return _cphd.VectorGeoInfo_swap(self, v)


    def begin(self) -> "std::vector< six::GeoInfo >::iterator":
        """begin(VectorGeoInfo self) -> std::vector< six::GeoInfo >::iterator"""
        return _cphd.VectorGeoInfo_begin(self)


    def end(self) -> "std::vector< six::GeoInfo >::iterator":
        """end(VectorGeoInfo self) -> std::vector< six::GeoInfo >::iterator"""
        return _cphd.VectorGeoInfo_end(self)


    def rbegin(self) -> "std::vector< six::GeoInfo >::reverse_iterator":
        """rbegin(VectorGeoInfo self) -> std::vector< six::GeoInfo >::reverse_iterator"""
        return _cphd.VectorGeoInfo_rbegin(self)


    def rend(self) -> "std::vector< six::GeoInfo >::reverse_iterator":
        """rend(VectorGeoInfo self) -> std::vector< six::GeoInfo >::reverse_iterator"""
        return _cphd.VectorGeoInfo_rend(self)


    def clear(self) -> "void":
        """clear(VectorGeoInfo self)"""
        return _cphd.VectorGeoInfo_clear(self)


    def get_allocator(self) -> "std::vector< six::GeoInfo >::allocator_type":
        """get_allocator(VectorGeoInfo self) -> std::vector< six::GeoInfo >::allocator_type"""
        return _cphd.VectorGeoInfo_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(VectorGeoInfo self)"""
        return _cphd.VectorGeoInfo_pop_back(self)


    def erase(self, *args) -> "std::vector< six::GeoInfo >::iterator":
        """
        erase(VectorGeoInfo self, std::vector< six::GeoInfo >::iterator pos) -> std::vector< six::GeoInfo >::iterator
        erase(VectorGeoInfo self, std::vector< six::GeoInfo >::iterator first, std::vector< six::GeoInfo >::iterator last) -> std::vector< six::GeoInfo >::iterator
        """
        return _cphd.VectorGeoInfo_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(six::GeoInfo)> self) -> VectorGeoInfo
        __init__(std::vector<(six::GeoInfo)> self, VectorGeoInfo arg2) -> VectorGeoInfo
        __init__(std::vector<(six::GeoInfo)> self, std::vector< six::GeoInfo >::size_type size) -> VectorGeoInfo
        __init__(std::vector<(six::GeoInfo)> self, std::vector< six::GeoInfo >::size_type size, GeoInfo value) -> VectorGeoInfo
        """
        this = _cphd.new_VectorGeoInfo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'GeoInfo') -> "void":
        """push_back(VectorGeoInfo self, GeoInfo x)"""
        return _cphd.VectorGeoInfo_push_back(self, x)


    def front(self) -> "std::vector< six::GeoInfo >::value_type const &":
        """front(VectorGeoInfo self) -> GeoInfo"""
        return _cphd.VectorGeoInfo_front(self)


    def back(self) -> "std::vector< six::GeoInfo >::value_type const &":
        """back(VectorGeoInfo self) -> GeoInfo"""
        return _cphd.VectorGeoInfo_back(self)


    def assign(self, n: 'std::vector< six::GeoInfo >::size_type', x: 'GeoInfo') -> "void":
        """assign(VectorGeoInfo self, std::vector< six::GeoInfo >::size_type n, GeoInfo x)"""
        return _cphd.VectorGeoInfo_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(VectorGeoInfo self, std::vector< six::GeoInfo >::size_type new_size)
        resize(VectorGeoInfo self, std::vector< six::GeoInfo >::size_type new_size, GeoInfo x)
        """
        return _cphd.VectorGeoInfo_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(VectorGeoInfo self, std::vector< six::GeoInfo >::iterator pos, GeoInfo x) -> std::vector< six::GeoInfo >::iterator
        insert(VectorGeoInfo self, std::vector< six::GeoInfo >::iterator pos, std::vector< six::GeoInfo >::size_type n, GeoInfo x)
        """
        return _cphd.VectorGeoInfo_insert(self, *args)


    def reserve(self, n: 'std::vector< six::GeoInfo >::size_type') -> "void":
        """reserve(VectorGeoInfo self, std::vector< six::GeoInfo >::size_type n)"""
        return _cphd.VectorGeoInfo_reserve(self, n)


    def capacity(self) -> "std::vector< six::GeoInfo >::size_type":
        """capacity(VectorGeoInfo self) -> std::vector< six::GeoInfo >::size_type"""
        return _cphd.VectorGeoInfo_capacity(self)


    def __getstate__(self):
    # Return a nonempty (thus non-false) tuple with dummy value in first position
        return (-1, tuple(pickle.dumps(elem) for elem in self))

    def __setstate__(self, state):
        self.__init__()
    # State will have a dummy entry in the first position
        for elem in state[1]:
            self.push_back(pickle.loads(elem))

    __swig_destroy__ = _cphd.delete_VectorGeoInfo
    __del__ = lambda self: None
VectorGeoInfo_swigregister = _cphd.VectorGeoInfo_swigregister
VectorGeoInfo_swigregister(VectorGeoInfo)

class StdAutoSupportArray(_object):
    """Proxy of C++ std::auto_ptr<(cphd::SupportArray)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoSupportArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoSupportArray, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(cphd::SupportArray)> self) -> StdAutoSupportArray"""
        this = _cphd.new_StdAutoSupportArray()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cphd.delete_StdAutoSupportArray
    __del__ = lambda self: None
StdAutoSupportArray_swigregister = _cphd.StdAutoSupportArray_swigregister
StdAutoSupportArray_swigregister(StdAutoSupportArray)

class ScopedCopyableSupportArray(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(cphd::SupportArray)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableSupportArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableSupportArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(cphd::SupportArray)> self, SupportArray ptr=None) -> ScopedCopyableSupportArray
        __init__(mem::ScopedCopyablePtr<(cphd::SupportArray)> self) -> ScopedCopyableSupportArray
        __init__(mem::ScopedCopyablePtr<(cphd::SupportArray)> self, ScopedCopyableSupportArray rhs) -> ScopedCopyableSupportArray
        """
        this = _cphd.new_ScopedCopyableSupportArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __nonzero__(self):
        return _cphd.ScopedCopyableSupportArray___nonzero__(self)
    __bool__ = __nonzero__



    def get(self) -> "cphd::SupportArray *":
        """get(ScopedCopyableSupportArray self) -> SupportArray"""
        return _cphd.ScopedCopyableSupportArray_get(self)


    def __ref__(self) -> "cphd::SupportArray &":
        """__ref__(ScopedCopyableSupportArray self) -> SupportArray"""
        return _cphd.ScopedCopyableSupportArray___ref__(self)


    def __deref__(self) -> "cphd::SupportArray *":
        """__deref__(ScopedCopyableSupportArray self) -> SupportArray"""
        return _cphd.ScopedCopyableSupportArray___deref__(self)


    def reset(self, ptr: 'SupportArray'=None) -> "void":
        """
        reset(ScopedCopyableSupportArray self, SupportArray ptr=None)
        reset(ScopedCopyableSupportArray self)
        """
        return _cphd.ScopedCopyableSupportArray_reset(self, ptr)

    __swig_destroy__ = _cphd.delete_ScopedCopyableSupportArray
    __del__ = lambda self: None

    def __eq__(self, other: 'SupportArray') -> "bool":
        """__eq__(ScopedCopyableSupportArray self, SupportArray other) -> bool"""
        return _cphd.ScopedCopyableSupportArray___eq__(self, other)


    def __ne__(self, other: 'SupportArray') -> "bool":
        """__ne__(ScopedCopyableSupportArray self, SupportArray other) -> bool"""
        return _cphd.ScopedCopyableSupportArray___ne__(self, other)


    def getIAZSupportArray(self, key: 'std::string const &') -> "cphd::SupportArrayParameter":
        """getIAZSupportArray(ScopedCopyableSupportArray self, std::string const & key) -> SupportArrayParameter"""
        return _cphd.ScopedCopyableSupportArray_getIAZSupportArray(self, key)


    def getAGPSupportArray(self, key: 'std::string const &') -> "cphd::SupportArrayParameter":
        """getAGPSupportArray(ScopedCopyableSupportArray self, std::string const & key) -> SupportArrayParameter"""
        return _cphd.ScopedCopyableSupportArray_getAGPSupportArray(self, key)


    def getAddedSupportArray(self, key: 'std::string const &') -> "cphd::AdditionalSupportArray":
        """getAddedSupportArray(ScopedCopyableSupportArray self, std::string const & key) -> AdditionalSupportArray"""
        return _cphd.ScopedCopyableSupportArray_getAddedSupportArray(self, key)

    __swig_setmethods__["iazArray"] = _cphd.ScopedCopyableSupportArray_iazArray_set
    __swig_getmethods__["iazArray"] = _cphd.ScopedCopyableSupportArray_iazArray_get
    if _newclass:
        iazArray = _swig_property(_cphd.ScopedCopyableSupportArray_iazArray_get, _cphd.ScopedCopyableSupportArray_iazArray_set)
    __swig_setmethods__["antGainPhase"] = _cphd.ScopedCopyableSupportArray_antGainPhase_set
    __swig_getmethods__["antGainPhase"] = _cphd.ScopedCopyableSupportArray_antGainPhase_get
    if _newclass:
        antGainPhase = _swig_property(_cphd.ScopedCopyableSupportArray_antGainPhase_get, _cphd.ScopedCopyableSupportArray_antGainPhase_set)
    __swig_setmethods__["addedSupportArray"] = _cphd.ScopedCopyableSupportArray_addedSupportArray_set
    __swig_getmethods__["addedSupportArray"] = _cphd.ScopedCopyableSupportArray_addedSupportArray_get
    if _newclass:
        addedSupportArray = _swig_property(_cphd.ScopedCopyableSupportArray_addedSupportArray_get, _cphd.ScopedCopyableSupportArray_addedSupportArray_set)
ScopedCopyableSupportArray_swigregister = _cphd.ScopedCopyableSupportArray_swigregister
ScopedCopyableSupportArray_swigregister(ScopedCopyableSupportArray)


def makeScopedCopyableSupportArray() -> "mem::ScopedCopyablePtr< cphd::SupportArray >":
    """makeScopedCopyableSupportArray() -> ScopedCopyableSupportArray"""
    return _cphd.makeScopedCopyableSupportArray()
class StdAutoTropoParameters(_object):
    """Proxy of C++ std::auto_ptr<(cphd::TropoParameters)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoTropoParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoTropoParameters, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(cphd::TropoParameters)> self) -> StdAutoTropoParameters"""
        this = _cphd.new_StdAutoTropoParameters()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cphd.delete_StdAutoTropoParameters
    __del__ = lambda self: None
StdAutoTropoParameters_swigregister = _cphd.StdAutoTropoParameters_swigregister
StdAutoTropoParameters_swigregister(StdAutoTropoParameters)

class ScopedCopyableTropoParameters(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(cphd::TropoParameters)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableTropoParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableTropoParameters, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(cphd::TropoParameters)> self, TropoParameters ptr=None) -> ScopedCopyableTropoParameters
        __init__(mem::ScopedCopyablePtr<(cphd::TropoParameters)> self) -> ScopedCopyableTropoParameters
        __init__(mem::ScopedCopyablePtr<(cphd::TropoParameters)> self, ScopedCopyableTropoParameters rhs) -> ScopedCopyableTropoParameters
        """
        this = _cphd.new_ScopedCopyableTropoParameters(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __nonzero__(self):
        return _cphd.ScopedCopyableTropoParameters___nonzero__(self)
    __bool__ = __nonzero__



    def get(self) -> "cphd::TropoParameters *":
        """get(ScopedCopyableTropoParameters self) -> TropoParameters"""
        return _cphd.ScopedCopyableTropoParameters_get(self)


    def __ref__(self) -> "cphd::TropoParameters &":
        """__ref__(ScopedCopyableTropoParameters self) -> TropoParameters"""
        return _cphd.ScopedCopyableTropoParameters___ref__(self)


    def __deref__(self) -> "cphd::TropoParameters *":
        """__deref__(ScopedCopyableTropoParameters self) -> TropoParameters"""
        return _cphd.ScopedCopyableTropoParameters___deref__(self)


    def reset(self, ptr: 'TropoParameters'=None) -> "void":
        """
        reset(ScopedCopyableTropoParameters self, TropoParameters ptr=None)
        reset(ScopedCopyableTropoParameters self)
        """
        return _cphd.ScopedCopyableTropoParameters_reset(self, ptr)

    __swig_destroy__ = _cphd.delete_ScopedCopyableTropoParameters
    __del__ = lambda self: None

    def __eq__(self, other: 'TropoParameters') -> "bool":
        """__eq__(ScopedCopyableTropoParameters self, TropoParameters other) -> bool"""
        return _cphd.ScopedCopyableTropoParameters___eq__(self, other)


    def __ne__(self, other: 'TropoParameters') -> "bool":
        """__ne__(ScopedCopyableTropoParameters self, TropoParameters other) -> bool"""
        return _cphd.ScopedCopyableTropoParameters___ne__(self, other)

    __swig_setmethods__["n0"] = _cphd.ScopedCopyableTropoParameters_n0_set
    __swig_getmethods__["n0"] = _cphd.ScopedCopyableTropoParameters_n0_get
    if _newclass:
        n0 = _swig_property(_cphd.ScopedCopyableTropoParameters_n0_get, _cphd.ScopedCopyableTropoParameters_n0_set)
    __swig_setmethods__["refHeight"] = _cphd.ScopedCopyableTropoParameters_refHeight_set
    __swig_getmethods__["refHeight"] = _cphd.ScopedCopyableTropoParameters_refHeight_get
    if _newclass:
        refHeight = _swig_property(_cphd.ScopedCopyableTropoParameters_refHeight_get, _cphd.ScopedCopyableTropoParameters_refHeight_set)
ScopedCopyableTropoParameters_swigregister = _cphd.ScopedCopyableTropoParameters_swigregister
ScopedCopyableTropoParameters_swigregister(ScopedCopyableTropoParameters)


def makeScopedCopyableTropoParameters() -> "mem::ScopedCopyablePtr< cphd::TropoParameters >":
    """makeScopedCopyableTropoParameters() -> ScopedCopyableTropoParameters"""
    return _cphd.makeScopedCopyableTropoParameters()
class StdAutoIonoParameters(_object):
    """Proxy of C++ std::auto_ptr<(cphd::IonoParameters)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoIonoParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoIonoParameters, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(cphd::IonoParameters)> self) -> StdAutoIonoParameters"""
        this = _cphd.new_StdAutoIonoParameters()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cphd.delete_StdAutoIonoParameters
    __del__ = lambda self: None
StdAutoIonoParameters_swigregister = _cphd.StdAutoIonoParameters_swigregister
StdAutoIonoParameters_swigregister(StdAutoIonoParameters)

class ScopedCopyableIonoParameters(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(cphd::IonoParameters)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableIonoParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableIonoParameters, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(cphd::IonoParameters)> self, IonoParameters ptr=None) -> ScopedCopyableIonoParameters
        __init__(mem::ScopedCopyablePtr<(cphd::IonoParameters)> self) -> ScopedCopyableIonoParameters
        __init__(mem::ScopedCopyablePtr<(cphd::IonoParameters)> self, ScopedCopyableIonoParameters rhs) -> ScopedCopyableIonoParameters
        """
        this = _cphd.new_ScopedCopyableIonoParameters(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __nonzero__(self):
        return _cphd.ScopedCopyableIonoParameters___nonzero__(self)
    __bool__ = __nonzero__



    def get(self) -> "cphd::IonoParameters *":
        """get(ScopedCopyableIonoParameters self) -> IonoParameters"""
        return _cphd.ScopedCopyableIonoParameters_get(self)


    def __ref__(self) -> "cphd::IonoParameters &":
        """__ref__(ScopedCopyableIonoParameters self) -> IonoParameters"""
        return _cphd.ScopedCopyableIonoParameters___ref__(self)


    def __deref__(self) -> "cphd::IonoParameters *":
        """__deref__(ScopedCopyableIonoParameters self) -> IonoParameters"""
        return _cphd.ScopedCopyableIonoParameters___deref__(self)


    def reset(self, ptr: 'IonoParameters'=None) -> "void":
        """
        reset(ScopedCopyableIonoParameters self, IonoParameters ptr=None)
        reset(ScopedCopyableIonoParameters self)
        """
        return _cphd.ScopedCopyableIonoParameters_reset(self, ptr)

    __swig_destroy__ = _cphd.delete_ScopedCopyableIonoParameters
    __del__ = lambda self: None

    def __eq__(self, other: 'IonoParameters') -> "bool":
        """__eq__(ScopedCopyableIonoParameters self, IonoParameters other) -> bool"""
        return _cphd.ScopedCopyableIonoParameters___eq__(self, other)


    def __ne__(self, other: 'IonoParameters') -> "bool":
        """__ne__(ScopedCopyableIonoParameters self, IonoParameters other) -> bool"""
        return _cphd.ScopedCopyableIonoParameters___ne__(self, other)

    __swig_setmethods__["tecv"] = _cphd.ScopedCopyableIonoParameters_tecv_set
    __swig_getmethods__["tecv"] = _cphd.ScopedCopyableIonoParameters_tecv_get
    if _newclass:
        tecv = _swig_property(_cphd.ScopedCopyableIonoParameters_tecv_get, _cphd.ScopedCopyableIonoParameters_tecv_set)
    __swig_setmethods__["f2Height"] = _cphd.ScopedCopyableIonoParameters_f2Height_set
    __swig_getmethods__["f2Height"] = _cphd.ScopedCopyableIonoParameters_f2Height_get
    if _newclass:
        f2Height = _swig_property(_cphd.ScopedCopyableIonoParameters_f2Height_get, _cphd.ScopedCopyableIonoParameters_f2Height_set)
ScopedCopyableIonoParameters_swigregister = _cphd.ScopedCopyableIonoParameters_swigregister
ScopedCopyableIonoParameters_swigregister(ScopedCopyableIonoParameters)


def makeScopedCopyableIonoParameters() -> "mem::ScopedCopyablePtr< cphd::IonoParameters >":
    """makeScopedCopyableIonoParameters() -> ScopedCopyableIonoParameters"""
    return _cphd.makeScopedCopyableIonoParameters()
class StdAutoPlanar(_object):
    """Proxy of C++ std::auto_ptr<(cphd::Planar)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoPlanar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoPlanar, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(cphd::Planar)> self) -> StdAutoPlanar"""
        this = _cphd.new_StdAutoPlanar()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cphd.delete_StdAutoPlanar
    __del__ = lambda self: None
StdAutoPlanar_swigregister = _cphd.StdAutoPlanar_swigregister
StdAutoPlanar_swigregister(StdAutoPlanar)

class ScopedCopyablePlanar(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(cphd::Planar)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyablePlanar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyablePlanar, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(cphd::Planar)> self, Planar ptr=None) -> ScopedCopyablePlanar
        __init__(mem::ScopedCopyablePtr<(cphd::Planar)> self) -> ScopedCopyablePlanar
        __init__(mem::ScopedCopyablePtr<(cphd::Planar)> self, ScopedCopyablePlanar rhs) -> ScopedCopyablePlanar
        """
        this = _cphd.new_ScopedCopyablePlanar(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __nonzero__(self):
        return _cphd.ScopedCopyablePlanar___nonzero__(self)
    __bool__ = __nonzero__



    def get(self) -> "cphd::Planar *":
        """get(ScopedCopyablePlanar self) -> Planar"""
        return _cphd.ScopedCopyablePlanar_get(self)


    def __ref__(self) -> "cphd::Planar &":
        """__ref__(ScopedCopyablePlanar self) -> Planar"""
        return _cphd.ScopedCopyablePlanar___ref__(self)


    def __deref__(self) -> "cphd::Planar *":
        """__deref__(ScopedCopyablePlanar self) -> Planar"""
        return _cphd.ScopedCopyablePlanar___deref__(self)


    def reset(self, ptr: 'Planar'=None) -> "void":
        """
        reset(ScopedCopyablePlanar self, Planar ptr=None)
        reset(ScopedCopyablePlanar self)
        """
        return _cphd.ScopedCopyablePlanar_reset(self, ptr)

    __swig_destroy__ = _cphd.delete_ScopedCopyablePlanar
    __del__ = lambda self: None

    def __eq__(self, other: 'Planar') -> "bool":
        """__eq__(ScopedCopyablePlanar self, Planar other) -> bool"""
        return _cphd.ScopedCopyablePlanar___eq__(self, other)


    def __ne__(self, other: 'Planar') -> "bool":
        """__ne__(ScopedCopyablePlanar self, Planar other) -> bool"""
        return _cphd.ScopedCopyablePlanar___ne__(self, other)

    __swig_setmethods__["uIax"] = _cphd.ScopedCopyablePlanar_uIax_set
    __swig_getmethods__["uIax"] = _cphd.ScopedCopyablePlanar_uIax_get
    if _newclass:
        uIax = _swig_property(_cphd.ScopedCopyablePlanar_uIax_get, _cphd.ScopedCopyablePlanar_uIax_set)
    __swig_setmethods__["uIay"] = _cphd.ScopedCopyablePlanar_uIay_set
    __swig_getmethods__["uIay"] = _cphd.ScopedCopyablePlanar_uIay_get
    if _newclass:
        uIay = _swig_property(_cphd.ScopedCopyablePlanar_uIay_get, _cphd.ScopedCopyablePlanar_uIay_set)
ScopedCopyablePlanar_swigregister = _cphd.ScopedCopyablePlanar_swigregister
ScopedCopyablePlanar_swigregister(ScopedCopyablePlanar)


def makeScopedCopyablePlanar() -> "mem::ScopedCopyablePtr< cphd::Planar >":
    """makeScopedCopyablePlanar() -> ScopedCopyablePlanar"""
    return _cphd.makeScopedCopyablePlanar()
class StdAutoHAE(_object):
    """Proxy of C++ std::auto_ptr<(cphd::HAE)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoHAE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoHAE, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(cphd::HAE)> self) -> StdAutoHAE"""
        this = _cphd.new_StdAutoHAE()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cphd.delete_StdAutoHAE
    __del__ = lambda self: None
StdAutoHAE_swigregister = _cphd.StdAutoHAE_swigregister
StdAutoHAE_swigregister(StdAutoHAE)

class ScopedCopyableHAE(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(cphd::HAE)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableHAE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableHAE, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(cphd::HAE)> self, HAE ptr=None) -> ScopedCopyableHAE
        __init__(mem::ScopedCopyablePtr<(cphd::HAE)> self) -> ScopedCopyableHAE
        __init__(mem::ScopedCopyablePtr<(cphd::HAE)> self, ScopedCopyableHAE rhs) -> ScopedCopyableHAE
        """
        this = _cphd.new_ScopedCopyableHAE(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __nonzero__(self):
        return _cphd.ScopedCopyableHAE___nonzero__(self)
    __bool__ = __nonzero__



    def get(self) -> "cphd::HAE *":
        """get(ScopedCopyableHAE self) -> HAE"""
        return _cphd.ScopedCopyableHAE_get(self)


    def __ref__(self) -> "cphd::HAE &":
        """__ref__(ScopedCopyableHAE self) -> HAE"""
        return _cphd.ScopedCopyableHAE___ref__(self)


    def __deref__(self) -> "cphd::HAE *":
        """__deref__(ScopedCopyableHAE self) -> HAE"""
        return _cphd.ScopedCopyableHAE___deref__(self)


    def reset(self, ptr: 'HAE'=None) -> "void":
        """
        reset(ScopedCopyableHAE self, HAE ptr=None)
        reset(ScopedCopyableHAE self)
        """
        return _cphd.ScopedCopyableHAE_reset(self, ptr)

    __swig_destroy__ = _cphd.delete_ScopedCopyableHAE
    __del__ = lambda self: None

    def __eq__(self, other: 'HAE') -> "bool":
        """__eq__(ScopedCopyableHAE self, HAE other) -> bool"""
        return _cphd.ScopedCopyableHAE___eq__(self, other)


    def __ne__(self, other: 'HAE') -> "bool":
        """__ne__(ScopedCopyableHAE self, HAE other) -> bool"""
        return _cphd.ScopedCopyableHAE___ne__(self, other)

    __swig_setmethods__["uIax"] = _cphd.ScopedCopyableHAE_uIax_set
    __swig_getmethods__["uIax"] = _cphd.ScopedCopyableHAE_uIax_get
    if _newclass:
        uIax = _swig_property(_cphd.ScopedCopyableHAE_uIax_get, _cphd.ScopedCopyableHAE_uIax_set)
    __swig_setmethods__["uIay"] = _cphd.ScopedCopyableHAE_uIay_set
    __swig_getmethods__["uIay"] = _cphd.ScopedCopyableHAE_uIay_get
    if _newclass:
        uIay = _swig_property(_cphd.ScopedCopyableHAE_uIay_get, _cphd.ScopedCopyableHAE_uIay_set)
ScopedCopyableHAE_swigregister = _cphd.ScopedCopyableHAE_swigregister
ScopedCopyableHAE_swigregister(ScopedCopyableHAE)


def makeScopedCopyableHAE() -> "mem::ScopedCopyablePtr< cphd::HAE >":
    """makeScopedCopyableHAE() -> ScopedCopyableHAE"""
    return _cphd.makeScopedCopyableHAE()
class StdAutoAreaType(_object):
    """Proxy of C++ std::auto_ptr<(cphd::AreaType)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoAreaType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoAreaType, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(cphd::AreaType)> self) -> StdAutoAreaType"""
        this = _cphd.new_StdAutoAreaType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cphd.delete_StdAutoAreaType
    __del__ = lambda self: None
StdAutoAreaType_swigregister = _cphd.StdAutoAreaType_swigregister
StdAutoAreaType_swigregister(StdAutoAreaType)

class ScopedCopyableAreaType(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(cphd::AreaType)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableAreaType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableAreaType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(cphd::AreaType)> self, AreaType ptr=None) -> ScopedCopyableAreaType
        __init__(mem::ScopedCopyablePtr<(cphd::AreaType)> self) -> ScopedCopyableAreaType
        __init__(mem::ScopedCopyablePtr<(cphd::AreaType)> self, ScopedCopyableAreaType rhs) -> ScopedCopyableAreaType
        """
        this = _cphd.new_ScopedCopyableAreaType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __nonzero__(self):
        return _cphd.ScopedCopyableAreaType___nonzero__(self)
    __bool__ = __nonzero__



    def get(self) -> "cphd::AreaType *":
        """get(ScopedCopyableAreaType self) -> AreaType"""
        return _cphd.ScopedCopyableAreaType_get(self)


    def __ref__(self) -> "cphd::AreaType &":
        """__ref__(ScopedCopyableAreaType self) -> AreaType"""
        return _cphd.ScopedCopyableAreaType___ref__(self)


    def __deref__(self) -> "cphd::AreaType *":
        """__deref__(ScopedCopyableAreaType self) -> AreaType"""
        return _cphd.ScopedCopyableAreaType___deref__(self)


    def reset(self, ptr: 'AreaType'=None) -> "void":
        """
        reset(ScopedCopyableAreaType self, AreaType ptr=None)
        reset(ScopedCopyableAreaType self)
        """
        return _cphd.ScopedCopyableAreaType_reset(self, ptr)

    __swig_destroy__ = _cphd.delete_ScopedCopyableAreaType
    __del__ = lambda self: None

    def __eq__(self, other: 'AreaType') -> "bool":
        """__eq__(ScopedCopyableAreaType self, AreaType other) -> bool"""
        return _cphd.ScopedCopyableAreaType___eq__(self, other)


    def __ne__(self, other: 'AreaType') -> "bool":
        """__ne__(ScopedCopyableAreaType self, AreaType other) -> bool"""
        return _cphd.ScopedCopyableAreaType___ne__(self, other)

    __swig_setmethods__["x1y1"] = _cphd.ScopedCopyableAreaType_x1y1_set
    __swig_getmethods__["x1y1"] = _cphd.ScopedCopyableAreaType_x1y1_get
    if _newclass:
        x1y1 = _swig_property(_cphd.ScopedCopyableAreaType_x1y1_get, _cphd.ScopedCopyableAreaType_x1y1_set)
    __swig_setmethods__["x2y2"] = _cphd.ScopedCopyableAreaType_x2y2_set
    __swig_getmethods__["x2y2"] = _cphd.ScopedCopyableAreaType_x2y2_get
    if _newclass:
        x2y2 = _swig_property(_cphd.ScopedCopyableAreaType_x2y2_get, _cphd.ScopedCopyableAreaType_x2y2_set)
    __swig_setmethods__["polygon"] = _cphd.ScopedCopyableAreaType_polygon_set
    __swig_getmethods__["polygon"] = _cphd.ScopedCopyableAreaType_polygon_get
    if _newclass:
        polygon = _swig_property(_cphd.ScopedCopyableAreaType_polygon_get, _cphd.ScopedCopyableAreaType_polygon_set)
ScopedCopyableAreaType_swigregister = _cphd.ScopedCopyableAreaType_swigregister
ScopedCopyableAreaType_swigregister(ScopedCopyableAreaType)


def makeScopedCopyableAreaType() -> "mem::ScopedCopyablePtr< cphd::AreaType >":
    """makeScopedCopyableAreaType() -> ScopedCopyableAreaType"""
    return _cphd.makeScopedCopyableAreaType()
class StdAutoImageGrid(_object):
    """Proxy of C++ std::auto_ptr<(cphd::ImageGrid)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoImageGrid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoImageGrid, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(cphd::ImageGrid)> self) -> StdAutoImageGrid"""
        this = _cphd.new_StdAutoImageGrid()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cphd.delete_StdAutoImageGrid
    __del__ = lambda self: None
StdAutoImageGrid_swigregister = _cphd.StdAutoImageGrid_swigregister
StdAutoImageGrid_swigregister(StdAutoImageGrid)

class ScopedCopyableImageGrid(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(cphd::ImageGrid)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableImageGrid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableImageGrid, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(cphd::ImageGrid)> self, ImageGrid ptr=None) -> ScopedCopyableImageGrid
        __init__(mem::ScopedCopyablePtr<(cphd::ImageGrid)> self) -> ScopedCopyableImageGrid
        __init__(mem::ScopedCopyablePtr<(cphd::ImageGrid)> self, ScopedCopyableImageGrid rhs) -> ScopedCopyableImageGrid
        """
        this = _cphd.new_ScopedCopyableImageGrid(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __nonzero__(self):
        return _cphd.ScopedCopyableImageGrid___nonzero__(self)
    __bool__ = __nonzero__



    def get(self) -> "cphd::ImageGrid *":
        """get(ScopedCopyableImageGrid self) -> ImageGrid"""
        return _cphd.ScopedCopyableImageGrid_get(self)


    def __ref__(self) -> "cphd::ImageGrid &":
        """__ref__(ScopedCopyableImageGrid self) -> ImageGrid"""
        return _cphd.ScopedCopyableImageGrid___ref__(self)


    def __deref__(self) -> "cphd::ImageGrid *":
        """__deref__(ScopedCopyableImageGrid self) -> ImageGrid"""
        return _cphd.ScopedCopyableImageGrid___deref__(self)


    def reset(self, ptr: 'ImageGrid'=None) -> "void":
        """
        reset(ScopedCopyableImageGrid self, ImageGrid ptr=None)
        reset(ScopedCopyableImageGrid self)
        """
        return _cphd.ScopedCopyableImageGrid_reset(self, ptr)

    __swig_destroy__ = _cphd.delete_ScopedCopyableImageGrid
    __del__ = lambda self: None

    def __eq__(self, other: 'ImageGrid') -> "bool":
        """__eq__(ScopedCopyableImageGrid self, ImageGrid other) -> bool"""
        return _cphd.ScopedCopyableImageGrid___eq__(self, other)


    def __ne__(self, other: 'ImageGrid') -> "bool":
        """__ne__(ScopedCopyableImageGrid self, ImageGrid other) -> bool"""
        return _cphd.ScopedCopyableImageGrid___ne__(self, other)

    __swig_setmethods__["identifier"] = _cphd.ScopedCopyableImageGrid_identifier_set
    __swig_getmethods__["identifier"] = _cphd.ScopedCopyableImageGrid_identifier_get
    if _newclass:
        identifier = _swig_property(_cphd.ScopedCopyableImageGrid_identifier_get, _cphd.ScopedCopyableImageGrid_identifier_set)
    __swig_setmethods__["iarpLocation"] = _cphd.ScopedCopyableImageGrid_iarpLocation_set
    __swig_getmethods__["iarpLocation"] = _cphd.ScopedCopyableImageGrid_iarpLocation_get
    if _newclass:
        iarpLocation = _swig_property(_cphd.ScopedCopyableImageGrid_iarpLocation_get, _cphd.ScopedCopyableImageGrid_iarpLocation_set)
    __swig_setmethods__["xExtent"] = _cphd.ScopedCopyableImageGrid_xExtent_set
    __swig_getmethods__["xExtent"] = _cphd.ScopedCopyableImageGrid_xExtent_get
    if _newclass:
        xExtent = _swig_property(_cphd.ScopedCopyableImageGrid_xExtent_get, _cphd.ScopedCopyableImageGrid_xExtent_set)
    __swig_setmethods__["yExtent"] = _cphd.ScopedCopyableImageGrid_yExtent_set
    __swig_getmethods__["yExtent"] = _cphd.ScopedCopyableImageGrid_yExtent_get
    if _newclass:
        yExtent = _swig_property(_cphd.ScopedCopyableImageGrid_yExtent_get, _cphd.ScopedCopyableImageGrid_yExtent_set)
    __swig_setmethods__["segments"] = _cphd.ScopedCopyableImageGrid_segments_set
    __swig_getmethods__["segments"] = _cphd.ScopedCopyableImageGrid_segments_get
    if _newclass:
        segments = _swig_property(_cphd.ScopedCopyableImageGrid_segments_get, _cphd.ScopedCopyableImageGrid_segments_set)
ScopedCopyableImageGrid_swigregister = _cphd.ScopedCopyableImageGrid_swigregister
ScopedCopyableImageGrid_swigregister(ScopedCopyableImageGrid)


def makeScopedCopyableImageGrid() -> "mem::ScopedCopyablePtr< cphd::ImageGrid >":
    """makeScopedCopyableImageGrid() -> ScopedCopyableImageGrid"""
    return _cphd.makeScopedCopyableImageGrid()
class StdAutoTxRcv(_object):
    """Proxy of C++ std::auto_ptr<(cphd::TxRcv)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoTxRcv, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoTxRcv, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(cphd::TxRcv)> self) -> StdAutoTxRcv"""
        this = _cphd.new_StdAutoTxRcv()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cphd.delete_StdAutoTxRcv
    __del__ = lambda self: None
StdAutoTxRcv_swigregister = _cphd.StdAutoTxRcv_swigregister
StdAutoTxRcv_swigregister(StdAutoTxRcv)

class ScopedCopyableTxRcv(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(cphd::TxRcv)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableTxRcv, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableTxRcv, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(cphd::TxRcv)> self, TxRcv ptr=None) -> ScopedCopyableTxRcv
        __init__(mem::ScopedCopyablePtr<(cphd::TxRcv)> self) -> ScopedCopyableTxRcv
        __init__(mem::ScopedCopyablePtr<(cphd::TxRcv)> self, ScopedCopyableTxRcv rhs) -> ScopedCopyableTxRcv
        """
        this = _cphd.new_ScopedCopyableTxRcv(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __nonzero__(self):
        return _cphd.ScopedCopyableTxRcv___nonzero__(self)
    __bool__ = __nonzero__



    def get(self) -> "cphd::TxRcv *":
        """get(ScopedCopyableTxRcv self) -> TxRcv"""
        return _cphd.ScopedCopyableTxRcv_get(self)


    def __ref__(self) -> "cphd::TxRcv &":
        """__ref__(ScopedCopyableTxRcv self) -> TxRcv"""
        return _cphd.ScopedCopyableTxRcv___ref__(self)


    def __deref__(self) -> "cphd::TxRcv *":
        """__deref__(ScopedCopyableTxRcv self) -> TxRcv"""
        return _cphd.ScopedCopyableTxRcv___deref__(self)


    def reset(self, ptr: 'TxRcv'=None) -> "void":
        """
        reset(ScopedCopyableTxRcv self, TxRcv ptr=None)
        reset(ScopedCopyableTxRcv self)
        """
        return _cphd.ScopedCopyableTxRcv_reset(self, ptr)

    __swig_destroy__ = _cphd.delete_ScopedCopyableTxRcv
    __del__ = lambda self: None

    def __eq__(self, other: 'TxRcv') -> "bool":
        """__eq__(ScopedCopyableTxRcv self, TxRcv other) -> bool"""
        return _cphd.ScopedCopyableTxRcv___eq__(self, other)


    def __ne__(self, other: 'TxRcv') -> "bool":
        """__ne__(ScopedCopyableTxRcv self, TxRcv other) -> bool"""
        return _cphd.ScopedCopyableTxRcv___ne__(self, other)

    __swig_setmethods__["txWFParameters"] = _cphd.ScopedCopyableTxRcv_txWFParameters_set
    __swig_getmethods__["txWFParameters"] = _cphd.ScopedCopyableTxRcv_txWFParameters_get
    if _newclass:
        txWFParameters = _swig_property(_cphd.ScopedCopyableTxRcv_txWFParameters_get, _cphd.ScopedCopyableTxRcv_txWFParameters_set)
    __swig_setmethods__["rcvParameters"] = _cphd.ScopedCopyableTxRcv_rcvParameters_set
    __swig_getmethods__["rcvParameters"] = _cphd.ScopedCopyableTxRcv_rcvParameters_get
    if _newclass:
        rcvParameters = _swig_property(_cphd.ScopedCopyableTxRcv_rcvParameters_get, _cphd.ScopedCopyableTxRcv_rcvParameters_set)
ScopedCopyableTxRcv_swigregister = _cphd.ScopedCopyableTxRcv_swigregister
ScopedCopyableTxRcv_swigregister(ScopedCopyableTxRcv)


def makeScopedCopyableTxRcv() -> "mem::ScopedCopyablePtr< cphd::TxRcv >":
    """makeScopedCopyableTxRcv() -> ScopedCopyableTxRcv"""
    return _cphd.makeScopedCopyableTxRcv()
class StdAutoTOAExtended(_object):
    """Proxy of C++ std::auto_ptr<(cphd::TOAExtended)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoTOAExtended, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoTOAExtended, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(cphd::TOAExtended)> self) -> StdAutoTOAExtended"""
        this = _cphd.new_StdAutoTOAExtended()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cphd.delete_StdAutoTOAExtended
    __del__ = lambda self: None
StdAutoTOAExtended_swigregister = _cphd.StdAutoTOAExtended_swigregister
StdAutoTOAExtended_swigregister(StdAutoTOAExtended)

class ScopedCopyableTOAExtended(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(cphd::TOAExtended)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableTOAExtended, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableTOAExtended, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(cphd::TOAExtended)> self, TOAExtended ptr=None) -> ScopedCopyableTOAExtended
        __init__(mem::ScopedCopyablePtr<(cphd::TOAExtended)> self) -> ScopedCopyableTOAExtended
        __init__(mem::ScopedCopyablePtr<(cphd::TOAExtended)> self, ScopedCopyableTOAExtended rhs) -> ScopedCopyableTOAExtended
        """
        this = _cphd.new_ScopedCopyableTOAExtended(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __nonzero__(self):
        return _cphd.ScopedCopyableTOAExtended___nonzero__(self)
    __bool__ = __nonzero__



    def get(self) -> "cphd::TOAExtended *":
        """get(ScopedCopyableTOAExtended self) -> TOAExtended"""
        return _cphd.ScopedCopyableTOAExtended_get(self)


    def __ref__(self) -> "cphd::TOAExtended &":
        """__ref__(ScopedCopyableTOAExtended self) -> TOAExtended"""
        return _cphd.ScopedCopyableTOAExtended___ref__(self)


    def __deref__(self) -> "cphd::TOAExtended *":
        """__deref__(ScopedCopyableTOAExtended self) -> TOAExtended"""
        return _cphd.ScopedCopyableTOAExtended___deref__(self)


    def reset(self, ptr: 'TOAExtended'=None) -> "void":
        """
        reset(ScopedCopyableTOAExtended self, TOAExtended ptr=None)
        reset(ScopedCopyableTOAExtended self)
        """
        return _cphd.ScopedCopyableTOAExtended_reset(self, ptr)

    __swig_destroy__ = _cphd.delete_ScopedCopyableTOAExtended
    __del__ = lambda self: None

    def __eq__(self, other: 'TOAExtended') -> "bool":
        """__eq__(ScopedCopyableTOAExtended self, TOAExtended other) -> bool"""
        return _cphd.ScopedCopyableTOAExtended___eq__(self, other)


    def __ne__(self, other: 'TOAExtended') -> "bool":
        """__ne__(ScopedCopyableTOAExtended self, TOAExtended other) -> bool"""
        return _cphd.ScopedCopyableTOAExtended___ne__(self, other)

    __swig_setmethods__["toaExtSaved"] = _cphd.ScopedCopyableTOAExtended_toaExtSaved_set
    __swig_getmethods__["toaExtSaved"] = _cphd.ScopedCopyableTOAExtended_toaExtSaved_get
    if _newclass:
        toaExtSaved = _swig_property(_cphd.ScopedCopyableTOAExtended_toaExtSaved_get, _cphd.ScopedCopyableTOAExtended_toaExtSaved_set)
    __swig_setmethods__["lfmEclipse"] = _cphd.ScopedCopyableTOAExtended_lfmEclipse_set
    __swig_getmethods__["lfmEclipse"] = _cphd.ScopedCopyableTOAExtended_lfmEclipse_get
    if _newclass:
        lfmEclipse = _swig_property(_cphd.ScopedCopyableTOAExtended_lfmEclipse_get, _cphd.ScopedCopyableTOAExtended_lfmEclipse_set)
ScopedCopyableTOAExtended_swigregister = _cphd.ScopedCopyableTOAExtended_swigregister
ScopedCopyableTOAExtended_swigregister(ScopedCopyableTOAExtended)


def makeScopedCopyableTOAExtended() -> "mem::ScopedCopyablePtr< cphd::TOAExtended >":
    """makeScopedCopyableTOAExtended() -> ScopedCopyableTOAExtended"""
    return _cphd.makeScopedCopyableTOAExtended()
class StdAutoTOALFMEclipse(_object):
    """Proxy of C++ std::auto_ptr<(cphd::TOAExtended::LFMEclipse)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoTOALFMEclipse, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoTOALFMEclipse, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(cphd::TOAExtended::LFMEclipse)> self) -> StdAutoTOALFMEclipse"""
        this = _cphd.new_StdAutoTOALFMEclipse()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cphd.delete_StdAutoTOALFMEclipse
    __del__ = lambda self: None
StdAutoTOALFMEclipse_swigregister = _cphd.StdAutoTOALFMEclipse_swigregister
StdAutoTOALFMEclipse_swigregister(StdAutoTOALFMEclipse)

class ScopedCopyableTOALFMEclipse(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(cphd::TOAExtended::LFMEclipse)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableTOALFMEclipse, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableTOALFMEclipse, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(cphd::TOAExtended::LFMEclipse)> self, TOALFMEclipse ptr=None) -> ScopedCopyableTOALFMEclipse
        __init__(mem::ScopedCopyablePtr<(cphd::TOAExtended::LFMEclipse)> self) -> ScopedCopyableTOALFMEclipse
        __init__(mem::ScopedCopyablePtr<(cphd::TOAExtended::LFMEclipse)> self, ScopedCopyableTOALFMEclipse rhs) -> ScopedCopyableTOALFMEclipse
        """
        this = _cphd.new_ScopedCopyableTOALFMEclipse(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __nonzero__(self):
        return _cphd.ScopedCopyableTOALFMEclipse___nonzero__(self)
    __bool__ = __nonzero__



    def get(self) -> "cphd::TOAExtended::LFMEclipse *":
        """get(ScopedCopyableTOALFMEclipse self) -> TOALFMEclipse"""
        return _cphd.ScopedCopyableTOALFMEclipse_get(self)


    def __ref__(self) -> "cphd::TOAExtended::LFMEclipse &":
        """__ref__(ScopedCopyableTOALFMEclipse self) -> TOALFMEclipse"""
        return _cphd.ScopedCopyableTOALFMEclipse___ref__(self)


    def __deref__(self) -> "cphd::TOAExtended::LFMEclipse *":
        """__deref__(ScopedCopyableTOALFMEclipse self) -> TOALFMEclipse"""
        return _cphd.ScopedCopyableTOALFMEclipse___deref__(self)


    def reset(self, ptr: 'TOALFMEclipse'=None) -> "void":
        """
        reset(ScopedCopyableTOALFMEclipse self, TOALFMEclipse ptr=None)
        reset(ScopedCopyableTOALFMEclipse self)
        """
        return _cphd.ScopedCopyableTOALFMEclipse_reset(self, ptr)

    __swig_destroy__ = _cphd.delete_ScopedCopyableTOALFMEclipse
    __del__ = lambda self: None

    def __eq__(self, other: 'TOALFMEclipse') -> "bool":
        """__eq__(ScopedCopyableTOALFMEclipse self, TOALFMEclipse other) -> bool"""
        return _cphd.ScopedCopyableTOALFMEclipse___eq__(self, other)


    def __ne__(self, other: 'TOALFMEclipse') -> "bool":
        """__ne__(ScopedCopyableTOALFMEclipse self, TOALFMEclipse other) -> bool"""
        return _cphd.ScopedCopyableTOALFMEclipse___ne__(self, other)

    __swig_setmethods__["fxEarlyLow"] = _cphd.ScopedCopyableTOALFMEclipse_fxEarlyLow_set
    __swig_getmethods__["fxEarlyLow"] = _cphd.ScopedCopyableTOALFMEclipse_fxEarlyLow_get
    if _newclass:
        fxEarlyLow = _swig_property(_cphd.ScopedCopyableTOALFMEclipse_fxEarlyLow_get, _cphd.ScopedCopyableTOALFMEclipse_fxEarlyLow_set)
    __swig_setmethods__["fxEarlyHigh"] = _cphd.ScopedCopyableTOALFMEclipse_fxEarlyHigh_set
    __swig_getmethods__["fxEarlyHigh"] = _cphd.ScopedCopyableTOALFMEclipse_fxEarlyHigh_get
    if _newclass:
        fxEarlyHigh = _swig_property(_cphd.ScopedCopyableTOALFMEclipse_fxEarlyHigh_get, _cphd.ScopedCopyableTOALFMEclipse_fxEarlyHigh_set)
    __swig_setmethods__["fxLateLow"] = _cphd.ScopedCopyableTOALFMEclipse_fxLateLow_set
    __swig_getmethods__["fxLateLow"] = _cphd.ScopedCopyableTOALFMEclipse_fxLateLow_get
    if _newclass:
        fxLateLow = _swig_property(_cphd.ScopedCopyableTOALFMEclipse_fxLateLow_get, _cphd.ScopedCopyableTOALFMEclipse_fxLateLow_set)
    __swig_setmethods__["fxLateHigh"] = _cphd.ScopedCopyableTOALFMEclipse_fxLateHigh_set
    __swig_getmethods__["fxLateHigh"] = _cphd.ScopedCopyableTOALFMEclipse_fxLateHigh_get
    if _newclass:
        fxLateHigh = _swig_property(_cphd.ScopedCopyableTOALFMEclipse_fxLateHigh_get, _cphd.ScopedCopyableTOALFMEclipse_fxLateHigh_set)
ScopedCopyableTOALFMEclipse_swigregister = _cphd.ScopedCopyableTOALFMEclipse_swigregister
ScopedCopyableTOALFMEclipse_swigregister(ScopedCopyableTOALFMEclipse)


def makeScopedCopyableTOALFMEclipse() -> "mem::ScopedCopyablePtr< cphd::TOAExtended::LFMEclipse >":
    """makeScopedCopyableTOALFMEclipse() -> ScopedCopyableTOALFMEclipse"""
    return _cphd.makeScopedCopyableTOALFMEclipse()
class StdAutoChannelAntenna(_object):
    """Proxy of C++ std::auto_ptr<(cphd::ChannelParameter::Antenna)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoChannelAntenna, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoChannelAntenna, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(cphd::ChannelParameter::Antenna)> self) -> StdAutoChannelAntenna"""
        this = _cphd.new_StdAutoChannelAntenna()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cphd.delete_StdAutoChannelAntenna
    __del__ = lambda self: None
StdAutoChannelAntenna_swigregister = _cphd.StdAutoChannelAntenna_swigregister
StdAutoChannelAntenna_swigregister(StdAutoChannelAntenna)

class ScopedCopyableChannelAntenna(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(cphd::ChannelParameter::Antenna)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableChannelAntenna, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableChannelAntenna, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(cphd::ChannelParameter::Antenna)> self, ChannelAntenna ptr=None) -> ScopedCopyableChannelAntenna
        __init__(mem::ScopedCopyablePtr<(cphd::ChannelParameter::Antenna)> self) -> ScopedCopyableChannelAntenna
        __init__(mem::ScopedCopyablePtr<(cphd::ChannelParameter::Antenna)> self, ScopedCopyableChannelAntenna rhs) -> ScopedCopyableChannelAntenna
        """
        this = _cphd.new_ScopedCopyableChannelAntenna(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __nonzero__(self):
        return _cphd.ScopedCopyableChannelAntenna___nonzero__(self)
    __bool__ = __nonzero__



    def get(self) -> "cphd::ChannelParameter::Antenna *":
        """get(ScopedCopyableChannelAntenna self) -> ChannelAntenna"""
        return _cphd.ScopedCopyableChannelAntenna_get(self)


    def __ref__(self) -> "cphd::ChannelParameter::Antenna &":
        """__ref__(ScopedCopyableChannelAntenna self) -> ChannelAntenna"""
        return _cphd.ScopedCopyableChannelAntenna___ref__(self)


    def __deref__(self) -> "cphd::ChannelParameter::Antenna *":
        """__deref__(ScopedCopyableChannelAntenna self) -> ChannelAntenna"""
        return _cphd.ScopedCopyableChannelAntenna___deref__(self)


    def reset(self, ptr: 'ChannelAntenna'=None) -> "void":
        """
        reset(ScopedCopyableChannelAntenna self, ChannelAntenna ptr=None)
        reset(ScopedCopyableChannelAntenna self)
        """
        return _cphd.ScopedCopyableChannelAntenna_reset(self, ptr)

    __swig_destroy__ = _cphd.delete_ScopedCopyableChannelAntenna
    __del__ = lambda self: None

    def __eq__(self, other: 'ChannelAntenna') -> "bool":
        """__eq__(ScopedCopyableChannelAntenna self, ChannelAntenna other) -> bool"""
        return _cphd.ScopedCopyableChannelAntenna___eq__(self, other)


    def __ne__(self, other: 'ChannelAntenna') -> "bool":
        """__ne__(ScopedCopyableChannelAntenna self, ChannelAntenna other) -> bool"""
        return _cphd.ScopedCopyableChannelAntenna___ne__(self, other)

    __swig_setmethods__["txAPCId"] = _cphd.ScopedCopyableChannelAntenna_txAPCId_set
    __swig_getmethods__["txAPCId"] = _cphd.ScopedCopyableChannelAntenna_txAPCId_get
    if _newclass:
        txAPCId = _swig_property(_cphd.ScopedCopyableChannelAntenna_txAPCId_get, _cphd.ScopedCopyableChannelAntenna_txAPCId_set)
    __swig_setmethods__["txAPATId"] = _cphd.ScopedCopyableChannelAntenna_txAPATId_set
    __swig_getmethods__["txAPATId"] = _cphd.ScopedCopyableChannelAntenna_txAPATId_get
    if _newclass:
        txAPATId = _swig_property(_cphd.ScopedCopyableChannelAntenna_txAPATId_get, _cphd.ScopedCopyableChannelAntenna_txAPATId_set)
    __swig_setmethods__["rcvAPCId"] = _cphd.ScopedCopyableChannelAntenna_rcvAPCId_set
    __swig_getmethods__["rcvAPCId"] = _cphd.ScopedCopyableChannelAntenna_rcvAPCId_get
    if _newclass:
        rcvAPCId = _swig_property(_cphd.ScopedCopyableChannelAntenna_rcvAPCId_get, _cphd.ScopedCopyableChannelAntenna_rcvAPCId_set)
    __swig_setmethods__["rcvAPATId"] = _cphd.ScopedCopyableChannelAntenna_rcvAPATId_set
    __swig_getmethods__["rcvAPATId"] = _cphd.ScopedCopyableChannelAntenna_rcvAPATId_get
    if _newclass:
        rcvAPATId = _swig_property(_cphd.ScopedCopyableChannelAntenna_rcvAPATId_get, _cphd.ScopedCopyableChannelAntenna_rcvAPATId_set)
ScopedCopyableChannelAntenna_swigregister = _cphd.ScopedCopyableChannelAntenna_swigregister
ScopedCopyableChannelAntenna_swigregister(ScopedCopyableChannelAntenna)


def makeScopedCopyableChannelAntenna() -> "mem::ScopedCopyablePtr< cphd::ChannelParameter::Antenna >":
    """makeScopedCopyableChannelAntenna() -> ScopedCopyableChannelAntenna"""
    return _cphd.makeScopedCopyableChannelAntenna()
class StdAutoChannelTxRcv(_object):
    """Proxy of C++ std::auto_ptr<(cphd::ChannelParameter::TxRcv)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoChannelTxRcv, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoChannelTxRcv, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(cphd::ChannelParameter::TxRcv)> self) -> StdAutoChannelTxRcv"""
        this = _cphd.new_StdAutoChannelTxRcv()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cphd.delete_StdAutoChannelTxRcv
    __del__ = lambda self: None
StdAutoChannelTxRcv_swigregister = _cphd.StdAutoChannelTxRcv_swigregister
StdAutoChannelTxRcv_swigregister(StdAutoChannelTxRcv)

class ScopedCopyableChannelTxRcv(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(cphd::ChannelParameter::TxRcv)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableChannelTxRcv, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableChannelTxRcv, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(cphd::ChannelParameter::TxRcv)> self, ChannelTxRcv ptr=None) -> ScopedCopyableChannelTxRcv
        __init__(mem::ScopedCopyablePtr<(cphd::ChannelParameter::TxRcv)> self) -> ScopedCopyableChannelTxRcv
        __init__(mem::ScopedCopyablePtr<(cphd::ChannelParameter::TxRcv)> self, ScopedCopyableChannelTxRcv rhs) -> ScopedCopyableChannelTxRcv
        """
        this = _cphd.new_ScopedCopyableChannelTxRcv(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __nonzero__(self):
        return _cphd.ScopedCopyableChannelTxRcv___nonzero__(self)
    __bool__ = __nonzero__



    def get(self) -> "cphd::ChannelParameter::TxRcv *":
        """get(ScopedCopyableChannelTxRcv self) -> ChannelTxRcv"""
        return _cphd.ScopedCopyableChannelTxRcv_get(self)


    def __ref__(self) -> "cphd::ChannelParameter::TxRcv &":
        """__ref__(ScopedCopyableChannelTxRcv self) -> ChannelTxRcv"""
        return _cphd.ScopedCopyableChannelTxRcv___ref__(self)


    def __deref__(self) -> "cphd::ChannelParameter::TxRcv *":
        """__deref__(ScopedCopyableChannelTxRcv self) -> ChannelTxRcv"""
        return _cphd.ScopedCopyableChannelTxRcv___deref__(self)


    def reset(self, ptr: 'ChannelTxRcv'=None) -> "void":
        """
        reset(ScopedCopyableChannelTxRcv self, ChannelTxRcv ptr=None)
        reset(ScopedCopyableChannelTxRcv self)
        """
        return _cphd.ScopedCopyableChannelTxRcv_reset(self, ptr)

    __swig_destroy__ = _cphd.delete_ScopedCopyableChannelTxRcv
    __del__ = lambda self: None

    def __eq__(self, other: 'ChannelTxRcv') -> "bool":
        """__eq__(ScopedCopyableChannelTxRcv self, ChannelTxRcv other) -> bool"""
        return _cphd.ScopedCopyableChannelTxRcv___eq__(self, other)


    def __ne__(self, other: 'ChannelTxRcv') -> "bool":
        """__ne__(ScopedCopyableChannelTxRcv self, ChannelTxRcv other) -> bool"""
        return _cphd.ScopedCopyableChannelTxRcv___ne__(self, other)

    __swig_setmethods__["txWFId"] = _cphd.ScopedCopyableChannelTxRcv_txWFId_set
    __swig_getmethods__["txWFId"] = _cphd.ScopedCopyableChannelTxRcv_txWFId_get
    if _newclass:
        txWFId = _swig_property(_cphd.ScopedCopyableChannelTxRcv_txWFId_get, _cphd.ScopedCopyableChannelTxRcv_txWFId_set)
    __swig_setmethods__["rcvId"] = _cphd.ScopedCopyableChannelTxRcv_rcvId_set
    __swig_getmethods__["rcvId"] = _cphd.ScopedCopyableChannelTxRcv_rcvId_get
    if _newclass:
        rcvId = _swig_property(_cphd.ScopedCopyableChannelTxRcv_rcvId_get, _cphd.ScopedCopyableChannelTxRcv_rcvId_set)
ScopedCopyableChannelTxRcv_swigregister = _cphd.ScopedCopyableChannelTxRcv_swigregister
ScopedCopyableChannelTxRcv_swigregister(ScopedCopyableChannelTxRcv)


def makeScopedCopyableChannelTxRcv() -> "mem::ScopedCopyablePtr< cphd::ChannelParameter::TxRcv >":
    """makeScopedCopyableChannelTxRcv() -> ScopedCopyableChannelTxRcv"""
    return _cphd.makeScopedCopyableChannelTxRcv()
class StdAutoTgtRefLevel(_object):
    """Proxy of C++ std::auto_ptr<(cphd::TgtRefLevel)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoTgtRefLevel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoTgtRefLevel, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(cphd::TgtRefLevel)> self) -> StdAutoTgtRefLevel"""
        this = _cphd.new_StdAutoTgtRefLevel()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cphd.delete_StdAutoTgtRefLevel
    __del__ = lambda self: None
StdAutoTgtRefLevel_swigregister = _cphd.StdAutoTgtRefLevel_swigregister
StdAutoTgtRefLevel_swigregister(StdAutoTgtRefLevel)

class ScopedCopyableTgtRefLevel(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(cphd::TgtRefLevel)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableTgtRefLevel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableTgtRefLevel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(cphd::TgtRefLevel)> self, TgtRefLevel ptr=None) -> ScopedCopyableTgtRefLevel
        __init__(mem::ScopedCopyablePtr<(cphd::TgtRefLevel)> self) -> ScopedCopyableTgtRefLevel
        __init__(mem::ScopedCopyablePtr<(cphd::TgtRefLevel)> self, ScopedCopyableTgtRefLevel rhs) -> ScopedCopyableTgtRefLevel
        """
        this = _cphd.new_ScopedCopyableTgtRefLevel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __nonzero__(self):
        return _cphd.ScopedCopyableTgtRefLevel___nonzero__(self)
    __bool__ = __nonzero__



    def get(self) -> "cphd::TgtRefLevel *":
        """get(ScopedCopyableTgtRefLevel self) -> TgtRefLevel"""
        return _cphd.ScopedCopyableTgtRefLevel_get(self)


    def __ref__(self) -> "cphd::TgtRefLevel &":
        """__ref__(ScopedCopyableTgtRefLevel self) -> TgtRefLevel"""
        return _cphd.ScopedCopyableTgtRefLevel___ref__(self)


    def __deref__(self) -> "cphd::TgtRefLevel *":
        """__deref__(ScopedCopyableTgtRefLevel self) -> TgtRefLevel"""
        return _cphd.ScopedCopyableTgtRefLevel___deref__(self)


    def reset(self, ptr: 'TgtRefLevel'=None) -> "void":
        """
        reset(ScopedCopyableTgtRefLevel self, TgtRefLevel ptr=None)
        reset(ScopedCopyableTgtRefLevel self)
        """
        return _cphd.ScopedCopyableTgtRefLevel_reset(self, ptr)

    __swig_destroy__ = _cphd.delete_ScopedCopyableTgtRefLevel
    __del__ = lambda self: None

    def __eq__(self, other: 'TgtRefLevel') -> "bool":
        """__eq__(ScopedCopyableTgtRefLevel self, TgtRefLevel other) -> bool"""
        return _cphd.ScopedCopyableTgtRefLevel___eq__(self, other)


    def __ne__(self, other: 'TgtRefLevel') -> "bool":
        """__ne__(ScopedCopyableTgtRefLevel self, TgtRefLevel other) -> bool"""
        return _cphd.ScopedCopyableTgtRefLevel___ne__(self, other)

    __swig_setmethods__["ptRef"] = _cphd.ScopedCopyableTgtRefLevel_ptRef_set
    __swig_getmethods__["ptRef"] = _cphd.ScopedCopyableTgtRefLevel_ptRef_get
    if _newclass:
        ptRef = _swig_property(_cphd.ScopedCopyableTgtRefLevel_ptRef_get, _cphd.ScopedCopyableTgtRefLevel_ptRef_set)
ScopedCopyableTgtRefLevel_swigregister = _cphd.ScopedCopyableTgtRefLevel_swigregister
ScopedCopyableTgtRefLevel_swigregister(ScopedCopyableTgtRefLevel)


def makeScopedCopyableTgtRefLevel() -> "mem::ScopedCopyablePtr< cphd::TgtRefLevel >":
    """makeScopedCopyableTgtRefLevel() -> ScopedCopyableTgtRefLevel"""
    return _cphd.makeScopedCopyableTgtRefLevel()
class StdAutoNoiseLevel(_object):
    """Proxy of C++ std::auto_ptr<(cphd::NoiseLevel)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoNoiseLevel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoNoiseLevel, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(cphd::NoiseLevel)> self) -> StdAutoNoiseLevel"""
        this = _cphd.new_StdAutoNoiseLevel()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cphd.delete_StdAutoNoiseLevel
    __del__ = lambda self: None
StdAutoNoiseLevel_swigregister = _cphd.StdAutoNoiseLevel_swigregister
StdAutoNoiseLevel_swigregister(StdAutoNoiseLevel)

class ScopedCopyableNoiseLevel(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(cphd::NoiseLevel)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableNoiseLevel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableNoiseLevel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(cphd::NoiseLevel)> self, NoiseLevel ptr=None) -> ScopedCopyableNoiseLevel
        __init__(mem::ScopedCopyablePtr<(cphd::NoiseLevel)> self) -> ScopedCopyableNoiseLevel
        __init__(mem::ScopedCopyablePtr<(cphd::NoiseLevel)> self, ScopedCopyableNoiseLevel rhs) -> ScopedCopyableNoiseLevel
        """
        this = _cphd.new_ScopedCopyableNoiseLevel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __nonzero__(self):
        return _cphd.ScopedCopyableNoiseLevel___nonzero__(self)
    __bool__ = __nonzero__



    def get(self) -> "cphd::NoiseLevel *":
        """get(ScopedCopyableNoiseLevel self) -> NoiseLevel"""
        return _cphd.ScopedCopyableNoiseLevel_get(self)


    def __ref__(self) -> "cphd::NoiseLevel &":
        """__ref__(ScopedCopyableNoiseLevel self) -> NoiseLevel"""
        return _cphd.ScopedCopyableNoiseLevel___ref__(self)


    def __deref__(self) -> "cphd::NoiseLevel *":
        """__deref__(ScopedCopyableNoiseLevel self) -> NoiseLevel"""
        return _cphd.ScopedCopyableNoiseLevel___deref__(self)


    def reset(self, ptr: 'NoiseLevel'=None) -> "void":
        """
        reset(ScopedCopyableNoiseLevel self, NoiseLevel ptr=None)
        reset(ScopedCopyableNoiseLevel self)
        """
        return _cphd.ScopedCopyableNoiseLevel_reset(self, ptr)

    __swig_destroy__ = _cphd.delete_ScopedCopyableNoiseLevel
    __del__ = lambda self: None

    def __eq__(self, other: 'NoiseLevel') -> "bool":
        """__eq__(ScopedCopyableNoiseLevel self, NoiseLevel other) -> bool"""
        return _cphd.ScopedCopyableNoiseLevel___eq__(self, other)


    def __ne__(self, other: 'NoiseLevel') -> "bool":
        """__ne__(ScopedCopyableNoiseLevel self, NoiseLevel other) -> bool"""
        return _cphd.ScopedCopyableNoiseLevel___ne__(self, other)

    __swig_setmethods__["pnRef"] = _cphd.ScopedCopyableNoiseLevel_pnRef_set
    __swig_getmethods__["pnRef"] = _cphd.ScopedCopyableNoiseLevel_pnRef_get
    if _newclass:
        pnRef = _swig_property(_cphd.ScopedCopyableNoiseLevel_pnRef_get, _cphd.ScopedCopyableNoiseLevel_pnRef_set)
    __swig_setmethods__["bnRef"] = _cphd.ScopedCopyableNoiseLevel_bnRef_set
    __swig_getmethods__["bnRef"] = _cphd.ScopedCopyableNoiseLevel_bnRef_get
    if _newclass:
        bnRef = _swig_property(_cphd.ScopedCopyableNoiseLevel_bnRef_get, _cphd.ScopedCopyableNoiseLevel_bnRef_set)
    __swig_setmethods__["fxNoiseProfile"] = _cphd.ScopedCopyableNoiseLevel_fxNoiseProfile_set
    __swig_getmethods__["fxNoiseProfile"] = _cphd.ScopedCopyableNoiseLevel_fxNoiseProfile_get
    if _newclass:
        fxNoiseProfile = _swig_property(_cphd.ScopedCopyableNoiseLevel_fxNoiseProfile_get, _cphd.ScopedCopyableNoiseLevel_fxNoiseProfile_set)
ScopedCopyableNoiseLevel_swigregister = _cphd.ScopedCopyableNoiseLevel_swigregister
ScopedCopyableNoiseLevel_swigregister(ScopedCopyableNoiseLevel)


def makeScopedCopyableNoiseLevel() -> "mem::ScopedCopyablePtr< cphd::NoiseLevel >":
    """makeScopedCopyableNoiseLevel() -> ScopedCopyableNoiseLevel"""
    return _cphd.makeScopedCopyableNoiseLevel()
class StdAutoFxNoiseProfile(_object):
    """Proxy of C++ std::auto_ptr<(cphd::FxNoiseProfile)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoFxNoiseProfile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoFxNoiseProfile, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(cphd::FxNoiseProfile)> self) -> StdAutoFxNoiseProfile"""
        this = _cphd.new_StdAutoFxNoiseProfile()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cphd.delete_StdAutoFxNoiseProfile
    __del__ = lambda self: None
StdAutoFxNoiseProfile_swigregister = _cphd.StdAutoFxNoiseProfile_swigregister
StdAutoFxNoiseProfile_swigregister(StdAutoFxNoiseProfile)

class ScopedCopyableFxNoiseProfile(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(cphd::FxNoiseProfile)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableFxNoiseProfile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableFxNoiseProfile, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(cphd::FxNoiseProfile)> self, FxNoiseProfile ptr=None) -> ScopedCopyableFxNoiseProfile
        __init__(mem::ScopedCopyablePtr<(cphd::FxNoiseProfile)> self) -> ScopedCopyableFxNoiseProfile
        __init__(mem::ScopedCopyablePtr<(cphd::FxNoiseProfile)> self, ScopedCopyableFxNoiseProfile rhs) -> ScopedCopyableFxNoiseProfile
        """
        this = _cphd.new_ScopedCopyableFxNoiseProfile(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __nonzero__(self):
        return _cphd.ScopedCopyableFxNoiseProfile___nonzero__(self)
    __bool__ = __nonzero__



    def get(self) -> "cphd::FxNoiseProfile *":
        """get(ScopedCopyableFxNoiseProfile self) -> FxNoiseProfile"""
        return _cphd.ScopedCopyableFxNoiseProfile_get(self)


    def __ref__(self) -> "cphd::FxNoiseProfile &":
        """__ref__(ScopedCopyableFxNoiseProfile self) -> FxNoiseProfile"""
        return _cphd.ScopedCopyableFxNoiseProfile___ref__(self)


    def __deref__(self) -> "cphd::FxNoiseProfile *":
        """__deref__(ScopedCopyableFxNoiseProfile self) -> FxNoiseProfile"""
        return _cphd.ScopedCopyableFxNoiseProfile___deref__(self)


    def reset(self, ptr: 'FxNoiseProfile'=None) -> "void":
        """
        reset(ScopedCopyableFxNoiseProfile self, FxNoiseProfile ptr=None)
        reset(ScopedCopyableFxNoiseProfile self)
        """
        return _cphd.ScopedCopyableFxNoiseProfile_reset(self, ptr)

    __swig_destroy__ = _cphd.delete_ScopedCopyableFxNoiseProfile
    __del__ = lambda self: None

    def __eq__(self, other: 'FxNoiseProfile') -> "bool":
        """__eq__(ScopedCopyableFxNoiseProfile self, FxNoiseProfile other) -> bool"""
        return _cphd.ScopedCopyableFxNoiseProfile___eq__(self, other)


    def __ne__(self, other: 'FxNoiseProfile') -> "bool":
        """__ne__(ScopedCopyableFxNoiseProfile self, FxNoiseProfile other) -> bool"""
        return _cphd.ScopedCopyableFxNoiseProfile___ne__(self, other)

    __swig_setmethods__["point"] = _cphd.ScopedCopyableFxNoiseProfile_point_set
    __swig_getmethods__["point"] = _cphd.ScopedCopyableFxNoiseProfile_point_get
    if _newclass:
        point = _swig_property(_cphd.ScopedCopyableFxNoiseProfile_point_get, _cphd.ScopedCopyableFxNoiseProfile_point_set)
ScopedCopyableFxNoiseProfile_swigregister = _cphd.ScopedCopyableFxNoiseProfile_swigregister
ScopedCopyableFxNoiseProfile_swigregister(ScopedCopyableFxNoiseProfile)


def makeScopedCopyableFxNoiseProfile() -> "mem::ScopedCopyablePtr< cphd::FxNoiseProfile >":
    """makeScopedCopyableFxNoiseProfile() -> ScopedCopyableFxNoiseProfile"""
    return _cphd.makeScopedCopyableFxNoiseProfile()
class StdAutoMonostatic(_object):
    """Proxy of C++ std::auto_ptr<(cphd::Monostatic)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoMonostatic, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoMonostatic, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(cphd::Monostatic)> self) -> StdAutoMonostatic"""
        this = _cphd.new_StdAutoMonostatic()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cphd.delete_StdAutoMonostatic
    __del__ = lambda self: None
StdAutoMonostatic_swigregister = _cphd.StdAutoMonostatic_swigregister
StdAutoMonostatic_swigregister(StdAutoMonostatic)

class ScopedCopyableMonostatic(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(cphd::Monostatic)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableMonostatic, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableMonostatic, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(cphd::Monostatic)> self, Monostatic ptr=None) -> ScopedCopyableMonostatic
        __init__(mem::ScopedCopyablePtr<(cphd::Monostatic)> self) -> ScopedCopyableMonostatic
        __init__(mem::ScopedCopyablePtr<(cphd::Monostatic)> self, ScopedCopyableMonostatic rhs) -> ScopedCopyableMonostatic
        """
        this = _cphd.new_ScopedCopyableMonostatic(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __nonzero__(self):
        return _cphd.ScopedCopyableMonostatic___nonzero__(self)
    __bool__ = __nonzero__



    def get(self) -> "cphd::Monostatic *":
        """get(ScopedCopyableMonostatic self) -> Monostatic"""
        return _cphd.ScopedCopyableMonostatic_get(self)


    def __ref__(self) -> "cphd::Monostatic &":
        """__ref__(ScopedCopyableMonostatic self) -> Monostatic"""
        return _cphd.ScopedCopyableMonostatic___ref__(self)


    def __deref__(self) -> "cphd::Monostatic *":
        """__deref__(ScopedCopyableMonostatic self) -> Monostatic"""
        return _cphd.ScopedCopyableMonostatic___deref__(self)


    def reset(self, ptr: 'Monostatic'=None) -> "void":
        """
        reset(ScopedCopyableMonostatic self, Monostatic ptr=None)
        reset(ScopedCopyableMonostatic self)
        """
        return _cphd.ScopedCopyableMonostatic_reset(self, ptr)

    __swig_destroy__ = _cphd.delete_ScopedCopyableMonostatic
    __del__ = lambda self: None

    def __eq__(self, other: 'Monostatic') -> "bool":
        """__eq__(ScopedCopyableMonostatic self, Monostatic other) -> bool"""
        return _cphd.ScopedCopyableMonostatic___eq__(self, other)


    def __ne__(self, other: 'Monostatic') -> "bool":
        """__ne__(ScopedCopyableMonostatic self, Monostatic other) -> bool"""
        return _cphd.ScopedCopyableMonostatic___ne__(self, other)

    __swig_setmethods__["sideOfTrack"] = _cphd.ScopedCopyableMonostatic_sideOfTrack_set
    __swig_getmethods__["sideOfTrack"] = _cphd.ScopedCopyableMonostatic_sideOfTrack_get
    if _newclass:
        sideOfTrack = _swig_property(_cphd.ScopedCopyableMonostatic_sideOfTrack_get, _cphd.ScopedCopyableMonostatic_sideOfTrack_set)
    __swig_setmethods__["slantRange"] = _cphd.ScopedCopyableMonostatic_slantRange_set
    __swig_getmethods__["slantRange"] = _cphd.ScopedCopyableMonostatic_slantRange_get
    if _newclass:
        slantRange = _swig_property(_cphd.ScopedCopyableMonostatic_slantRange_get, _cphd.ScopedCopyableMonostatic_slantRange_set)
    __swig_setmethods__["groundRange"] = _cphd.ScopedCopyableMonostatic_groundRange_set
    __swig_getmethods__["groundRange"] = _cphd.ScopedCopyableMonostatic_groundRange_get
    if _newclass:
        groundRange = _swig_property(_cphd.ScopedCopyableMonostatic_groundRange_get, _cphd.ScopedCopyableMonostatic_groundRange_set)
    __swig_setmethods__["dopplerConeAngle"] = _cphd.ScopedCopyableMonostatic_dopplerConeAngle_set
    __swig_getmethods__["dopplerConeAngle"] = _cphd.ScopedCopyableMonostatic_dopplerConeAngle_get
    if _newclass:
        dopplerConeAngle = _swig_property(_cphd.ScopedCopyableMonostatic_dopplerConeAngle_get, _cphd.ScopedCopyableMonostatic_dopplerConeAngle_set)
    __swig_setmethods__["incidenceAngle"] = _cphd.ScopedCopyableMonostatic_incidenceAngle_set
    __swig_getmethods__["incidenceAngle"] = _cphd.ScopedCopyableMonostatic_incidenceAngle_get
    if _newclass:
        incidenceAngle = _swig_property(_cphd.ScopedCopyableMonostatic_incidenceAngle_get, _cphd.ScopedCopyableMonostatic_incidenceAngle_set)
    __swig_setmethods__["arpPos"] = _cphd.ScopedCopyableMonostatic_arpPos_set
    __swig_getmethods__["arpPos"] = _cphd.ScopedCopyableMonostatic_arpPos_get
    if _newclass:
        arpPos = _swig_property(_cphd.ScopedCopyableMonostatic_arpPos_get, _cphd.ScopedCopyableMonostatic_arpPos_set)
    __swig_setmethods__["arpVel"] = _cphd.ScopedCopyableMonostatic_arpVel_set
    __swig_getmethods__["arpVel"] = _cphd.ScopedCopyableMonostatic_arpVel_get
    if _newclass:
        arpVel = _swig_property(_cphd.ScopedCopyableMonostatic_arpVel_get, _cphd.ScopedCopyableMonostatic_arpVel_set)
    __swig_setmethods__["azimuthAngle"] = _cphd.ScopedCopyableMonostatic_azimuthAngle_set
    __swig_getmethods__["azimuthAngle"] = _cphd.ScopedCopyableMonostatic_azimuthAngle_get
    if _newclass:
        azimuthAngle = _swig_property(_cphd.ScopedCopyableMonostatic_azimuthAngle_get, _cphd.ScopedCopyableMonostatic_azimuthAngle_set)
    __swig_setmethods__["grazeAngle"] = _cphd.ScopedCopyableMonostatic_grazeAngle_set
    __swig_getmethods__["grazeAngle"] = _cphd.ScopedCopyableMonostatic_grazeAngle_get
    if _newclass:
        grazeAngle = _swig_property(_cphd.ScopedCopyableMonostatic_grazeAngle_get, _cphd.ScopedCopyableMonostatic_grazeAngle_set)
    __swig_setmethods__["twistAngle"] = _cphd.ScopedCopyableMonostatic_twistAngle_set
    __swig_getmethods__["twistAngle"] = _cphd.ScopedCopyableMonostatic_twistAngle_get
    if _newclass:
        twistAngle = _swig_property(_cphd.ScopedCopyableMonostatic_twistAngle_get, _cphd.ScopedCopyableMonostatic_twistAngle_set)
    __swig_setmethods__["slopeAngle"] = _cphd.ScopedCopyableMonostatic_slopeAngle_set
    __swig_getmethods__["slopeAngle"] = _cphd.ScopedCopyableMonostatic_slopeAngle_get
    if _newclass:
        slopeAngle = _swig_property(_cphd.ScopedCopyableMonostatic_slopeAngle_get, _cphd.ScopedCopyableMonostatic_slopeAngle_set)
    __swig_setmethods__["layoverAngle"] = _cphd.ScopedCopyableMonostatic_layoverAngle_set
    __swig_getmethods__["layoverAngle"] = _cphd.ScopedCopyableMonostatic_layoverAngle_get
    if _newclass:
        layoverAngle = _swig_property(_cphd.ScopedCopyableMonostatic_layoverAngle_get, _cphd.ScopedCopyableMonostatic_layoverAngle_set)
ScopedCopyableMonostatic_swigregister = _cphd.ScopedCopyableMonostatic_swigregister
ScopedCopyableMonostatic_swigregister(ScopedCopyableMonostatic)


def makeScopedCopyableMonostatic() -> "mem::ScopedCopyablePtr< cphd::Monostatic >":
    """makeScopedCopyableMonostatic() -> ScopedCopyableMonostatic"""
    return _cphd.makeScopedCopyableMonostatic()
class StdAutoBistatic(_object):
    """Proxy of C++ std::auto_ptr<(cphd::Bistatic)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoBistatic, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoBistatic, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(cphd::Bistatic)> self) -> StdAutoBistatic"""
        this = _cphd.new_StdAutoBistatic()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cphd.delete_StdAutoBistatic
    __del__ = lambda self: None
StdAutoBistatic_swigregister = _cphd.StdAutoBistatic_swigregister
StdAutoBistatic_swigregister(StdAutoBistatic)

class ScopedCopyableBistatic(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(cphd::Bistatic)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableBistatic, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableBistatic, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(cphd::Bistatic)> self, Bistatic ptr=None) -> ScopedCopyableBistatic
        __init__(mem::ScopedCopyablePtr<(cphd::Bistatic)> self) -> ScopedCopyableBistatic
        __init__(mem::ScopedCopyablePtr<(cphd::Bistatic)> self, ScopedCopyableBistatic rhs) -> ScopedCopyableBistatic
        """
        this = _cphd.new_ScopedCopyableBistatic(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __nonzero__(self):
        return _cphd.ScopedCopyableBistatic___nonzero__(self)
    __bool__ = __nonzero__



    def get(self) -> "cphd::Bistatic *":
        """get(ScopedCopyableBistatic self) -> Bistatic"""
        return _cphd.ScopedCopyableBistatic_get(self)


    def __ref__(self) -> "cphd::Bistatic &":
        """__ref__(ScopedCopyableBistatic self) -> Bistatic"""
        return _cphd.ScopedCopyableBistatic___ref__(self)


    def __deref__(self) -> "cphd::Bistatic *":
        """__deref__(ScopedCopyableBistatic self) -> Bistatic"""
        return _cphd.ScopedCopyableBistatic___deref__(self)


    def reset(self, ptr: 'Bistatic'=None) -> "void":
        """
        reset(ScopedCopyableBistatic self, Bistatic ptr=None)
        reset(ScopedCopyableBistatic self)
        """
        return _cphd.ScopedCopyableBistatic_reset(self, ptr)

    __swig_destroy__ = _cphd.delete_ScopedCopyableBistatic
    __del__ = lambda self: None

    def __eq__(self, other: 'Bistatic') -> "bool":
        """__eq__(ScopedCopyableBistatic self, Bistatic other) -> bool"""
        return _cphd.ScopedCopyableBistatic___eq__(self, other)


    def __ne__(self, other: 'Bistatic') -> "bool":
        """__ne__(ScopedCopyableBistatic self, Bistatic other) -> bool"""
        return _cphd.ScopedCopyableBistatic___ne__(self, other)

    __swig_setmethods__["azimuthAngleRate"] = _cphd.ScopedCopyableBistatic_azimuthAngleRate_set
    __swig_getmethods__["azimuthAngleRate"] = _cphd.ScopedCopyableBistatic_azimuthAngleRate_get
    if _newclass:
        azimuthAngleRate = _swig_property(_cphd.ScopedCopyableBistatic_azimuthAngleRate_get, _cphd.ScopedCopyableBistatic_azimuthAngleRate_set)
    __swig_setmethods__["bistaticAngle"] = _cphd.ScopedCopyableBistatic_bistaticAngle_set
    __swig_getmethods__["bistaticAngle"] = _cphd.ScopedCopyableBistatic_bistaticAngle_get
    if _newclass:
        bistaticAngle = _swig_property(_cphd.ScopedCopyableBistatic_bistaticAngle_get, _cphd.ScopedCopyableBistatic_bistaticAngle_set)
    __swig_setmethods__["bistaticAngleRate"] = _cphd.ScopedCopyableBistatic_bistaticAngleRate_set
    __swig_getmethods__["bistaticAngleRate"] = _cphd.ScopedCopyableBistatic_bistaticAngleRate_get
    if _newclass:
        bistaticAngleRate = _swig_property(_cphd.ScopedCopyableBistatic_bistaticAngleRate_get, _cphd.ScopedCopyableBistatic_bistaticAngleRate_set)
    __swig_setmethods__["txPlatform"] = _cphd.ScopedCopyableBistatic_txPlatform_set
    __swig_getmethods__["txPlatform"] = _cphd.ScopedCopyableBistatic_txPlatform_get
    if _newclass:
        txPlatform = _swig_property(_cphd.ScopedCopyableBistatic_txPlatform_get, _cphd.ScopedCopyableBistatic_txPlatform_set)
    __swig_setmethods__["rcvPlatform"] = _cphd.ScopedCopyableBistatic_rcvPlatform_set
    __swig_getmethods__["rcvPlatform"] = _cphd.ScopedCopyableBistatic_rcvPlatform_get
    if _newclass:
        rcvPlatform = _swig_property(_cphd.ScopedCopyableBistatic_rcvPlatform_get, _cphd.ScopedCopyableBistatic_rcvPlatform_set)
    __swig_setmethods__["azimuthAngle"] = _cphd.ScopedCopyableBistatic_azimuthAngle_set
    __swig_getmethods__["azimuthAngle"] = _cphd.ScopedCopyableBistatic_azimuthAngle_get
    if _newclass:
        azimuthAngle = _swig_property(_cphd.ScopedCopyableBistatic_azimuthAngle_get, _cphd.ScopedCopyableBistatic_azimuthAngle_set)
    __swig_setmethods__["grazeAngle"] = _cphd.ScopedCopyableBistatic_grazeAngle_set
    __swig_getmethods__["grazeAngle"] = _cphd.ScopedCopyableBistatic_grazeAngle_get
    if _newclass:
        grazeAngle = _swig_property(_cphd.ScopedCopyableBistatic_grazeAngle_get, _cphd.ScopedCopyableBistatic_grazeAngle_set)
    __swig_setmethods__["twistAngle"] = _cphd.ScopedCopyableBistatic_twistAngle_set
    __swig_getmethods__["twistAngle"] = _cphd.ScopedCopyableBistatic_twistAngle_get
    if _newclass:
        twistAngle = _swig_property(_cphd.ScopedCopyableBistatic_twistAngle_get, _cphd.ScopedCopyableBistatic_twistAngle_set)
    __swig_setmethods__["slopeAngle"] = _cphd.ScopedCopyableBistatic_slopeAngle_set
    __swig_getmethods__["slopeAngle"] = _cphd.ScopedCopyableBistatic_slopeAngle_get
    if _newclass:
        slopeAngle = _swig_property(_cphd.ScopedCopyableBistatic_slopeAngle_get, _cphd.ScopedCopyableBistatic_slopeAngle_set)
    __swig_setmethods__["layoverAngle"] = _cphd.ScopedCopyableBistatic_layoverAngle_set
    __swig_getmethods__["layoverAngle"] = _cphd.ScopedCopyableBistatic_layoverAngle_get
    if _newclass:
        layoverAngle = _swig_property(_cphd.ScopedCopyableBistatic_layoverAngle_get, _cphd.ScopedCopyableBistatic_layoverAngle_set)
ScopedCopyableBistatic_swigregister = _cphd.ScopedCopyableBistatic_swigregister
ScopedCopyableBistatic_swigregister(ScopedCopyableBistatic)


def makeScopedCopyableBistatic() -> "mem::ScopedCopyablePtr< cphd::Bistatic >":
    """makeScopedCopyableBistatic() -> ScopedCopyableBistatic"""
    return _cphd.makeScopedCopyableBistatic()
class StdAutoErrorParameters(_object):
    """Proxy of C++ std::auto_ptr<(cphd::ErrorParameters)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoErrorParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoErrorParameters, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(cphd::ErrorParameters)> self) -> StdAutoErrorParameters"""
        this = _cphd.new_StdAutoErrorParameters()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cphd.delete_StdAutoErrorParameters
    __del__ = lambda self: None
StdAutoErrorParameters_swigregister = _cphd.StdAutoErrorParameters_swigregister
StdAutoErrorParameters_swigregister(StdAutoErrorParameters)

class ScopedCopyableErrorParameters(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(cphd::ErrorParameters)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableErrorParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableErrorParameters, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(cphd::ErrorParameters)> self, ErrorParameters ptr=None) -> ScopedCopyableErrorParameters
        __init__(mem::ScopedCopyablePtr<(cphd::ErrorParameters)> self) -> ScopedCopyableErrorParameters
        __init__(mem::ScopedCopyablePtr<(cphd::ErrorParameters)> self, ScopedCopyableErrorParameters rhs) -> ScopedCopyableErrorParameters
        """
        this = _cphd.new_ScopedCopyableErrorParameters(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __nonzero__(self):
        return _cphd.ScopedCopyableErrorParameters___nonzero__(self)
    __bool__ = __nonzero__



    def get(self) -> "cphd::ErrorParameters *":
        """get(ScopedCopyableErrorParameters self) -> ErrorParameters"""
        return _cphd.ScopedCopyableErrorParameters_get(self)


    def __ref__(self) -> "cphd::ErrorParameters &":
        """__ref__(ScopedCopyableErrorParameters self) -> ErrorParameters"""
        return _cphd.ScopedCopyableErrorParameters___ref__(self)


    def __deref__(self) -> "cphd::ErrorParameters *":
        """__deref__(ScopedCopyableErrorParameters self) -> ErrorParameters"""
        return _cphd.ScopedCopyableErrorParameters___deref__(self)


    def reset(self, ptr: 'ErrorParameters'=None) -> "void":
        """
        reset(ScopedCopyableErrorParameters self, ErrorParameters ptr=None)
        reset(ScopedCopyableErrorParameters self)
        """
        return _cphd.ScopedCopyableErrorParameters_reset(self, ptr)

    __swig_destroy__ = _cphd.delete_ScopedCopyableErrorParameters
    __del__ = lambda self: None

    def __eq__(self, other: 'ErrorParameters') -> "bool":
        """__eq__(ScopedCopyableErrorParameters self, ErrorParameters other) -> bool"""
        return _cphd.ScopedCopyableErrorParameters___eq__(self, other)


    def __ne__(self, other: 'ErrorParameters') -> "bool":
        """__ne__(ScopedCopyableErrorParameters self, ErrorParameters other) -> bool"""
        return _cphd.ScopedCopyableErrorParameters___ne__(self, other)

    __swig_setmethods__["monostatic"] = _cphd.ScopedCopyableErrorParameters_monostatic_set
    __swig_getmethods__["monostatic"] = _cphd.ScopedCopyableErrorParameters_monostatic_get
    if _newclass:
        monostatic = _swig_property(_cphd.ScopedCopyableErrorParameters_monostatic_get, _cphd.ScopedCopyableErrorParameters_monostatic_set)
    __swig_setmethods__["bistatic"] = _cphd.ScopedCopyableErrorParameters_bistatic_set
    __swig_getmethods__["bistatic"] = _cphd.ScopedCopyableErrorParameters_bistatic_get
    if _newclass:
        bistatic = _swig_property(_cphd.ScopedCopyableErrorParameters_bistatic_get, _cphd.ScopedCopyableErrorParameters_bistatic_set)
ScopedCopyableErrorParameters_swigregister = _cphd.ScopedCopyableErrorParameters_swigregister
ScopedCopyableErrorParameters_swigregister(ScopedCopyableErrorParameters)


def makeScopedCopyableErrorParameters() -> "mem::ScopedCopyablePtr< cphd::ErrorParameters >":
    """makeScopedCopyableErrorParameters() -> ScopedCopyableErrorParameters"""
    return _cphd.makeScopedCopyableErrorParameters()
class StdAutoErrorMonostatic(_object):
    """Proxy of C++ std::auto_ptr<(cphd::ErrorParameters::Monostatic)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoErrorMonostatic, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoErrorMonostatic, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(cphd::ErrorParameters::Monostatic)> self) -> StdAutoErrorMonostatic"""
        this = _cphd.new_StdAutoErrorMonostatic()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cphd.delete_StdAutoErrorMonostatic
    __del__ = lambda self: None
StdAutoErrorMonostatic_swigregister = _cphd.StdAutoErrorMonostatic_swigregister
StdAutoErrorMonostatic_swigregister(StdAutoErrorMonostatic)

class ScopedCopyableErrorMonostatic(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(cphd::ErrorParameters::Monostatic)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableErrorMonostatic, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableErrorMonostatic, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(cphd::ErrorParameters::Monostatic)> self, ErrorMonostatic ptr=None) -> ScopedCopyableErrorMonostatic
        __init__(mem::ScopedCopyablePtr<(cphd::ErrorParameters::Monostatic)> self) -> ScopedCopyableErrorMonostatic
        __init__(mem::ScopedCopyablePtr<(cphd::ErrorParameters::Monostatic)> self, ScopedCopyableErrorMonostatic rhs) -> ScopedCopyableErrorMonostatic
        """
        this = _cphd.new_ScopedCopyableErrorMonostatic(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __nonzero__(self):
        return _cphd.ScopedCopyableErrorMonostatic___nonzero__(self)
    __bool__ = __nonzero__



    def get(self) -> "cphd::ErrorParameters::Monostatic *":
        """get(ScopedCopyableErrorMonostatic self) -> ErrorMonostatic"""
        return _cphd.ScopedCopyableErrorMonostatic_get(self)


    def __ref__(self) -> "cphd::ErrorParameters::Monostatic &":
        """__ref__(ScopedCopyableErrorMonostatic self) -> ErrorMonostatic"""
        return _cphd.ScopedCopyableErrorMonostatic___ref__(self)


    def __deref__(self) -> "cphd::ErrorParameters::Monostatic *":
        """__deref__(ScopedCopyableErrorMonostatic self) -> ErrorMonostatic"""
        return _cphd.ScopedCopyableErrorMonostatic___deref__(self)


    def reset(self, ptr: 'ErrorMonostatic'=None) -> "void":
        """
        reset(ScopedCopyableErrorMonostatic self, ErrorMonostatic ptr=None)
        reset(ScopedCopyableErrorMonostatic self)
        """
        return _cphd.ScopedCopyableErrorMonostatic_reset(self, ptr)

    __swig_destroy__ = _cphd.delete_ScopedCopyableErrorMonostatic
    __del__ = lambda self: None

    def __eq__(self, other: 'ErrorMonostatic') -> "bool":
        """__eq__(ScopedCopyableErrorMonostatic self, ErrorMonostatic other) -> bool"""
        return _cphd.ScopedCopyableErrorMonostatic___eq__(self, other)


    def __ne__(self, other: 'ErrorMonostatic') -> "bool":
        """__ne__(ScopedCopyableErrorMonostatic self, ErrorMonostatic other) -> bool"""
        return _cphd.ScopedCopyableErrorMonostatic___ne__(self, other)

    __swig_setmethods__["posVelErr"] = _cphd.ScopedCopyableErrorMonostatic_posVelErr_set
    __swig_getmethods__["posVelErr"] = _cphd.ScopedCopyableErrorMonostatic_posVelErr_get
    if _newclass:
        posVelErr = _swig_property(_cphd.ScopedCopyableErrorMonostatic_posVelErr_get, _cphd.ScopedCopyableErrorMonostatic_posVelErr_set)
    __swig_setmethods__["radarSensor"] = _cphd.ScopedCopyableErrorMonostatic_radarSensor_set
    __swig_getmethods__["radarSensor"] = _cphd.ScopedCopyableErrorMonostatic_radarSensor_get
    if _newclass:
        radarSensor = _swig_property(_cphd.ScopedCopyableErrorMonostatic_radarSensor_get, _cphd.ScopedCopyableErrorMonostatic_radarSensor_set)
    __swig_setmethods__["tropoError"] = _cphd.ScopedCopyableErrorMonostatic_tropoError_set
    __swig_getmethods__["tropoError"] = _cphd.ScopedCopyableErrorMonostatic_tropoError_get
    if _newclass:
        tropoError = _swig_property(_cphd.ScopedCopyableErrorMonostatic_tropoError_get, _cphd.ScopedCopyableErrorMonostatic_tropoError_set)
    __swig_setmethods__["ionoError"] = _cphd.ScopedCopyableErrorMonostatic_ionoError_set
    __swig_getmethods__["ionoError"] = _cphd.ScopedCopyableErrorMonostatic_ionoError_get
    if _newclass:
        ionoError = _swig_property(_cphd.ScopedCopyableErrorMonostatic_ionoError_get, _cphd.ScopedCopyableErrorMonostatic_ionoError_set)
    __swig_setmethods__["parameter"] = _cphd.ScopedCopyableErrorMonostatic_parameter_set
    __swig_getmethods__["parameter"] = _cphd.ScopedCopyableErrorMonostatic_parameter_get
    if _newclass:
        parameter = _swig_property(_cphd.ScopedCopyableErrorMonostatic_parameter_get, _cphd.ScopedCopyableErrorMonostatic_parameter_set)
ScopedCopyableErrorMonostatic_swigregister = _cphd.ScopedCopyableErrorMonostatic_swigregister
ScopedCopyableErrorMonostatic_swigregister(ScopedCopyableErrorMonostatic)


def makeScopedCopyableErrorMonostatic() -> "mem::ScopedCopyablePtr< cphd::ErrorParameters::Monostatic >":
    """makeScopedCopyableErrorMonostatic() -> ScopedCopyableErrorMonostatic"""
    return _cphd.makeScopedCopyableErrorMonostatic()
class StdAutoDecorrType(_object):
    """Proxy of C++ std::auto_ptr<(six::DecorrType)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoDecorrType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoDecorrType, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(six::DecorrType)> self) -> StdAutoDecorrType"""
        this = _cphd.new_StdAutoDecorrType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cphd.delete_StdAutoDecorrType
    __del__ = lambda self: None
StdAutoDecorrType_swigregister = _cphd.StdAutoDecorrType_swigregister
StdAutoDecorrType_swigregister(StdAutoDecorrType)

class ScopedCopyableDecorrType(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(six::DecorrType)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableDecorrType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableDecorrType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(six::DecorrType)> self, DecorrType ptr=None) -> ScopedCopyableDecorrType
        __init__(mem::ScopedCopyablePtr<(six::DecorrType)> self) -> ScopedCopyableDecorrType
        __init__(mem::ScopedCopyablePtr<(six::DecorrType)> self, ScopedCopyableDecorrType rhs) -> ScopedCopyableDecorrType
        """
        this = _cphd.new_ScopedCopyableDecorrType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __nonzero__(self):
        return _cphd.ScopedCopyableDecorrType___nonzero__(self)
    __bool__ = __nonzero__



    def get(self) -> "six::DecorrType *":
        """get(ScopedCopyableDecorrType self) -> DecorrType"""
        return _cphd.ScopedCopyableDecorrType_get(self)


    def __ref__(self) -> "six::DecorrType &":
        """__ref__(ScopedCopyableDecorrType self) -> DecorrType"""
        return _cphd.ScopedCopyableDecorrType___ref__(self)


    def __deref__(self) -> "six::DecorrType *":
        """__deref__(ScopedCopyableDecorrType self) -> DecorrType"""
        return _cphd.ScopedCopyableDecorrType___deref__(self)


    def reset(self, ptr: 'DecorrType'=None) -> "void":
        """
        reset(ScopedCopyableDecorrType self, DecorrType ptr=None)
        reset(ScopedCopyableDecorrType self)
        """
        return _cphd.ScopedCopyableDecorrType_reset(self, ptr)

    __swig_destroy__ = _cphd.delete_ScopedCopyableDecorrType
    __del__ = lambda self: None

    def __eq__(self, rhs: 'DecorrType') -> "bool":
        """__eq__(ScopedCopyableDecorrType self, DecorrType rhs) -> bool"""
        return _cphd.ScopedCopyableDecorrType___eq__(self, rhs)

    __swig_setmethods__["corrCoefZero"] = _cphd.ScopedCopyableDecorrType_corrCoefZero_set
    __swig_getmethods__["corrCoefZero"] = _cphd.ScopedCopyableDecorrType_corrCoefZero_get
    if _newclass:
        corrCoefZero = _swig_property(_cphd.ScopedCopyableDecorrType_corrCoefZero_get, _cphd.ScopedCopyableDecorrType_corrCoefZero_set)
    __swig_setmethods__["decorrRate"] = _cphd.ScopedCopyableDecorrType_decorrRate_set
    __swig_getmethods__["decorrRate"] = _cphd.ScopedCopyableDecorrType_decorrRate_get
    if _newclass:
        decorrRate = _swig_property(_cphd.ScopedCopyableDecorrType_decorrRate_get, _cphd.ScopedCopyableDecorrType_decorrRate_set)
ScopedCopyableDecorrType_swigregister = _cphd.ScopedCopyableDecorrType_swigregister
ScopedCopyableDecorrType_swigregister(ScopedCopyableDecorrType)


def makeScopedCopyableDecorrType() -> "mem::ScopedCopyablePtr< six::DecorrType >":
    """makeScopedCopyableDecorrType() -> ScopedCopyableDecorrType"""
    return _cphd.makeScopedCopyableDecorrType()
class StdAutoProductInfo(_object):
    """Proxy of C++ std::auto_ptr<(cphd::ProductInfo)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoProductInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoProductInfo, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(cphd::ProductInfo)> self) -> StdAutoProductInfo"""
        this = _cphd.new_StdAutoProductInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cphd.delete_StdAutoProductInfo
    __del__ = lambda self: None
StdAutoProductInfo_swigregister = _cphd.StdAutoProductInfo_swigregister
StdAutoProductInfo_swigregister(StdAutoProductInfo)

class ScopedCopyableProductInfo(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(cphd::ProductInfo)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableProductInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableProductInfo, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(cphd::ProductInfo)> self, ProductInfo ptr=None) -> ScopedCopyableProductInfo
        __init__(mem::ScopedCopyablePtr<(cphd::ProductInfo)> self) -> ScopedCopyableProductInfo
        __init__(mem::ScopedCopyablePtr<(cphd::ProductInfo)> self, ScopedCopyableProductInfo rhs) -> ScopedCopyableProductInfo
        """
        this = _cphd.new_ScopedCopyableProductInfo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __nonzero__(self):
        return _cphd.ScopedCopyableProductInfo___nonzero__(self)
    __bool__ = __nonzero__



    def get(self) -> "cphd::ProductInfo *":
        """get(ScopedCopyableProductInfo self) -> ProductInfo"""
        return _cphd.ScopedCopyableProductInfo_get(self)


    def __ref__(self) -> "cphd::ProductInfo &":
        """__ref__(ScopedCopyableProductInfo self) -> ProductInfo"""
        return _cphd.ScopedCopyableProductInfo___ref__(self)


    def __deref__(self) -> "cphd::ProductInfo *":
        """__deref__(ScopedCopyableProductInfo self) -> ProductInfo"""
        return _cphd.ScopedCopyableProductInfo___deref__(self)


    def reset(self, ptr: 'ProductInfo'=None) -> "void":
        """
        reset(ScopedCopyableProductInfo self, ProductInfo ptr=None)
        reset(ScopedCopyableProductInfo self)
        """
        return _cphd.ScopedCopyableProductInfo_reset(self, ptr)

    __swig_destroy__ = _cphd.delete_ScopedCopyableProductInfo
    __del__ = lambda self: None

    def __eq__(self, other: 'ProductInfo') -> "bool":
        """__eq__(ScopedCopyableProductInfo self, ProductInfo other) -> bool"""
        return _cphd.ScopedCopyableProductInfo___eq__(self, other)


    def __ne__(self, other: 'ProductInfo') -> "bool":
        """__ne__(ScopedCopyableProductInfo self, ProductInfo other) -> bool"""
        return _cphd.ScopedCopyableProductInfo___ne__(self, other)

    __swig_setmethods__["profile"] = _cphd.ScopedCopyableProductInfo_profile_set
    __swig_getmethods__["profile"] = _cphd.ScopedCopyableProductInfo_profile_get
    if _newclass:
        profile = _swig_property(_cphd.ScopedCopyableProductInfo_profile_get, _cphd.ScopedCopyableProductInfo_profile_set)
    __swig_setmethods__["creationInfo"] = _cphd.ScopedCopyableProductInfo_creationInfo_set
    __swig_getmethods__["creationInfo"] = _cphd.ScopedCopyableProductInfo_creationInfo_get
    if _newclass:
        creationInfo = _swig_property(_cphd.ScopedCopyableProductInfo_creationInfo_get, _cphd.ScopedCopyableProductInfo_creationInfo_set)
    __swig_setmethods__["parameter"] = _cphd.ScopedCopyableProductInfo_parameter_set
    __swig_getmethods__["parameter"] = _cphd.ScopedCopyableProductInfo_parameter_get
    if _newclass:
        parameter = _swig_property(_cphd.ScopedCopyableProductInfo_parameter_get, _cphd.ScopedCopyableProductInfo_parameter_set)
ScopedCopyableProductInfo_swigregister = _cphd.ScopedCopyableProductInfo_swigregister
ScopedCopyableProductInfo_swigregister(ScopedCopyableProductInfo)


def makeScopedCopyableProductInfo() -> "mem::ScopedCopyablePtr< cphd::ProductInfo >":
    """makeScopedCopyableProductInfo() -> ScopedCopyableProductInfo"""
    return _cphd.makeScopedCopyableProductInfo()
class StdAutoCphdAntenna(_object):
    """Proxy of C++ std::auto_ptr<(cphd::Antenna)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoCphdAntenna, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoCphdAntenna, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(cphd::Antenna)> self) -> StdAutoCphdAntenna"""
        this = _cphd.new_StdAutoCphdAntenna()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cphd.delete_StdAutoCphdAntenna
    __del__ = lambda self: None
StdAutoCphdAntenna_swigregister = _cphd.StdAutoCphdAntenna_swigregister
StdAutoCphdAntenna_swigregister(StdAutoCphdAntenna)

class ScopedCopyableCphdAntenna(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(cphd::Antenna)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableCphdAntenna, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableCphdAntenna, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(cphd::Antenna)> self, CphdAntenna ptr=None) -> ScopedCopyableCphdAntenna
        __init__(mem::ScopedCopyablePtr<(cphd::Antenna)> self) -> ScopedCopyableCphdAntenna
        __init__(mem::ScopedCopyablePtr<(cphd::Antenna)> self, ScopedCopyableCphdAntenna rhs) -> ScopedCopyableCphdAntenna
        """
        this = _cphd.new_ScopedCopyableCphdAntenna(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __nonzero__(self):
        return _cphd.ScopedCopyableCphdAntenna___nonzero__(self)
    __bool__ = __nonzero__



    def get(self) -> "cphd::Antenna *":
        """get(ScopedCopyableCphdAntenna self) -> CphdAntenna"""
        return _cphd.ScopedCopyableCphdAntenna_get(self)


    def __ref__(self) -> "cphd::Antenna &":
        """__ref__(ScopedCopyableCphdAntenna self) -> CphdAntenna"""
        return _cphd.ScopedCopyableCphdAntenna___ref__(self)


    def __deref__(self) -> "cphd::Antenna *":
        """__deref__(ScopedCopyableCphdAntenna self) -> CphdAntenna"""
        return _cphd.ScopedCopyableCphdAntenna___deref__(self)


    def reset(self, ptr: 'CphdAntenna'=None) -> "void":
        """
        reset(ScopedCopyableCphdAntenna self, CphdAntenna ptr=None)
        reset(ScopedCopyableCphdAntenna self)
        """
        return _cphd.ScopedCopyableCphdAntenna_reset(self, ptr)

    __swig_destroy__ = _cphd.delete_ScopedCopyableCphdAntenna
    __del__ = lambda self: None

    def __eq__(self, other: 'CphdAntenna') -> "bool":
        """__eq__(ScopedCopyableCphdAntenna self, CphdAntenna other) -> bool"""
        return _cphd.ScopedCopyableCphdAntenna___eq__(self, other)


    def __ne__(self, other: 'CphdAntenna') -> "bool":
        """__ne__(ScopedCopyableCphdAntenna self, CphdAntenna other) -> bool"""
        return _cphd.ScopedCopyableCphdAntenna___ne__(self, other)

    __swig_setmethods__["antCoordFrame"] = _cphd.ScopedCopyableCphdAntenna_antCoordFrame_set
    __swig_getmethods__["antCoordFrame"] = _cphd.ScopedCopyableCphdAntenna_antCoordFrame_get
    if _newclass:
        antCoordFrame = _swig_property(_cphd.ScopedCopyableCphdAntenna_antCoordFrame_get, _cphd.ScopedCopyableCphdAntenna_antCoordFrame_set)
    __swig_setmethods__["antPhaseCenter"] = _cphd.ScopedCopyableCphdAntenna_antPhaseCenter_set
    __swig_getmethods__["antPhaseCenter"] = _cphd.ScopedCopyableCphdAntenna_antPhaseCenter_get
    if _newclass:
        antPhaseCenter = _swig_property(_cphd.ScopedCopyableCphdAntenna_antPhaseCenter_get, _cphd.ScopedCopyableCphdAntenna_antPhaseCenter_set)
    __swig_setmethods__["antPattern"] = _cphd.ScopedCopyableCphdAntenna_antPattern_set
    __swig_getmethods__["antPattern"] = _cphd.ScopedCopyableCphdAntenna_antPattern_get
    if _newclass:
        antPattern = _swig_property(_cphd.ScopedCopyableCphdAntenna_antPattern_get, _cphd.ScopedCopyableCphdAntenna_antPattern_set)
ScopedCopyableCphdAntenna_swigregister = _cphd.ScopedCopyableCphdAntenna_swigregister
ScopedCopyableCphdAntenna_swigregister(ScopedCopyableCphdAntenna)


def makeScopedCopyableCphdAntenna() -> "mem::ScopedCopyablePtr< cphd::Antenna >":
    """makeScopedCopyableCphdAntenna() -> ScopedCopyableCphdAntenna"""
    return _cphd.makeScopedCopyableCphdAntenna()
# This file is compatible with both classic and new-style classes.


